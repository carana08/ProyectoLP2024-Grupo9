Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BEGIN
    CLASS
    CLASS_VAR
    CONSTANT
    ELSIF
    GLOBAL_VAR
    HASHARROW
    INSTANCE_VAR
    L_MAYUS_PAREN
    NIL
    R_MAYUS_PAREN
    THEN
    TWO_POINTS
    WHEN
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> print_statement
Rule 5     statement -> puts_statement
Rule 6     statement -> input_statement
Rule 7     statement -> assignment_statement
Rule 8     statement -> data_structure
Rule 9     statement -> control_structure
Rule 10    statement -> function_definition
Rule 11    assignment_statement -> LOCAL_VAR ASSIGN expression
Rule 12    print_statement -> PRINT L_PAREN argument_list R_PAREN
Rule 13    print_statement -> PRINT L_PAREN R_PAREN
Rule 14    print_statement -> PRINT argument_list
Rule 15    print_statement -> PRINT
Rule 16    puts_statement -> PUTS L_PAREN argument_list R_PAREN
Rule 17    puts_statement -> PUTS L_PAREN R_PAREN
Rule 18    puts_statement -> PUTS argument_list
Rule 19    puts_statement -> PUTS
Rule 20    argument_list -> expression
Rule 21    argument_list -> argument_list COMMA expression
Rule 22    input_statement -> LOCAL_VAR ASSIGN GETS
Rule 23    input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP
Rule 24    data_structure -> array_definition
Rule 25    array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
Rule 26    element_list -> expression
Rule 27    element_list -> element_list COMMA expression
Rule 28    control_structure -> if_statement
Rule 29    control_structure -> until_statement
Rule 30    control_structure -> unless_statement
Rule 31    if_statement -> IF condition statement_list END
Rule 32    if_statement -> IF condition statement_list ELSE statement_list END
Rule 33    unless_statement -> UNLESS condition statement_list END
Rule 34    unless_statement -> UNLESS condition statement_list ELSE statement_list END
Rule 35    until_statement -> UNTIL condition statement_list END
Rule 36    condition -> expression comparison_operator expression
Rule 37    function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
Rule 38    parameter_list -> LOCAL_VAR
Rule 39    parameter_list -> parameter_list COMMA LOCAL_VAR
Rule 40    parameter_list -> empty
Rule 41    expression -> INTEGER
Rule 42    expression -> FLOAT
Rule 43    expression -> STRING
Rule 44    expression -> LOCAL_VAR
Rule 45    expression -> array_access
Rule 46    expression -> expression PLUS expression
Rule 47    expression -> expression MINUS expression
Rule 48    expression -> expression MULTIPLY expression
Rule 49    expression -> expression DIVIDE expression
Rule 50    expression -> expression MODULE expression
Rule 51    expression -> expression comparison_operator expression
Rule 52    array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
Rule 53    comparison_operator -> EQUALS
Rule 54    comparison_operator -> DIFFERENT
Rule 55    comparison_operator -> LESS
Rule 56    comparison_operator -> LESS_EQUAL
Rule 57    comparison_operator -> GREATER
Rule 58    comparison_operator -> GREATER_EQUAL
Rule 59    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 11 22 23 25
BEGIN                : 
CHOMP                : 23
CLASS                : 
CLASS_VAR            : 
COMMA                : 21 27 39
CONSTANT             : 
DEF                  : 37
DIFFERENT            : 54
DIVIDE               : 49
DOT                  : 23
ELSE                 : 32 34
ELSIF                : 
END                  : 31 32 33 34 35 37
EQUALS               : 53
FLOAT                : 42
GETS                 : 22 23
GLOBAL_VAR           : 
GREATER              : 57
GREATER_EQUAL        : 58
HASHARROW            : 
IF                   : 31 32
INSTANCE_VAR         : 
INTEGER              : 41
LESS                 : 55
LESS_EQUAL           : 56
LOCAL_VAR            : 11 22 23 25 37 38 39 44 52
L_MAYUS_PAREN        : 
L_PAREN              : 12 13 16 17 37
L_ULTRA_PAREN        : 25 52
MINUS                : 47
MODULE               : 50
MULTIPLY             : 48
NIL                  : 
PLUS                 : 46
PRINT                : 12 13 14 15
PUTS                 : 16 17 18 19
R_MAYUS_PAREN        : 
R_PAREN              : 12 13 16 17 37
R_ULTRA_PAREN        : 25 52
STRING               : 43
THEN                 : 
TWO_POINTS           : 
UNLESS               : 33 34
UNTIL                : 35
WHEN                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

argument_list        : 12 14 16 18 21
array_access         : 45
array_definition     : 24
assignment_statement : 7
comparison_operator  : 36 51
condition            : 31 32 33 34 35
control_structure    : 9
data_structure       : 8
element_list         : 25 27
empty                : 40
expression           : 11 20 21 26 27 36 36 46 46 47 47 48 48 49 49 50 50 51 51 52
function_definition  : 10
if_statement         : 28
input_statement      : 6
parameter_list       : 37 39
print_statement      : 4
program              : 0
puts_statement       : 5
statement            : 2 3
statement_list       : 1 3 31 32 32 33 34 34 35 37
unless_statement     : 30
until_statement      : 29

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    $end            reduce using rule 1 (program -> statement_list .)
    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement                      shift and go to state 22
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 3

    (2) statement_list -> statement .

    PRINT           reduce using rule 2 (statement_list -> statement .)
    PUTS            reduce using rule 2 (statement_list -> statement .)
    LOCAL_VAR       reduce using rule 2 (statement_list -> statement .)
    DEF             reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    UNTIL           reduce using rule 2 (statement_list -> statement .)
    UNLESS          reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    END             reduce using rule 2 (statement_list -> statement .)
    ELSE            reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> print_statement .

    PRINT           reduce using rule 4 (statement -> print_statement .)
    PUTS            reduce using rule 4 (statement -> print_statement .)
    LOCAL_VAR       reduce using rule 4 (statement -> print_statement .)
    DEF             reduce using rule 4 (statement -> print_statement .)
    IF              reduce using rule 4 (statement -> print_statement .)
    UNTIL           reduce using rule 4 (statement -> print_statement .)
    UNLESS          reduce using rule 4 (statement -> print_statement .)
    $end            reduce using rule 4 (statement -> print_statement .)
    END             reduce using rule 4 (statement -> print_statement .)
    ELSE            reduce using rule 4 (statement -> print_statement .)


state 5

    (5) statement -> puts_statement .

    PRINT           reduce using rule 5 (statement -> puts_statement .)
    PUTS            reduce using rule 5 (statement -> puts_statement .)
    LOCAL_VAR       reduce using rule 5 (statement -> puts_statement .)
    DEF             reduce using rule 5 (statement -> puts_statement .)
    IF              reduce using rule 5 (statement -> puts_statement .)
    UNTIL           reduce using rule 5 (statement -> puts_statement .)
    UNLESS          reduce using rule 5 (statement -> puts_statement .)
    $end            reduce using rule 5 (statement -> puts_statement .)
    END             reduce using rule 5 (statement -> puts_statement .)
    ELSE            reduce using rule 5 (statement -> puts_statement .)


state 6

    (6) statement -> input_statement .

    PRINT           reduce using rule 6 (statement -> input_statement .)
    PUTS            reduce using rule 6 (statement -> input_statement .)
    LOCAL_VAR       reduce using rule 6 (statement -> input_statement .)
    DEF             reduce using rule 6 (statement -> input_statement .)
    IF              reduce using rule 6 (statement -> input_statement .)
    UNTIL           reduce using rule 6 (statement -> input_statement .)
    UNLESS          reduce using rule 6 (statement -> input_statement .)
    $end            reduce using rule 6 (statement -> input_statement .)
    END             reduce using rule 6 (statement -> input_statement .)
    ELSE            reduce using rule 6 (statement -> input_statement .)


state 7

    (7) statement -> assignment_statement .

    PRINT           reduce using rule 7 (statement -> assignment_statement .)
    PUTS            reduce using rule 7 (statement -> assignment_statement .)
    LOCAL_VAR       reduce using rule 7 (statement -> assignment_statement .)
    DEF             reduce using rule 7 (statement -> assignment_statement .)
    IF              reduce using rule 7 (statement -> assignment_statement .)
    UNTIL           reduce using rule 7 (statement -> assignment_statement .)
    UNLESS          reduce using rule 7 (statement -> assignment_statement .)
    $end            reduce using rule 7 (statement -> assignment_statement .)
    END             reduce using rule 7 (statement -> assignment_statement .)
    ELSE            reduce using rule 7 (statement -> assignment_statement .)


state 8

    (8) statement -> data_structure .

    PRINT           reduce using rule 8 (statement -> data_structure .)
    PUTS            reduce using rule 8 (statement -> data_structure .)
    LOCAL_VAR       reduce using rule 8 (statement -> data_structure .)
    DEF             reduce using rule 8 (statement -> data_structure .)
    IF              reduce using rule 8 (statement -> data_structure .)
    UNTIL           reduce using rule 8 (statement -> data_structure .)
    UNLESS          reduce using rule 8 (statement -> data_structure .)
    $end            reduce using rule 8 (statement -> data_structure .)
    END             reduce using rule 8 (statement -> data_structure .)
    ELSE            reduce using rule 8 (statement -> data_structure .)


state 9

    (9) statement -> control_structure .

    PRINT           reduce using rule 9 (statement -> control_structure .)
    PUTS            reduce using rule 9 (statement -> control_structure .)
    LOCAL_VAR       reduce using rule 9 (statement -> control_structure .)
    DEF             reduce using rule 9 (statement -> control_structure .)
    IF              reduce using rule 9 (statement -> control_structure .)
    UNTIL           reduce using rule 9 (statement -> control_structure .)
    UNLESS          reduce using rule 9 (statement -> control_structure .)
    $end            reduce using rule 9 (statement -> control_structure .)
    END             reduce using rule 9 (statement -> control_structure .)
    ELSE            reduce using rule 9 (statement -> control_structure .)


state 10

    (10) statement -> function_definition .

    PRINT           reduce using rule 10 (statement -> function_definition .)
    PUTS            reduce using rule 10 (statement -> function_definition .)
    LOCAL_VAR       reduce using rule 10 (statement -> function_definition .)
    DEF             reduce using rule 10 (statement -> function_definition .)
    IF              reduce using rule 10 (statement -> function_definition .)
    UNTIL           reduce using rule 10 (statement -> function_definition .)
    UNLESS          reduce using rule 10 (statement -> function_definition .)
    $end            reduce using rule 10 (statement -> function_definition .)
    END             reduce using rule 10 (statement -> function_definition .)
    ELSE            reduce using rule 10 (statement -> function_definition .)


state 11

    (12) print_statement -> PRINT . L_PAREN argument_list R_PAREN
    (13) print_statement -> PRINT . L_PAREN R_PAREN
    (14) print_statement -> PRINT . argument_list
    (15) print_statement -> PRINT .
    (20) argument_list -> . expression
    (21) argument_list -> . argument_list COMMA expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

  ! shift/reduce conflict for LOCAL_VAR resolved as shift
    L_PAREN         shift and go to state 23
    PRINT           reduce using rule 15 (print_statement -> PRINT .)
    PUTS            reduce using rule 15 (print_statement -> PRINT .)
    DEF             reduce using rule 15 (print_statement -> PRINT .)
    IF              reduce using rule 15 (print_statement -> PRINT .)
    UNTIL           reduce using rule 15 (print_statement -> PRINT .)
    UNLESS          reduce using rule 15 (print_statement -> PRINT .)
    $end            reduce using rule 15 (print_statement -> PRINT .)
    END             reduce using rule 15 (print_statement -> PRINT .)
    ELSE            reduce using rule 15 (print_statement -> PRINT .)
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

  ! LOCAL_VAR       [ reduce using rule 15 (print_statement -> PRINT .) ]

    argument_list                  shift and go to state 24
    expression                     shift and go to state 25
    array_access                   shift and go to state 30

state 12

    (16) puts_statement -> PUTS . L_PAREN argument_list R_PAREN
    (17) puts_statement -> PUTS . L_PAREN R_PAREN
    (18) puts_statement -> PUTS . argument_list
    (19) puts_statement -> PUTS .
    (20) argument_list -> . expression
    (21) argument_list -> . argument_list COMMA expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

  ! shift/reduce conflict for LOCAL_VAR resolved as shift
    L_PAREN         shift and go to state 31
    PRINT           reduce using rule 19 (puts_statement -> PUTS .)
    PUTS            reduce using rule 19 (puts_statement -> PUTS .)
    DEF             reduce using rule 19 (puts_statement -> PUTS .)
    IF              reduce using rule 19 (puts_statement -> PUTS .)
    UNTIL           reduce using rule 19 (puts_statement -> PUTS .)
    UNLESS          reduce using rule 19 (puts_statement -> PUTS .)
    $end            reduce using rule 19 (puts_statement -> PUTS .)
    END             reduce using rule 19 (puts_statement -> PUTS .)
    ELSE            reduce using rule 19 (puts_statement -> PUTS .)
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

  ! LOCAL_VAR       [ reduce using rule 19 (puts_statement -> PUTS .) ]

    argument_list                  shift and go to state 32
    expression                     shift and go to state 25
    array_access                   shift and go to state 30

state 13

    (22) input_statement -> LOCAL_VAR . ASSIGN GETS
    (23) input_statement -> LOCAL_VAR . ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> LOCAL_VAR . ASSIGN expression
    (25) array_definition -> LOCAL_VAR . ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN

    ASSIGN          shift and go to state 33


state 14

    (24) data_structure -> array_definition .

    PRINT           reduce using rule 24 (data_structure -> array_definition .)
    PUTS            reduce using rule 24 (data_structure -> array_definition .)
    LOCAL_VAR       reduce using rule 24 (data_structure -> array_definition .)
    DEF             reduce using rule 24 (data_structure -> array_definition .)
    IF              reduce using rule 24 (data_structure -> array_definition .)
    UNTIL           reduce using rule 24 (data_structure -> array_definition .)
    UNLESS          reduce using rule 24 (data_structure -> array_definition .)
    $end            reduce using rule 24 (data_structure -> array_definition .)
    END             reduce using rule 24 (data_structure -> array_definition .)
    ELSE            reduce using rule 24 (data_structure -> array_definition .)


state 15

    (28) control_structure -> if_statement .

    PRINT           reduce using rule 28 (control_structure -> if_statement .)
    PUTS            reduce using rule 28 (control_structure -> if_statement .)
    LOCAL_VAR       reduce using rule 28 (control_structure -> if_statement .)
    DEF             reduce using rule 28 (control_structure -> if_statement .)
    IF              reduce using rule 28 (control_structure -> if_statement .)
    UNTIL           reduce using rule 28 (control_structure -> if_statement .)
    UNLESS          reduce using rule 28 (control_structure -> if_statement .)
    $end            reduce using rule 28 (control_structure -> if_statement .)
    END             reduce using rule 28 (control_structure -> if_statement .)
    ELSE            reduce using rule 28 (control_structure -> if_statement .)


state 16

    (29) control_structure -> until_statement .

    PRINT           reduce using rule 29 (control_structure -> until_statement .)
    PUTS            reduce using rule 29 (control_structure -> until_statement .)
    LOCAL_VAR       reduce using rule 29 (control_structure -> until_statement .)
    DEF             reduce using rule 29 (control_structure -> until_statement .)
    IF              reduce using rule 29 (control_structure -> until_statement .)
    UNTIL           reduce using rule 29 (control_structure -> until_statement .)
    UNLESS          reduce using rule 29 (control_structure -> until_statement .)
    $end            reduce using rule 29 (control_structure -> until_statement .)
    END             reduce using rule 29 (control_structure -> until_statement .)
    ELSE            reduce using rule 29 (control_structure -> until_statement .)


state 17

    (30) control_structure -> unless_statement .

    PRINT           reduce using rule 30 (control_structure -> unless_statement .)
    PUTS            reduce using rule 30 (control_structure -> unless_statement .)
    LOCAL_VAR       reduce using rule 30 (control_structure -> unless_statement .)
    DEF             reduce using rule 30 (control_structure -> unless_statement .)
    IF              reduce using rule 30 (control_structure -> unless_statement .)
    UNTIL           reduce using rule 30 (control_structure -> unless_statement .)
    UNLESS          reduce using rule 30 (control_structure -> unless_statement .)
    $end            reduce using rule 30 (control_structure -> unless_statement .)
    END             reduce using rule 30 (control_structure -> unless_statement .)
    ELSE            reduce using rule 30 (control_structure -> unless_statement .)


state 18

    (37) function_definition -> DEF . LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END

    LOCAL_VAR       shift and go to state 34


state 19

    (31) if_statement -> IF . condition statement_list END
    (32) if_statement -> IF . condition statement_list ELSE statement_list END
    (36) condition -> . expression comparison_operator expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    condition                      shift and go to state 35
    expression                     shift and go to state 36
    array_access                   shift and go to state 30

state 20

    (35) until_statement -> UNTIL . condition statement_list END
    (36) condition -> . expression comparison_operator expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    condition                      shift and go to state 37
    expression                     shift and go to state 36
    array_access                   shift and go to state 30

state 21

    (33) unless_statement -> UNLESS . condition statement_list END
    (34) unless_statement -> UNLESS . condition statement_list ELSE statement_list END
    (36) condition -> . expression comparison_operator expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    condition                      shift and go to state 38
    expression                     shift and go to state 36
    array_access                   shift and go to state 30

state 22

    (3) statement_list -> statement_list statement .

    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    PUTS            reduce using rule 3 (statement_list -> statement_list statement .)
    LOCAL_VAR       reduce using rule 3 (statement_list -> statement_list statement .)
    DEF             reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 3 (statement_list -> statement_list statement .)
    UNLESS          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    END             reduce using rule 3 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 3 (statement_list -> statement_list statement .)


state 23

    (12) print_statement -> PRINT L_PAREN . argument_list R_PAREN
    (13) print_statement -> PRINT L_PAREN . R_PAREN
    (20) argument_list -> . expression
    (21) argument_list -> . argument_list COMMA expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    R_PAREN         shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    argument_list                  shift and go to state 39
    expression                     shift and go to state 25
    array_access                   shift and go to state 30

state 24

    (14) print_statement -> PRINT argument_list .
    (21) argument_list -> argument_list . COMMA expression

    PRINT           reduce using rule 14 (print_statement -> PRINT argument_list .)
    PUTS            reduce using rule 14 (print_statement -> PRINT argument_list .)
    LOCAL_VAR       reduce using rule 14 (print_statement -> PRINT argument_list .)
    DEF             reduce using rule 14 (print_statement -> PRINT argument_list .)
    IF              reduce using rule 14 (print_statement -> PRINT argument_list .)
    UNTIL           reduce using rule 14 (print_statement -> PRINT argument_list .)
    UNLESS          reduce using rule 14 (print_statement -> PRINT argument_list .)
    $end            reduce using rule 14 (print_statement -> PRINT argument_list .)
    END             reduce using rule 14 (print_statement -> PRINT argument_list .)
    ELSE            reduce using rule 14 (print_statement -> PRINT argument_list .)
    COMMA           shift and go to state 41


state 25

    (20) argument_list -> expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

    COMMA           reduce using rule 20 (argument_list -> expression .)
    PRINT           reduce using rule 20 (argument_list -> expression .)
    PUTS            reduce using rule 20 (argument_list -> expression .)
    LOCAL_VAR       reduce using rule 20 (argument_list -> expression .)
    DEF             reduce using rule 20 (argument_list -> expression .)
    IF              reduce using rule 20 (argument_list -> expression .)
    UNTIL           reduce using rule 20 (argument_list -> expression .)
    UNLESS          reduce using rule 20 (argument_list -> expression .)
    $end            reduce using rule 20 (argument_list -> expression .)
    END             reduce using rule 20 (argument_list -> expression .)
    ELSE            reduce using rule 20 (argument_list -> expression .)
    R_PAREN         reduce using rule 20 (argument_list -> expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

    comparison_operator            shift and go to state 47

state 26

    (41) expression -> INTEGER .

    PLUS            reduce using rule 41 (expression -> INTEGER .)
    MINUS           reduce using rule 41 (expression -> INTEGER .)
    MULTIPLY        reduce using rule 41 (expression -> INTEGER .)
    DIVIDE          reduce using rule 41 (expression -> INTEGER .)
    MODULE          reduce using rule 41 (expression -> INTEGER .)
    EQUALS          reduce using rule 41 (expression -> INTEGER .)
    DIFFERENT       reduce using rule 41 (expression -> INTEGER .)
    LESS            reduce using rule 41 (expression -> INTEGER .)
    LESS_EQUAL      reduce using rule 41 (expression -> INTEGER .)
    GREATER         reduce using rule 41 (expression -> INTEGER .)
    GREATER_EQUAL   reduce using rule 41 (expression -> INTEGER .)
    COMMA           reduce using rule 41 (expression -> INTEGER .)
    PRINT           reduce using rule 41 (expression -> INTEGER .)
    PUTS            reduce using rule 41 (expression -> INTEGER .)
    LOCAL_VAR       reduce using rule 41 (expression -> INTEGER .)
    DEF             reduce using rule 41 (expression -> INTEGER .)
    IF              reduce using rule 41 (expression -> INTEGER .)
    UNTIL           reduce using rule 41 (expression -> INTEGER .)
    UNLESS          reduce using rule 41 (expression -> INTEGER .)
    $end            reduce using rule 41 (expression -> INTEGER .)
    END             reduce using rule 41 (expression -> INTEGER .)
    ELSE            reduce using rule 41 (expression -> INTEGER .)
    R_PAREN         reduce using rule 41 (expression -> INTEGER .)
    R_ULTRA_PAREN   reduce using rule 41 (expression -> INTEGER .)


state 27

    (42) expression -> FLOAT .

    PLUS            reduce using rule 42 (expression -> FLOAT .)
    MINUS           reduce using rule 42 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 42 (expression -> FLOAT .)
    DIVIDE          reduce using rule 42 (expression -> FLOAT .)
    MODULE          reduce using rule 42 (expression -> FLOAT .)
    EQUALS          reduce using rule 42 (expression -> FLOAT .)
    DIFFERENT       reduce using rule 42 (expression -> FLOAT .)
    LESS            reduce using rule 42 (expression -> FLOAT .)
    LESS_EQUAL      reduce using rule 42 (expression -> FLOAT .)
    GREATER         reduce using rule 42 (expression -> FLOAT .)
    GREATER_EQUAL   reduce using rule 42 (expression -> FLOAT .)
    COMMA           reduce using rule 42 (expression -> FLOAT .)
    PRINT           reduce using rule 42 (expression -> FLOAT .)
    PUTS            reduce using rule 42 (expression -> FLOAT .)
    LOCAL_VAR       reduce using rule 42 (expression -> FLOAT .)
    DEF             reduce using rule 42 (expression -> FLOAT .)
    IF              reduce using rule 42 (expression -> FLOAT .)
    UNTIL           reduce using rule 42 (expression -> FLOAT .)
    UNLESS          reduce using rule 42 (expression -> FLOAT .)
    $end            reduce using rule 42 (expression -> FLOAT .)
    END             reduce using rule 42 (expression -> FLOAT .)
    ELSE            reduce using rule 42 (expression -> FLOAT .)
    R_PAREN         reduce using rule 42 (expression -> FLOAT .)
    R_ULTRA_PAREN   reduce using rule 42 (expression -> FLOAT .)


state 28

    (43) expression -> STRING .

    PLUS            reduce using rule 43 (expression -> STRING .)
    MINUS           reduce using rule 43 (expression -> STRING .)
    MULTIPLY        reduce using rule 43 (expression -> STRING .)
    DIVIDE          reduce using rule 43 (expression -> STRING .)
    MODULE          reduce using rule 43 (expression -> STRING .)
    EQUALS          reduce using rule 43 (expression -> STRING .)
    DIFFERENT       reduce using rule 43 (expression -> STRING .)
    LESS            reduce using rule 43 (expression -> STRING .)
    LESS_EQUAL      reduce using rule 43 (expression -> STRING .)
    GREATER         reduce using rule 43 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 43 (expression -> STRING .)
    COMMA           reduce using rule 43 (expression -> STRING .)
    PRINT           reduce using rule 43 (expression -> STRING .)
    PUTS            reduce using rule 43 (expression -> STRING .)
    LOCAL_VAR       reduce using rule 43 (expression -> STRING .)
    DEF             reduce using rule 43 (expression -> STRING .)
    IF              reduce using rule 43 (expression -> STRING .)
    UNTIL           reduce using rule 43 (expression -> STRING .)
    UNLESS          reduce using rule 43 (expression -> STRING .)
    $end            reduce using rule 43 (expression -> STRING .)
    END             reduce using rule 43 (expression -> STRING .)
    ELSE            reduce using rule 43 (expression -> STRING .)
    R_PAREN         reduce using rule 43 (expression -> STRING .)
    R_ULTRA_PAREN   reduce using rule 43 (expression -> STRING .)


state 29

    (44) expression -> LOCAL_VAR .
    (52) array_access -> LOCAL_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN

    PLUS            reduce using rule 44 (expression -> LOCAL_VAR .)
    MINUS           reduce using rule 44 (expression -> LOCAL_VAR .)
    MULTIPLY        reduce using rule 44 (expression -> LOCAL_VAR .)
    DIVIDE          reduce using rule 44 (expression -> LOCAL_VAR .)
    MODULE          reduce using rule 44 (expression -> LOCAL_VAR .)
    EQUALS          reduce using rule 44 (expression -> LOCAL_VAR .)
    DIFFERENT       reduce using rule 44 (expression -> LOCAL_VAR .)
    LESS            reduce using rule 44 (expression -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 44 (expression -> LOCAL_VAR .)
    GREATER         reduce using rule 44 (expression -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 44 (expression -> LOCAL_VAR .)
    COMMA           reduce using rule 44 (expression -> LOCAL_VAR .)
    PRINT           reduce using rule 44 (expression -> LOCAL_VAR .)
    PUTS            reduce using rule 44 (expression -> LOCAL_VAR .)
    LOCAL_VAR       reduce using rule 44 (expression -> LOCAL_VAR .)
    DEF             reduce using rule 44 (expression -> LOCAL_VAR .)
    IF              reduce using rule 44 (expression -> LOCAL_VAR .)
    UNTIL           reduce using rule 44 (expression -> LOCAL_VAR .)
    UNLESS          reduce using rule 44 (expression -> LOCAL_VAR .)
    $end            reduce using rule 44 (expression -> LOCAL_VAR .)
    END             reduce using rule 44 (expression -> LOCAL_VAR .)
    ELSE            reduce using rule 44 (expression -> LOCAL_VAR .)
    R_PAREN         reduce using rule 44 (expression -> LOCAL_VAR .)
    R_ULTRA_PAREN   reduce using rule 44 (expression -> LOCAL_VAR .)
    L_ULTRA_PAREN   shift and go to state 54


state 30

    (45) expression -> array_access .

    PLUS            reduce using rule 45 (expression -> array_access .)
    MINUS           reduce using rule 45 (expression -> array_access .)
    MULTIPLY        reduce using rule 45 (expression -> array_access .)
    DIVIDE          reduce using rule 45 (expression -> array_access .)
    MODULE          reduce using rule 45 (expression -> array_access .)
    EQUALS          reduce using rule 45 (expression -> array_access .)
    DIFFERENT       reduce using rule 45 (expression -> array_access .)
    LESS            reduce using rule 45 (expression -> array_access .)
    LESS_EQUAL      reduce using rule 45 (expression -> array_access .)
    GREATER         reduce using rule 45 (expression -> array_access .)
    GREATER_EQUAL   reduce using rule 45 (expression -> array_access .)
    COMMA           reduce using rule 45 (expression -> array_access .)
    PRINT           reduce using rule 45 (expression -> array_access .)
    PUTS            reduce using rule 45 (expression -> array_access .)
    LOCAL_VAR       reduce using rule 45 (expression -> array_access .)
    DEF             reduce using rule 45 (expression -> array_access .)
    IF              reduce using rule 45 (expression -> array_access .)
    UNTIL           reduce using rule 45 (expression -> array_access .)
    UNLESS          reduce using rule 45 (expression -> array_access .)
    $end            reduce using rule 45 (expression -> array_access .)
    END             reduce using rule 45 (expression -> array_access .)
    ELSE            reduce using rule 45 (expression -> array_access .)
    R_PAREN         reduce using rule 45 (expression -> array_access .)
    R_ULTRA_PAREN   reduce using rule 45 (expression -> array_access .)


state 31

    (16) puts_statement -> PUTS L_PAREN . argument_list R_PAREN
    (17) puts_statement -> PUTS L_PAREN . R_PAREN
    (20) argument_list -> . expression
    (21) argument_list -> . argument_list COMMA expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    R_PAREN         shift and go to state 56
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    argument_list                  shift and go to state 55
    expression                     shift and go to state 25
    array_access                   shift and go to state 30

state 32

    (18) puts_statement -> PUTS argument_list .
    (21) argument_list -> argument_list . COMMA expression

    PRINT           reduce using rule 18 (puts_statement -> PUTS argument_list .)
    PUTS            reduce using rule 18 (puts_statement -> PUTS argument_list .)
    LOCAL_VAR       reduce using rule 18 (puts_statement -> PUTS argument_list .)
    DEF             reduce using rule 18 (puts_statement -> PUTS argument_list .)
    IF              reduce using rule 18 (puts_statement -> PUTS argument_list .)
    UNTIL           reduce using rule 18 (puts_statement -> PUTS argument_list .)
    UNLESS          reduce using rule 18 (puts_statement -> PUTS argument_list .)
    $end            reduce using rule 18 (puts_statement -> PUTS argument_list .)
    END             reduce using rule 18 (puts_statement -> PUTS argument_list .)
    ELSE            reduce using rule 18 (puts_statement -> PUTS argument_list .)
    COMMA           shift and go to state 41


state 33

    (22) input_statement -> LOCAL_VAR ASSIGN . GETS
    (23) input_statement -> LOCAL_VAR ASSIGN . GETS DOT CHOMP
    (11) assignment_statement -> LOCAL_VAR ASSIGN . expression
    (25) array_definition -> LOCAL_VAR ASSIGN . L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    GETS            shift and go to state 57
    L_ULTRA_PAREN   shift and go to state 59
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 58
    array_access                   shift and go to state 30

state 34

    (37) function_definition -> DEF LOCAL_VAR . L_PAREN parameter_list R_PAREN statement_list END

    L_PAREN         shift and go to state 60


state 35

    (31) if_statement -> IF condition . statement_list END
    (32) if_statement -> IF condition . statement_list ELSE statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement_list                 shift and go to state 61
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 36

    (36) condition -> expression . comparison_operator expression
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

    comparison_operator            shift and go to state 62

state 37

    (35) until_statement -> UNTIL condition . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement_list                 shift and go to state 63
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 38

    (33) unless_statement -> UNLESS condition . statement_list END
    (34) unless_statement -> UNLESS condition . statement_list ELSE statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement_list                 shift and go to state 64
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 39

    (12) print_statement -> PRINT L_PAREN argument_list . R_PAREN
    (21) argument_list -> argument_list . COMMA expression

    R_PAREN         shift and go to state 65
    COMMA           shift and go to state 41


state 40

    (13) print_statement -> PRINT L_PAREN R_PAREN .

    PRINT           reduce using rule 13 (print_statement -> PRINT L_PAREN R_PAREN .)
    PUTS            reduce using rule 13 (print_statement -> PRINT L_PAREN R_PAREN .)
    LOCAL_VAR       reduce using rule 13 (print_statement -> PRINT L_PAREN R_PAREN .)
    DEF             reduce using rule 13 (print_statement -> PRINT L_PAREN R_PAREN .)
    IF              reduce using rule 13 (print_statement -> PRINT L_PAREN R_PAREN .)
    UNTIL           reduce using rule 13 (print_statement -> PRINT L_PAREN R_PAREN .)
    UNLESS          reduce using rule 13 (print_statement -> PRINT L_PAREN R_PAREN .)
    $end            reduce using rule 13 (print_statement -> PRINT L_PAREN R_PAREN .)
    END             reduce using rule 13 (print_statement -> PRINT L_PAREN R_PAREN .)
    ELSE            reduce using rule 13 (print_statement -> PRINT L_PAREN R_PAREN .)


state 41

    (21) argument_list -> argument_list COMMA . expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 66
    array_access                   shift and go to state 30

state 42

    (46) expression -> expression PLUS . expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 67
    array_access                   shift and go to state 30

state 43

    (47) expression -> expression MINUS . expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 68
    array_access                   shift and go to state 30

state 44

    (48) expression -> expression MULTIPLY . expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 69
    array_access                   shift and go to state 30

state 45

    (49) expression -> expression DIVIDE . expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 70
    array_access                   shift and go to state 30

state 46

    (50) expression -> expression MODULE . expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 71
    array_access                   shift and go to state 30

state 47

    (51) expression -> expression comparison_operator . expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 72
    array_access                   shift and go to state 30

state 48

    (53) comparison_operator -> EQUALS .

    INTEGER         reduce using rule 53 (comparison_operator -> EQUALS .)
    FLOAT           reduce using rule 53 (comparison_operator -> EQUALS .)
    STRING          reduce using rule 53 (comparison_operator -> EQUALS .)
    LOCAL_VAR       reduce using rule 53 (comparison_operator -> EQUALS .)


state 49

    (54) comparison_operator -> DIFFERENT .

    INTEGER         reduce using rule 54 (comparison_operator -> DIFFERENT .)
    FLOAT           reduce using rule 54 (comparison_operator -> DIFFERENT .)
    STRING          reduce using rule 54 (comparison_operator -> DIFFERENT .)
    LOCAL_VAR       reduce using rule 54 (comparison_operator -> DIFFERENT .)


state 50

    (55) comparison_operator -> LESS .

    INTEGER         reduce using rule 55 (comparison_operator -> LESS .)
    FLOAT           reduce using rule 55 (comparison_operator -> LESS .)
    STRING          reduce using rule 55 (comparison_operator -> LESS .)
    LOCAL_VAR       reduce using rule 55 (comparison_operator -> LESS .)


state 51

    (56) comparison_operator -> LESS_EQUAL .

    INTEGER         reduce using rule 56 (comparison_operator -> LESS_EQUAL .)
    FLOAT           reduce using rule 56 (comparison_operator -> LESS_EQUAL .)
    STRING          reduce using rule 56 (comparison_operator -> LESS_EQUAL .)
    LOCAL_VAR       reduce using rule 56 (comparison_operator -> LESS_EQUAL .)


state 52

    (57) comparison_operator -> GREATER .

    INTEGER         reduce using rule 57 (comparison_operator -> GREATER .)
    FLOAT           reduce using rule 57 (comparison_operator -> GREATER .)
    STRING          reduce using rule 57 (comparison_operator -> GREATER .)
    LOCAL_VAR       reduce using rule 57 (comparison_operator -> GREATER .)


state 53

    (58) comparison_operator -> GREATER_EQUAL .

    INTEGER         reduce using rule 58 (comparison_operator -> GREATER_EQUAL .)
    FLOAT           reduce using rule 58 (comparison_operator -> GREATER_EQUAL .)
    STRING          reduce using rule 58 (comparison_operator -> GREATER_EQUAL .)
    LOCAL_VAR       reduce using rule 58 (comparison_operator -> GREATER_EQUAL .)


state 54

    (52) array_access -> LOCAL_VAR L_ULTRA_PAREN . expression R_ULTRA_PAREN
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 73
    array_access                   shift and go to state 30

state 55

    (16) puts_statement -> PUTS L_PAREN argument_list . R_PAREN
    (21) argument_list -> argument_list . COMMA expression

    R_PAREN         shift and go to state 74
    COMMA           shift and go to state 41


state 56

    (17) puts_statement -> PUTS L_PAREN R_PAREN .

    PRINT           reduce using rule 17 (puts_statement -> PUTS L_PAREN R_PAREN .)
    PUTS            reduce using rule 17 (puts_statement -> PUTS L_PAREN R_PAREN .)
    LOCAL_VAR       reduce using rule 17 (puts_statement -> PUTS L_PAREN R_PAREN .)
    DEF             reduce using rule 17 (puts_statement -> PUTS L_PAREN R_PAREN .)
    IF              reduce using rule 17 (puts_statement -> PUTS L_PAREN R_PAREN .)
    UNTIL           reduce using rule 17 (puts_statement -> PUTS L_PAREN R_PAREN .)
    UNLESS          reduce using rule 17 (puts_statement -> PUTS L_PAREN R_PAREN .)
    $end            reduce using rule 17 (puts_statement -> PUTS L_PAREN R_PAREN .)
    END             reduce using rule 17 (puts_statement -> PUTS L_PAREN R_PAREN .)
    ELSE            reduce using rule 17 (puts_statement -> PUTS L_PAREN R_PAREN .)


state 57

    (22) input_statement -> LOCAL_VAR ASSIGN GETS .
    (23) input_statement -> LOCAL_VAR ASSIGN GETS . DOT CHOMP

    PRINT           reduce using rule 22 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    PUTS            reduce using rule 22 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    LOCAL_VAR       reduce using rule 22 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    DEF             reduce using rule 22 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    IF              reduce using rule 22 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    UNTIL           reduce using rule 22 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    UNLESS          reduce using rule 22 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    $end            reduce using rule 22 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    END             reduce using rule 22 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    ELSE            reduce using rule 22 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    DOT             shift and go to state 75


state 58

    (11) assignment_statement -> LOCAL_VAR ASSIGN expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

    PRINT           reduce using rule 11 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    PUTS            reduce using rule 11 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    LOCAL_VAR       reduce using rule 11 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    DEF             reduce using rule 11 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    IF              reduce using rule 11 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    UNTIL           reduce using rule 11 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    UNLESS          reduce using rule 11 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    $end            reduce using rule 11 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    END             reduce using rule 11 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    ELSE            reduce using rule 11 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

    comparison_operator            shift and go to state 47

state 59

    (25) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN . element_list R_ULTRA_PAREN
    (26) element_list -> . expression
    (27) element_list -> . element_list COMMA expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    element_list                   shift and go to state 76
    expression                     shift and go to state 77
    array_access                   shift and go to state 30

state 60

    (37) function_definition -> DEF LOCAL_VAR L_PAREN . parameter_list R_PAREN statement_list END
    (38) parameter_list -> . LOCAL_VAR
    (39) parameter_list -> . parameter_list COMMA LOCAL_VAR
    (40) parameter_list -> . empty
    (59) empty -> .

    LOCAL_VAR       shift and go to state 78
    R_PAREN         reduce using rule 59 (empty -> .)
    COMMA           reduce using rule 59 (empty -> .)

    parameter_list                 shift and go to state 79
    empty                          shift and go to state 80

state 61

    (31) if_statement -> IF condition statement_list . END
    (32) if_statement -> IF condition statement_list . ELSE statement_list END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    END             shift and go to state 81
    ELSE            shift and go to state 82
    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement                      shift and go to state 22
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 62

    (36) condition -> expression comparison_operator . expression
    (51) expression -> expression comparison_operator . expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 83
    array_access                   shift and go to state 30

state 63

    (35) until_statement -> UNTIL condition statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    END             shift and go to state 84
    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement                      shift and go to state 22
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 64

    (33) unless_statement -> UNLESS condition statement_list . END
    (34) unless_statement -> UNLESS condition statement_list . ELSE statement_list END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    END             shift and go to state 85
    ELSE            shift and go to state 86
    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement                      shift and go to state 22
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 65

    (12) print_statement -> PRINT L_PAREN argument_list R_PAREN .

    PRINT           reduce using rule 12 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    PUTS            reduce using rule 12 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    LOCAL_VAR       reduce using rule 12 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    DEF             reduce using rule 12 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    IF              reduce using rule 12 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    UNTIL           reduce using rule 12 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    UNLESS          reduce using rule 12 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    $end            reduce using rule 12 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    END             reduce using rule 12 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    ELSE            reduce using rule 12 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)


state 66

    (21) argument_list -> argument_list COMMA expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

    COMMA           reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    PRINT           reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    PUTS            reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    LOCAL_VAR       reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    DEF             reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    IF              reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    UNTIL           reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    UNLESS          reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    $end            reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    END             reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    ELSE            reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    R_PAREN         reduce using rule 21 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

    comparison_operator            shift and go to state 47

state 67

    (46) expression -> expression PLUS expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
    COMMA           reduce using rule 46 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 46 (expression -> expression PLUS expression .)
    PUTS            reduce using rule 46 (expression -> expression PLUS expression .)
    LOCAL_VAR       reduce using rule 46 (expression -> expression PLUS expression .)
    DEF             reduce using rule 46 (expression -> expression PLUS expression .)
    IF              reduce using rule 46 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 46 (expression -> expression PLUS expression .)
    UNLESS          reduce using rule 46 (expression -> expression PLUS expression .)
    $end            reduce using rule 46 (expression -> expression PLUS expression .)
    END             reduce using rule 46 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 46 (expression -> expression PLUS expression .)
    R_PAREN         reduce using rule 46 (expression -> expression PLUS expression .)
    R_ULTRA_PAREN   reduce using rule 46 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

  ! PLUS            [ reduce using rule 46 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 46 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression PLUS expression .) ]
  ! MODULE          [ reduce using rule 46 (expression -> expression PLUS expression .) ]
  ! EQUALS          [ reduce using rule 46 (expression -> expression PLUS expression .) ]
  ! DIFFERENT       [ reduce using rule 46 (expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 46 (expression -> expression PLUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 46 (expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 46 (expression -> expression PLUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 46 (expression -> expression PLUS expression .) ]

    comparison_operator            shift and go to state 47

state 68

    (47) expression -> expression MINUS expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
    COMMA           reduce using rule 47 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 47 (expression -> expression MINUS expression .)
    PUTS            reduce using rule 47 (expression -> expression MINUS expression .)
    LOCAL_VAR       reduce using rule 47 (expression -> expression MINUS expression .)
    DEF             reduce using rule 47 (expression -> expression MINUS expression .)
    IF              reduce using rule 47 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 47 (expression -> expression MINUS expression .)
    UNLESS          reduce using rule 47 (expression -> expression MINUS expression .)
    $end            reduce using rule 47 (expression -> expression MINUS expression .)
    END             reduce using rule 47 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 47 (expression -> expression MINUS expression .)
    R_PAREN         reduce using rule 47 (expression -> expression MINUS expression .)
    R_ULTRA_PAREN   reduce using rule 47 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

  ! PLUS            [ reduce using rule 47 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 47 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression MINUS expression .) ]
  ! MODULE          [ reduce using rule 47 (expression -> expression MINUS expression .) ]
  ! EQUALS          [ reduce using rule 47 (expression -> expression MINUS expression .) ]
  ! DIFFERENT       [ reduce using rule 47 (expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 47 (expression -> expression MINUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 47 (expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 47 (expression -> expression MINUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 47 (expression -> expression MINUS expression .) ]

    comparison_operator            shift and go to state 47

state 69

    (48) expression -> expression MULTIPLY expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
    COMMA           reduce using rule 48 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 48 (expression -> expression MULTIPLY expression .)
    PUTS            reduce using rule 48 (expression -> expression MULTIPLY expression .)
    LOCAL_VAR       reduce using rule 48 (expression -> expression MULTIPLY expression .)
    DEF             reduce using rule 48 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 48 (expression -> expression MULTIPLY expression .)
    UNTIL           reduce using rule 48 (expression -> expression MULTIPLY expression .)
    UNLESS          reduce using rule 48 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 48 (expression -> expression MULTIPLY expression .)
    END             reduce using rule 48 (expression -> expression MULTIPLY expression .)
    ELSE            reduce using rule 48 (expression -> expression MULTIPLY expression .)
    R_PAREN         reduce using rule 48 (expression -> expression MULTIPLY expression .)
    R_ULTRA_PAREN   reduce using rule 48 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

  ! PLUS            [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! MODULE          [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! EQUALS          [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! DIFFERENT       [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! LESS            [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! LESS_EQUAL      [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! GREATER         [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]

    comparison_operator            shift and go to state 47

state 70

    (49) expression -> expression DIVIDE expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
    COMMA           reduce using rule 49 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 49 (expression -> expression DIVIDE expression .)
    PUTS            reduce using rule 49 (expression -> expression DIVIDE expression .)
    LOCAL_VAR       reduce using rule 49 (expression -> expression DIVIDE expression .)
    DEF             reduce using rule 49 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 49 (expression -> expression DIVIDE expression .)
    UNTIL           reduce using rule 49 (expression -> expression DIVIDE expression .)
    UNLESS          reduce using rule 49 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 49 (expression -> expression DIVIDE expression .)
    END             reduce using rule 49 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 49 (expression -> expression DIVIDE expression .)
    R_PAREN         reduce using rule 49 (expression -> expression DIVIDE expression .)
    R_ULTRA_PAREN   reduce using rule 49 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

  ! PLUS            [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! MODULE          [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! EQUALS          [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! DIFFERENT       [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! LESS            [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! GREATER         [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]

    comparison_operator            shift and go to state 47

state 71

    (50) expression -> expression MODULE expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
    COMMA           reduce using rule 50 (expression -> expression MODULE expression .)
    PRINT           reduce using rule 50 (expression -> expression MODULE expression .)
    PUTS            reduce using rule 50 (expression -> expression MODULE expression .)
    LOCAL_VAR       reduce using rule 50 (expression -> expression MODULE expression .)
    DEF             reduce using rule 50 (expression -> expression MODULE expression .)
    IF              reduce using rule 50 (expression -> expression MODULE expression .)
    UNTIL           reduce using rule 50 (expression -> expression MODULE expression .)
    UNLESS          reduce using rule 50 (expression -> expression MODULE expression .)
    $end            reduce using rule 50 (expression -> expression MODULE expression .)
    END             reduce using rule 50 (expression -> expression MODULE expression .)
    ELSE            reduce using rule 50 (expression -> expression MODULE expression .)
    R_PAREN         reduce using rule 50 (expression -> expression MODULE expression .)
    R_ULTRA_PAREN   reduce using rule 50 (expression -> expression MODULE expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

  ! PLUS            [ reduce using rule 50 (expression -> expression MODULE expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression MODULE expression .) ]
  ! MULTIPLY        [ reduce using rule 50 (expression -> expression MODULE expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression MODULE expression .) ]
  ! MODULE          [ reduce using rule 50 (expression -> expression MODULE expression .) ]
  ! EQUALS          [ reduce using rule 50 (expression -> expression MODULE expression .) ]
  ! DIFFERENT       [ reduce using rule 50 (expression -> expression MODULE expression .) ]
  ! LESS            [ reduce using rule 50 (expression -> expression MODULE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 50 (expression -> expression MODULE expression .) ]
  ! GREATER         [ reduce using rule 50 (expression -> expression MODULE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 50 (expression -> expression MODULE expression .) ]

    comparison_operator            shift and go to state 47

state 72

    (51) expression -> expression comparison_operator expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
    COMMA           reduce using rule 51 (expression -> expression comparison_operator expression .)
    PRINT           reduce using rule 51 (expression -> expression comparison_operator expression .)
    PUTS            reduce using rule 51 (expression -> expression comparison_operator expression .)
    LOCAL_VAR       reduce using rule 51 (expression -> expression comparison_operator expression .)
    DEF             reduce using rule 51 (expression -> expression comparison_operator expression .)
    IF              reduce using rule 51 (expression -> expression comparison_operator expression .)
    UNTIL           reduce using rule 51 (expression -> expression comparison_operator expression .)
    UNLESS          reduce using rule 51 (expression -> expression comparison_operator expression .)
    $end            reduce using rule 51 (expression -> expression comparison_operator expression .)
    END             reduce using rule 51 (expression -> expression comparison_operator expression .)
    ELSE            reduce using rule 51 (expression -> expression comparison_operator expression .)
    R_PAREN         reduce using rule 51 (expression -> expression comparison_operator expression .)
    R_ULTRA_PAREN   reduce using rule 51 (expression -> expression comparison_operator expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

  ! PLUS            [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! MULTIPLY        [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! MODULE          [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! EQUALS          [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! DIFFERENT       [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! LESS            [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! GREATER         [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]

    comparison_operator            shift and go to state 47

state 73

    (52) array_access -> LOCAL_VAR L_ULTRA_PAREN expression . R_ULTRA_PAREN
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

    R_ULTRA_PAREN   shift and go to state 87
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

    comparison_operator            shift and go to state 47

state 74

    (16) puts_statement -> PUTS L_PAREN argument_list R_PAREN .

    PRINT           reduce using rule 16 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    PUTS            reduce using rule 16 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    LOCAL_VAR       reduce using rule 16 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    DEF             reduce using rule 16 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    IF              reduce using rule 16 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    UNTIL           reduce using rule 16 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    UNLESS          reduce using rule 16 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    $end            reduce using rule 16 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    END             reduce using rule 16 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    ELSE            reduce using rule 16 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)


state 75

    (23) input_statement -> LOCAL_VAR ASSIGN GETS DOT . CHOMP

    CHOMP           shift and go to state 88


state 76

    (25) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list . R_ULTRA_PAREN
    (27) element_list -> element_list . COMMA expression

    R_ULTRA_PAREN   shift and go to state 89
    COMMA           shift and go to state 90


state 77

    (26) element_list -> expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

    R_ULTRA_PAREN   reduce using rule 26 (element_list -> expression .)
    COMMA           reduce using rule 26 (element_list -> expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

    comparison_operator            shift and go to state 47

state 78

    (38) parameter_list -> LOCAL_VAR .

    R_PAREN         reduce using rule 38 (parameter_list -> LOCAL_VAR .)
    COMMA           reduce using rule 38 (parameter_list -> LOCAL_VAR .)


state 79

    (37) function_definition -> DEF LOCAL_VAR L_PAREN parameter_list . R_PAREN statement_list END
    (39) parameter_list -> parameter_list . COMMA LOCAL_VAR

    R_PAREN         shift and go to state 91
    COMMA           shift and go to state 92


state 80

    (40) parameter_list -> empty .

    R_PAREN         reduce using rule 40 (parameter_list -> empty .)
    COMMA           reduce using rule 40 (parameter_list -> empty .)


state 81

    (31) if_statement -> IF condition statement_list END .

    PRINT           reduce using rule 31 (if_statement -> IF condition statement_list END .)
    PUTS            reduce using rule 31 (if_statement -> IF condition statement_list END .)
    LOCAL_VAR       reduce using rule 31 (if_statement -> IF condition statement_list END .)
    DEF             reduce using rule 31 (if_statement -> IF condition statement_list END .)
    IF              reduce using rule 31 (if_statement -> IF condition statement_list END .)
    UNTIL           reduce using rule 31 (if_statement -> IF condition statement_list END .)
    UNLESS          reduce using rule 31 (if_statement -> IF condition statement_list END .)
    $end            reduce using rule 31 (if_statement -> IF condition statement_list END .)
    END             reduce using rule 31 (if_statement -> IF condition statement_list END .)
    ELSE            reduce using rule 31 (if_statement -> IF condition statement_list END .)


state 82

    (32) if_statement -> IF condition statement_list ELSE . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement_list                 shift and go to state 93
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 83

    (36) condition -> expression comparison_operator expression .
    (51) expression -> expression comparison_operator expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
    PRINT           reduce using rule 36 (condition -> expression comparison_operator expression .)
    PUTS            reduce using rule 36 (condition -> expression comparison_operator expression .)
    LOCAL_VAR       reduce using rule 36 (condition -> expression comparison_operator expression .)
    DEF             reduce using rule 36 (condition -> expression comparison_operator expression .)
    IF              reduce using rule 36 (condition -> expression comparison_operator expression .)
    UNTIL           reduce using rule 36 (condition -> expression comparison_operator expression .)
    UNLESS          reduce using rule 36 (condition -> expression comparison_operator expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

  ! PLUS            [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! MULTIPLY        [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! MODULE          [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! EQUALS          [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! DIFFERENT       [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! LESS            [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! GREATER         [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 51 (expression -> expression comparison_operator expression .) ]

    comparison_operator            shift and go to state 47

state 84

    (35) until_statement -> UNTIL condition statement_list END .

    PRINT           reduce using rule 35 (until_statement -> UNTIL condition statement_list END .)
    PUTS            reduce using rule 35 (until_statement -> UNTIL condition statement_list END .)
    LOCAL_VAR       reduce using rule 35 (until_statement -> UNTIL condition statement_list END .)
    DEF             reduce using rule 35 (until_statement -> UNTIL condition statement_list END .)
    IF              reduce using rule 35 (until_statement -> UNTIL condition statement_list END .)
    UNTIL           reduce using rule 35 (until_statement -> UNTIL condition statement_list END .)
    UNLESS          reduce using rule 35 (until_statement -> UNTIL condition statement_list END .)
    $end            reduce using rule 35 (until_statement -> UNTIL condition statement_list END .)
    END             reduce using rule 35 (until_statement -> UNTIL condition statement_list END .)
    ELSE            reduce using rule 35 (until_statement -> UNTIL condition statement_list END .)


state 85

    (33) unless_statement -> UNLESS condition statement_list END .

    PRINT           reduce using rule 33 (unless_statement -> UNLESS condition statement_list END .)
    PUTS            reduce using rule 33 (unless_statement -> UNLESS condition statement_list END .)
    LOCAL_VAR       reduce using rule 33 (unless_statement -> UNLESS condition statement_list END .)
    DEF             reduce using rule 33 (unless_statement -> UNLESS condition statement_list END .)
    IF              reduce using rule 33 (unless_statement -> UNLESS condition statement_list END .)
    UNTIL           reduce using rule 33 (unless_statement -> UNLESS condition statement_list END .)
    UNLESS          reduce using rule 33 (unless_statement -> UNLESS condition statement_list END .)
    $end            reduce using rule 33 (unless_statement -> UNLESS condition statement_list END .)
    END             reduce using rule 33 (unless_statement -> UNLESS condition statement_list END .)
    ELSE            reduce using rule 33 (unless_statement -> UNLESS condition statement_list END .)


state 86

    (34) unless_statement -> UNLESS condition statement_list ELSE . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement_list                 shift and go to state 94
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 87

    (52) array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .

    PLUS            reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MINUS           reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MULTIPLY        reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIVIDE          reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MODULE          reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    EQUALS          reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIFFERENT       reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS            reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS_EQUAL      reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER         reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER_EQUAL   reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    COMMA           reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PRINT           reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PUTS            reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DEF             reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    IF              reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNTIL           reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNLESS          reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    $end            reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    END             reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSE            reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_PAREN         reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_ULTRA_PAREN   reduce using rule 52 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)


state 88

    (23) input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .

    PRINT           reduce using rule 23 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    PUTS            reduce using rule 23 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    LOCAL_VAR       reduce using rule 23 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    DEF             reduce using rule 23 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    IF              reduce using rule 23 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    UNTIL           reduce using rule 23 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    UNLESS          reduce using rule 23 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    $end            reduce using rule 23 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    END             reduce using rule 23 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    ELSE            reduce using rule 23 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)


state 89

    (25) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .

    PRINT           reduce using rule 25 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    PUTS            reduce using rule 25 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 25 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    DEF             reduce using rule 25 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    IF              reduce using rule 25 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNTIL           reduce using rule 25 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNLESS          reduce using rule 25 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    $end            reduce using rule 25 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    END             reduce using rule 25 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    ELSE            reduce using rule 25 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)


state 90

    (27) element_list -> element_list COMMA . expression
    (41) expression -> . INTEGER
    (42) expression -> . FLOAT
    (43) expression -> . STRING
    (44) expression -> . LOCAL_VAR
    (45) expression -> . array_access
    (46) expression -> . expression PLUS expression
    (47) expression -> . expression MINUS expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression MODULE expression
    (51) expression -> . expression comparison_operator expression
    (52) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN

    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    LOCAL_VAR       shift and go to state 29

    expression                     shift and go to state 95
    array_access                   shift and go to state 30

state 91

    (37) function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement_list                 shift and go to state 96
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 92

    (39) parameter_list -> parameter_list COMMA . LOCAL_VAR

    LOCAL_VAR       shift and go to state 97


state 93

    (32) if_statement -> IF condition statement_list ELSE statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    END             shift and go to state 98
    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement                      shift and go to state 22
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 94

    (34) unless_statement -> UNLESS condition statement_list ELSE statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    END             shift and go to state 99
    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement                      shift and go to state 22
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 95

    (27) element_list -> element_list COMMA expression .
    (46) expression -> expression . PLUS expression
    (47) expression -> expression . MINUS expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . MODULE expression
    (51) expression -> expression . comparison_operator expression
    (53) comparison_operator -> . EQUALS
    (54) comparison_operator -> . DIFFERENT
    (55) comparison_operator -> . LESS
    (56) comparison_operator -> . LESS_EQUAL
    (57) comparison_operator -> . GREATER
    (58) comparison_operator -> . GREATER_EQUAL

    R_ULTRA_PAREN   reduce using rule 27 (element_list -> element_list COMMA expression .)
    COMMA           reduce using rule 27 (element_list -> element_list COMMA expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    MODULE          shift and go to state 46
    EQUALS          shift and go to state 48
    DIFFERENT       shift and go to state 49
    LESS            shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    GREATER         shift and go to state 52
    GREATER_EQUAL   shift and go to state 53

    comparison_operator            shift and go to state 47

state 96

    (37) function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (12) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (13) print_statement -> . PRINT L_PAREN R_PAREN
    (14) print_statement -> . PRINT argument_list
    (15) print_statement -> . PRINT
    (16) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (17) puts_statement -> . PUTS L_PAREN R_PAREN
    (18) puts_statement -> . PUTS argument_list
    (19) puts_statement -> . PUTS
    (22) input_statement -> . LOCAL_VAR ASSIGN GETS
    (23) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (11) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (24) data_structure -> . array_definition
    (28) control_structure -> . if_statement
    (29) control_structure -> . until_statement
    (30) control_structure -> . unless_statement
    (37) function_definition -> . DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END
    (25) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (31) if_statement -> . IF condition statement_list END
    (32) if_statement -> . IF condition statement_list ELSE statement_list END
    (35) until_statement -> . UNTIL condition statement_list END
    (33) unless_statement -> . UNLESS condition statement_list END
    (34) unless_statement -> . UNLESS condition statement_list ELSE statement_list END

    END             shift and go to state 100
    PRINT           shift and go to state 11
    PUTS            shift and go to state 12
    LOCAL_VAR       shift and go to state 13
    DEF             shift and go to state 18
    IF              shift and go to state 19
    UNTIL           shift and go to state 20
    UNLESS          shift and go to state 21

    statement                      shift and go to state 22
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    array_definition               shift and go to state 14
    if_statement                   shift and go to state 15
    until_statement                shift and go to state 16
    unless_statement               shift and go to state 17

state 97

    (39) parameter_list -> parameter_list COMMA LOCAL_VAR .

    R_PAREN         reduce using rule 39 (parameter_list -> parameter_list COMMA LOCAL_VAR .)
    COMMA           reduce using rule 39 (parameter_list -> parameter_list COMMA LOCAL_VAR .)


state 98

    (32) if_statement -> IF condition statement_list ELSE statement_list END .

    PRINT           reduce using rule 32 (if_statement -> IF condition statement_list ELSE statement_list END .)
    PUTS            reduce using rule 32 (if_statement -> IF condition statement_list ELSE statement_list END .)
    LOCAL_VAR       reduce using rule 32 (if_statement -> IF condition statement_list ELSE statement_list END .)
    DEF             reduce using rule 32 (if_statement -> IF condition statement_list ELSE statement_list END .)
    IF              reduce using rule 32 (if_statement -> IF condition statement_list ELSE statement_list END .)
    UNTIL           reduce using rule 32 (if_statement -> IF condition statement_list ELSE statement_list END .)
    UNLESS          reduce using rule 32 (if_statement -> IF condition statement_list ELSE statement_list END .)
    $end            reduce using rule 32 (if_statement -> IF condition statement_list ELSE statement_list END .)
    END             reduce using rule 32 (if_statement -> IF condition statement_list ELSE statement_list END .)
    ELSE            reduce using rule 32 (if_statement -> IF condition statement_list ELSE statement_list END .)


state 99

    (34) unless_statement -> UNLESS condition statement_list ELSE statement_list END .

    PRINT           reduce using rule 34 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    PUTS            reduce using rule 34 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    LOCAL_VAR       reduce using rule 34 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    DEF             reduce using rule 34 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    IF              reduce using rule 34 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    UNTIL           reduce using rule 34 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    UNLESS          reduce using rule 34 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    $end            reduce using rule 34 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    END             reduce using rule 34 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    ELSE            reduce using rule 34 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)


state 100

    (37) function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .

    PRINT           reduce using rule 37 (function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .)
    PUTS            reduce using rule 37 (function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .)
    LOCAL_VAR       reduce using rule 37 (function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .)
    DEF             reduce using rule 37 (function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .)
    IF              reduce using rule 37 (function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .)
    UNTIL           reduce using rule 37 (function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .)
    UNLESS          reduce using rule 37 (function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .)
    $end            reduce using rule 37 (function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .)
    END             reduce using rule 37 (function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .)
    ELSE            reduce using rule 37 (function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LOCAL_VAR in state 11 resolved as shift
WARNING: shift/reduce conflict for LOCAL_VAR in state 12 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 67 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 67 resolved as shift
WARNING: shift/reduce conflict for LESS in state 67 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 68 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 69 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 70 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 71 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 71 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 72 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 83 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 83 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 83 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 83 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 83 resolved as shift
WARNING: shift/reduce conflict for LESS in state 83 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 83 resolved as shift
