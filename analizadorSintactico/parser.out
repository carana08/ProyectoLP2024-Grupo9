Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BEGIN
    CLASS
    CLASS_VAR
    CONSTANT
    ELSIF
    GLOBAL_VAR
    INSTANCE_VAR
    NIL
    THEN
    TWO_POINTS
    WHEN

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> print_statement
Rule 5     statement -> puts_statement
Rule 6     statement -> input_statement
Rule 7     statement -> assignment_statement
Rule 8     statement -> data_structure
Rule 9     statement -> control_structure
Rule 10    statement -> function_definition
Rule 11    statement -> return_statement
Rule 12    return_statement -> RETURN expression
Rule 13    assignment_statement -> LOCAL_VAR ASSIGN expression
Rule 14    print_statement -> PRINT L_PAREN argument_list R_PAREN
Rule 15    print_statement -> PRINT L_PAREN R_PAREN
Rule 16    print_statement -> PRINT argument_list
Rule 17    print_statement -> PRINT
Rule 18    puts_statement -> PUTS L_PAREN argument_list R_PAREN
Rule 19    puts_statement -> PUTS L_PAREN R_PAREN
Rule 20    puts_statement -> PUTS argument_list
Rule 21    puts_statement -> PUTS
Rule 22    argument_list -> expression
Rule 23    argument_list -> argument_list COMMA expression
Rule 24    input_statement -> LOCAL_VAR ASSIGN GETS
Rule 25    input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP
Rule 26    data_structure -> array_definition
Rule 27    data_structure -> hash_definition
Rule 28    hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
Rule 29    hash_element_list -> hash_element
Rule 30    hash_element_list -> hash_element_list COMMA hash_element
Rule 31    hash_element -> STRING HASHARROW expression
Rule 32    logical_operator -> AND
Rule 33    logical_operator -> OR
Rule 34    array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
Rule 35    element_list -> expression
Rule 36    element_list -> element_list COMMA expression
Rule 37    control_structure -> if_statement
Rule 38    control_structure -> until_statement
Rule 39    control_structure -> unless_statement
Rule 40    control_structure -> while_statement
Rule 41    if_statement -> IF condition statement_list END
Rule 42    if_statement -> IF condition statement_list ELSE statement_list END
Rule 43    while_statement -> WHILE condition statement_list END
Rule 44    unless_statement -> UNLESS condition statement_list END
Rule 45    unless_statement -> UNLESS condition statement_list ELSE statement_list END
Rule 46    until_statement -> UNTIL condition statement_list END
Rule 47    condition -> expression comparison_operator expression
Rule 48    condition -> condition logical_operator condition
Rule 49    condition -> NOT condition
Rule 50    condition -> L_PAREN condition R_PAREN
Rule 51    function_definition -> DEF LOCAL_VAR parameter_list statement_list END
Rule 52    function_definition -> DEF LOCAL_VAR statement_list END
Rule 53    parameter_list -> L_PAREN parameter_list_inner R_PAREN
Rule 54    parameter_list -> empty
Rule 55    parameter_list_inner -> LOCAL_VAR
Rule 56    parameter_list_inner -> parameter_list_inner COMMA LOCAL_VAR
Rule 57    expression -> expression_binop
Rule 58    expression -> expression_not
Rule 59    expression -> expression_group
Rule 60    expression -> expression_term
Rule 61    expression_binop -> expression PLUS expression
Rule 62    expression_binop -> expression MINUS expression
Rule 63    expression_binop -> expression MULTIPLY expression
Rule 64    expression_binop -> expression DIVIDE expression
Rule 65    expression_binop -> expression MODULE expression
Rule 66    expression_binop -> expression EQUALS expression
Rule 67    expression_binop -> expression DIFFERENT expression
Rule 68    expression_binop -> expression GREATER expression
Rule 69    expression_binop -> expression LESS expression
Rule 70    expression_binop -> expression GREATER_EQUAL expression
Rule 71    expression_binop -> expression LESS_EQUAL expression
Rule 72    expression_binop -> expression AND expression
Rule 73    expression_binop -> expression OR expression
Rule 74    expression_not -> NOT expression
Rule 75    expression_group -> L_PAREN expression R_PAREN
Rule 76    expression_term -> INTEGER
Rule 77    expression_term -> FLOAT
Rule 78    expression_term -> STRING
Rule 79    expression_term -> LOCAL_VAR
Rule 80    expression_term -> array_access
Rule 81    expression_term -> function_call
Rule 82    function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN
Rule 83    function_call -> LOCAL_VAR L_PAREN R_PAREN
Rule 84    function_call -> LOCAL_VAR argument_list
Rule 85    function_call -> LOCAL_VAR
Rule 86    array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
Rule 87    comparison_operator -> EQUALS
Rule 88    comparison_operator -> DIFFERENT
Rule 89    comparison_operator -> LESS
Rule 90    comparison_operator -> LESS_EQUAL
Rule 91    comparison_operator -> GREATER
Rule 92    comparison_operator -> GREATER_EQUAL
Rule 93    empty -> <empty>

Terminals, with rules where they appear

AND                  : 32 72
ASSIGN               : 13 24 25 28 34
BEGIN                : 
CHOMP                : 25
CLASS                : 
CLASS_VAR            : 
COMMA                : 23 30 36 56
CONSTANT             : 
DEF                  : 51 52
DIFFERENT            : 67 88
DIVIDE               : 64
DOT                  : 25
ELSE                 : 42 45
ELSIF                : 
END                  : 41 42 43 44 45 46 51 52
EQUALS               : 66 87
FLOAT                : 77
GETS                 : 24 25
GLOBAL_VAR           : 
GREATER              : 68 91
GREATER_EQUAL        : 70 92
HASHARROW            : 31
IF                   : 41 42
INSTANCE_VAR         : 
INTEGER              : 76
LESS                 : 69 89
LESS_EQUAL           : 71 90
LOCAL_VAR            : 13 24 25 28 34 51 52 55 56 79 82 83 84 85 86
L_MAYUS_PAREN        : 28
L_PAREN              : 14 15 18 19 50 53 75 82 83
L_ULTRA_PAREN        : 34 86
MINUS                : 62
MODULE               : 65
MULTIPLY             : 63
NIL                  : 
NOT                  : 49 74
OR                   : 33 73
PLUS                 : 61
PRINT                : 14 15 16 17
PUTS                 : 18 19 20 21
RETURN               : 12
R_MAYUS_PAREN        : 28
R_PAREN              : 14 15 18 19 50 53 75 82 83
R_ULTRA_PAREN        : 34 86
STRING               : 31 78
THEN                 : 
TWO_POINTS           : 
UNLESS               : 44 45
UNTIL                : 46
WHEN                 : 
WHILE                : 43
error                : 

Nonterminals, with rules where they appear

argument_list        : 14 16 18 20 23 82 84
array_access         : 80
array_definition     : 26
assignment_statement : 7
comparison_operator  : 47
condition            : 41 42 43 44 45 46 48 48 49 50
control_structure    : 9
data_structure       : 8
element_list         : 34 36
empty                : 54
expression           : 12 13 22 23 31 35 36 47 47 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 75 86
expression_binop     : 57
expression_group     : 59
expression_not       : 58
expression_term      : 60
function_call        : 81
function_definition  : 10
hash_definition      : 27
hash_element         : 29 30
hash_element_list    : 28 30
if_statement         : 37
input_statement      : 6
logical_operator     : 48
parameter_list       : 51
parameter_list_inner : 53 56
print_statement      : 4
program              : 0
puts_statement       : 5
return_statement     : 11
statement            : 2 3
statement_list       : 1 3 41 42 42 43 44 45 45 46 51 52
unless_statement     : 39
until_statement      : 38
while_statement      : 40

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    $end            reduce using rule 1 (program -> statement_list .)
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 27
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 3

    (2) statement_list -> statement .

    PRINT           reduce using rule 2 (statement_list -> statement .)
    PUTS            reduce using rule 2 (statement_list -> statement .)
    LOCAL_VAR       reduce using rule 2 (statement_list -> statement .)
    DEF             reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    UNTIL           reduce using rule 2 (statement_list -> statement .)
    UNLESS          reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    END             reduce using rule 2 (statement_list -> statement .)
    ELSE            reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> print_statement .

    PRINT           reduce using rule 4 (statement -> print_statement .)
    PUTS            reduce using rule 4 (statement -> print_statement .)
    LOCAL_VAR       reduce using rule 4 (statement -> print_statement .)
    DEF             reduce using rule 4 (statement -> print_statement .)
    RETURN          reduce using rule 4 (statement -> print_statement .)
    IF              reduce using rule 4 (statement -> print_statement .)
    UNTIL           reduce using rule 4 (statement -> print_statement .)
    UNLESS          reduce using rule 4 (statement -> print_statement .)
    WHILE           reduce using rule 4 (statement -> print_statement .)
    $end            reduce using rule 4 (statement -> print_statement .)
    END             reduce using rule 4 (statement -> print_statement .)
    ELSE            reduce using rule 4 (statement -> print_statement .)


state 5

    (5) statement -> puts_statement .

    PRINT           reduce using rule 5 (statement -> puts_statement .)
    PUTS            reduce using rule 5 (statement -> puts_statement .)
    LOCAL_VAR       reduce using rule 5 (statement -> puts_statement .)
    DEF             reduce using rule 5 (statement -> puts_statement .)
    RETURN          reduce using rule 5 (statement -> puts_statement .)
    IF              reduce using rule 5 (statement -> puts_statement .)
    UNTIL           reduce using rule 5 (statement -> puts_statement .)
    UNLESS          reduce using rule 5 (statement -> puts_statement .)
    WHILE           reduce using rule 5 (statement -> puts_statement .)
    $end            reduce using rule 5 (statement -> puts_statement .)
    END             reduce using rule 5 (statement -> puts_statement .)
    ELSE            reduce using rule 5 (statement -> puts_statement .)


state 6

    (6) statement -> input_statement .

    PRINT           reduce using rule 6 (statement -> input_statement .)
    PUTS            reduce using rule 6 (statement -> input_statement .)
    LOCAL_VAR       reduce using rule 6 (statement -> input_statement .)
    DEF             reduce using rule 6 (statement -> input_statement .)
    RETURN          reduce using rule 6 (statement -> input_statement .)
    IF              reduce using rule 6 (statement -> input_statement .)
    UNTIL           reduce using rule 6 (statement -> input_statement .)
    UNLESS          reduce using rule 6 (statement -> input_statement .)
    WHILE           reduce using rule 6 (statement -> input_statement .)
    $end            reduce using rule 6 (statement -> input_statement .)
    END             reduce using rule 6 (statement -> input_statement .)
    ELSE            reduce using rule 6 (statement -> input_statement .)


state 7

    (7) statement -> assignment_statement .

    PRINT           reduce using rule 7 (statement -> assignment_statement .)
    PUTS            reduce using rule 7 (statement -> assignment_statement .)
    LOCAL_VAR       reduce using rule 7 (statement -> assignment_statement .)
    DEF             reduce using rule 7 (statement -> assignment_statement .)
    RETURN          reduce using rule 7 (statement -> assignment_statement .)
    IF              reduce using rule 7 (statement -> assignment_statement .)
    UNTIL           reduce using rule 7 (statement -> assignment_statement .)
    UNLESS          reduce using rule 7 (statement -> assignment_statement .)
    WHILE           reduce using rule 7 (statement -> assignment_statement .)
    $end            reduce using rule 7 (statement -> assignment_statement .)
    END             reduce using rule 7 (statement -> assignment_statement .)
    ELSE            reduce using rule 7 (statement -> assignment_statement .)


state 8

    (8) statement -> data_structure .

    PRINT           reduce using rule 8 (statement -> data_structure .)
    PUTS            reduce using rule 8 (statement -> data_structure .)
    LOCAL_VAR       reduce using rule 8 (statement -> data_structure .)
    DEF             reduce using rule 8 (statement -> data_structure .)
    RETURN          reduce using rule 8 (statement -> data_structure .)
    IF              reduce using rule 8 (statement -> data_structure .)
    UNTIL           reduce using rule 8 (statement -> data_structure .)
    UNLESS          reduce using rule 8 (statement -> data_structure .)
    WHILE           reduce using rule 8 (statement -> data_structure .)
    $end            reduce using rule 8 (statement -> data_structure .)
    END             reduce using rule 8 (statement -> data_structure .)
    ELSE            reduce using rule 8 (statement -> data_structure .)


state 9

    (9) statement -> control_structure .

    PRINT           reduce using rule 9 (statement -> control_structure .)
    PUTS            reduce using rule 9 (statement -> control_structure .)
    LOCAL_VAR       reduce using rule 9 (statement -> control_structure .)
    DEF             reduce using rule 9 (statement -> control_structure .)
    RETURN          reduce using rule 9 (statement -> control_structure .)
    IF              reduce using rule 9 (statement -> control_structure .)
    UNTIL           reduce using rule 9 (statement -> control_structure .)
    UNLESS          reduce using rule 9 (statement -> control_structure .)
    WHILE           reduce using rule 9 (statement -> control_structure .)
    $end            reduce using rule 9 (statement -> control_structure .)
    END             reduce using rule 9 (statement -> control_structure .)
    ELSE            reduce using rule 9 (statement -> control_structure .)


state 10

    (10) statement -> function_definition .

    PRINT           reduce using rule 10 (statement -> function_definition .)
    PUTS            reduce using rule 10 (statement -> function_definition .)
    LOCAL_VAR       reduce using rule 10 (statement -> function_definition .)
    DEF             reduce using rule 10 (statement -> function_definition .)
    RETURN          reduce using rule 10 (statement -> function_definition .)
    IF              reduce using rule 10 (statement -> function_definition .)
    UNTIL           reduce using rule 10 (statement -> function_definition .)
    UNLESS          reduce using rule 10 (statement -> function_definition .)
    WHILE           reduce using rule 10 (statement -> function_definition .)
    $end            reduce using rule 10 (statement -> function_definition .)
    END             reduce using rule 10 (statement -> function_definition .)
    ELSE            reduce using rule 10 (statement -> function_definition .)


state 11

    (11) statement -> return_statement .

    PRINT           reduce using rule 11 (statement -> return_statement .)
    PUTS            reduce using rule 11 (statement -> return_statement .)
    LOCAL_VAR       reduce using rule 11 (statement -> return_statement .)
    DEF             reduce using rule 11 (statement -> return_statement .)
    RETURN          reduce using rule 11 (statement -> return_statement .)
    IF              reduce using rule 11 (statement -> return_statement .)
    UNTIL           reduce using rule 11 (statement -> return_statement .)
    UNLESS          reduce using rule 11 (statement -> return_statement .)
    WHILE           reduce using rule 11 (statement -> return_statement .)
    $end            reduce using rule 11 (statement -> return_statement .)
    END             reduce using rule 11 (statement -> return_statement .)
    ELSE            reduce using rule 11 (statement -> return_statement .)


state 12

    (14) print_statement -> PRINT . L_PAREN argument_list R_PAREN
    (15) print_statement -> PRINT . L_PAREN R_PAREN
    (16) print_statement -> PRINT . argument_list
    (17) print_statement -> PRINT .
    (22) argument_list -> . expression
    (23) argument_list -> . argument_list COMMA expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

  ! shift/reduce conflict for LOCAL_VAR resolved as shift
    L_PAREN         shift and go to state 28
    PRINT           reduce using rule 17 (print_statement -> PRINT .)
    PUTS            reduce using rule 17 (print_statement -> PRINT .)
    DEF             reduce using rule 17 (print_statement -> PRINT .)
    RETURN          reduce using rule 17 (print_statement -> PRINT .)
    IF              reduce using rule 17 (print_statement -> PRINT .)
    UNTIL           reduce using rule 17 (print_statement -> PRINT .)
    UNLESS          reduce using rule 17 (print_statement -> PRINT .)
    WHILE           reduce using rule 17 (print_statement -> PRINT .)
    $end            reduce using rule 17 (print_statement -> PRINT .)
    END             reduce using rule 17 (print_statement -> PRINT .)
    ELSE            reduce using rule 17 (print_statement -> PRINT .)
    NOT             shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

  ! LOCAL_VAR       [ reduce using rule 17 (print_statement -> PRINT .) ]

    argument_list                  shift and go to state 29
    expression                     shift and go to state 30
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 13

    (18) puts_statement -> PUTS . L_PAREN argument_list R_PAREN
    (19) puts_statement -> PUTS . L_PAREN R_PAREN
    (20) puts_statement -> PUTS . argument_list
    (21) puts_statement -> PUTS .
    (22) argument_list -> . expression
    (23) argument_list -> . argument_list COMMA expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

  ! shift/reduce conflict for LOCAL_VAR resolved as shift
    L_PAREN         shift and go to state 42
    PRINT           reduce using rule 21 (puts_statement -> PUTS .)
    PUTS            reduce using rule 21 (puts_statement -> PUTS .)
    DEF             reduce using rule 21 (puts_statement -> PUTS .)
    RETURN          reduce using rule 21 (puts_statement -> PUTS .)
    IF              reduce using rule 21 (puts_statement -> PUTS .)
    UNTIL           reduce using rule 21 (puts_statement -> PUTS .)
    UNLESS          reduce using rule 21 (puts_statement -> PUTS .)
    WHILE           reduce using rule 21 (puts_statement -> PUTS .)
    $end            reduce using rule 21 (puts_statement -> PUTS .)
    END             reduce using rule 21 (puts_statement -> PUTS .)
    ELSE            reduce using rule 21 (puts_statement -> PUTS .)
    NOT             shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

  ! LOCAL_VAR       [ reduce using rule 21 (puts_statement -> PUTS .) ]

    argument_list                  shift and go to state 43
    expression                     shift and go to state 30
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 14

    (24) input_statement -> LOCAL_VAR . ASSIGN GETS
    (25) input_statement -> LOCAL_VAR . ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> LOCAL_VAR . ASSIGN expression
    (34) array_definition -> LOCAL_VAR . ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> LOCAL_VAR . ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN

    ASSIGN          shift and go to state 44


state 15

    (26) data_structure -> array_definition .

    PRINT           reduce using rule 26 (data_structure -> array_definition .)
    PUTS            reduce using rule 26 (data_structure -> array_definition .)
    LOCAL_VAR       reduce using rule 26 (data_structure -> array_definition .)
    DEF             reduce using rule 26 (data_structure -> array_definition .)
    RETURN          reduce using rule 26 (data_structure -> array_definition .)
    IF              reduce using rule 26 (data_structure -> array_definition .)
    UNTIL           reduce using rule 26 (data_structure -> array_definition .)
    UNLESS          reduce using rule 26 (data_structure -> array_definition .)
    WHILE           reduce using rule 26 (data_structure -> array_definition .)
    $end            reduce using rule 26 (data_structure -> array_definition .)
    END             reduce using rule 26 (data_structure -> array_definition .)
    ELSE            reduce using rule 26 (data_structure -> array_definition .)


state 16

    (27) data_structure -> hash_definition .

    PRINT           reduce using rule 27 (data_structure -> hash_definition .)
    PUTS            reduce using rule 27 (data_structure -> hash_definition .)
    LOCAL_VAR       reduce using rule 27 (data_structure -> hash_definition .)
    DEF             reduce using rule 27 (data_structure -> hash_definition .)
    RETURN          reduce using rule 27 (data_structure -> hash_definition .)
    IF              reduce using rule 27 (data_structure -> hash_definition .)
    UNTIL           reduce using rule 27 (data_structure -> hash_definition .)
    UNLESS          reduce using rule 27 (data_structure -> hash_definition .)
    WHILE           reduce using rule 27 (data_structure -> hash_definition .)
    $end            reduce using rule 27 (data_structure -> hash_definition .)
    END             reduce using rule 27 (data_structure -> hash_definition .)
    ELSE            reduce using rule 27 (data_structure -> hash_definition .)


state 17

    (37) control_structure -> if_statement .

    PRINT           reduce using rule 37 (control_structure -> if_statement .)
    PUTS            reduce using rule 37 (control_structure -> if_statement .)
    LOCAL_VAR       reduce using rule 37 (control_structure -> if_statement .)
    DEF             reduce using rule 37 (control_structure -> if_statement .)
    RETURN          reduce using rule 37 (control_structure -> if_statement .)
    IF              reduce using rule 37 (control_structure -> if_statement .)
    UNTIL           reduce using rule 37 (control_structure -> if_statement .)
    UNLESS          reduce using rule 37 (control_structure -> if_statement .)
    WHILE           reduce using rule 37 (control_structure -> if_statement .)
    $end            reduce using rule 37 (control_structure -> if_statement .)
    END             reduce using rule 37 (control_structure -> if_statement .)
    ELSE            reduce using rule 37 (control_structure -> if_statement .)


state 18

    (38) control_structure -> until_statement .

    PRINT           reduce using rule 38 (control_structure -> until_statement .)
    PUTS            reduce using rule 38 (control_structure -> until_statement .)
    LOCAL_VAR       reduce using rule 38 (control_structure -> until_statement .)
    DEF             reduce using rule 38 (control_structure -> until_statement .)
    RETURN          reduce using rule 38 (control_structure -> until_statement .)
    IF              reduce using rule 38 (control_structure -> until_statement .)
    UNTIL           reduce using rule 38 (control_structure -> until_statement .)
    UNLESS          reduce using rule 38 (control_structure -> until_statement .)
    WHILE           reduce using rule 38 (control_structure -> until_statement .)
    $end            reduce using rule 38 (control_structure -> until_statement .)
    END             reduce using rule 38 (control_structure -> until_statement .)
    ELSE            reduce using rule 38 (control_structure -> until_statement .)


state 19

    (39) control_structure -> unless_statement .

    PRINT           reduce using rule 39 (control_structure -> unless_statement .)
    PUTS            reduce using rule 39 (control_structure -> unless_statement .)
    LOCAL_VAR       reduce using rule 39 (control_structure -> unless_statement .)
    DEF             reduce using rule 39 (control_structure -> unless_statement .)
    RETURN          reduce using rule 39 (control_structure -> unless_statement .)
    IF              reduce using rule 39 (control_structure -> unless_statement .)
    UNTIL           reduce using rule 39 (control_structure -> unless_statement .)
    UNLESS          reduce using rule 39 (control_structure -> unless_statement .)
    WHILE           reduce using rule 39 (control_structure -> unless_statement .)
    $end            reduce using rule 39 (control_structure -> unless_statement .)
    END             reduce using rule 39 (control_structure -> unless_statement .)
    ELSE            reduce using rule 39 (control_structure -> unless_statement .)


state 20

    (40) control_structure -> while_statement .

    PRINT           reduce using rule 40 (control_structure -> while_statement .)
    PUTS            reduce using rule 40 (control_structure -> while_statement .)
    LOCAL_VAR       reduce using rule 40 (control_structure -> while_statement .)
    DEF             reduce using rule 40 (control_structure -> while_statement .)
    RETURN          reduce using rule 40 (control_structure -> while_statement .)
    IF              reduce using rule 40 (control_structure -> while_statement .)
    UNTIL           reduce using rule 40 (control_structure -> while_statement .)
    UNLESS          reduce using rule 40 (control_structure -> while_statement .)
    WHILE           reduce using rule 40 (control_structure -> while_statement .)
    $end            reduce using rule 40 (control_structure -> while_statement .)
    END             reduce using rule 40 (control_structure -> while_statement .)
    ELSE            reduce using rule 40 (control_structure -> while_statement .)


state 21

    (51) function_definition -> DEF . LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> DEF . LOCAL_VAR statement_list END

    LOCAL_VAR       shift and go to state 45


state 22

    (12) return_statement -> RETURN . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 46
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 23

    (41) if_statement -> IF . condition statement_list END
    (42) if_statement -> IF . condition statement_list ELSE statement_list END
    (47) condition -> . expression comparison_operator expression
    (48) condition -> . condition logical_operator condition
    (49) condition -> . NOT condition
    (50) condition -> . L_PAREN condition R_PAREN
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    condition                      shift and go to state 48
    expression                     shift and go to state 49
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 24

    (46) until_statement -> UNTIL . condition statement_list END
    (47) condition -> . expression comparison_operator expression
    (48) condition -> . condition logical_operator condition
    (49) condition -> . NOT condition
    (50) condition -> . L_PAREN condition R_PAREN
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    condition                      shift and go to state 52
    expression                     shift and go to state 49
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 25

    (44) unless_statement -> UNLESS . condition statement_list END
    (45) unless_statement -> UNLESS . condition statement_list ELSE statement_list END
    (47) condition -> . expression comparison_operator expression
    (48) condition -> . condition logical_operator condition
    (49) condition -> . NOT condition
    (50) condition -> . L_PAREN condition R_PAREN
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    condition                      shift and go to state 53
    expression                     shift and go to state 49
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 26

    (43) while_statement -> WHILE . condition statement_list END
    (47) condition -> . expression comparison_operator expression
    (48) condition -> . condition logical_operator condition
    (49) condition -> . NOT condition
    (50) condition -> . L_PAREN condition R_PAREN
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    condition                      shift and go to state 54
    expression                     shift and go to state 49
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 27

    (3) statement_list -> statement_list statement .

    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    PUTS            reduce using rule 3 (statement_list -> statement_list statement .)
    LOCAL_VAR       reduce using rule 3 (statement_list -> statement_list statement .)
    DEF             reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 3 (statement_list -> statement_list statement .)
    UNLESS          reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    END             reduce using rule 3 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 3 (statement_list -> statement_list statement .)


state 28

    (14) print_statement -> PRINT L_PAREN . argument_list R_PAREN
    (15) print_statement -> PRINT L_PAREN . R_PAREN
    (75) expression_group -> L_PAREN . expression R_PAREN
    (22) argument_list -> . expression
    (23) argument_list -> . argument_list COMMA expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    R_PAREN         shift and go to state 56
    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    argument_list                  shift and go to state 55
    expression                     shift and go to state 57
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 29

    (16) print_statement -> PRINT argument_list .
    (23) argument_list -> argument_list . COMMA expression

    PRINT           reduce using rule 16 (print_statement -> PRINT argument_list .)
    PUTS            reduce using rule 16 (print_statement -> PRINT argument_list .)
    LOCAL_VAR       reduce using rule 16 (print_statement -> PRINT argument_list .)
    DEF             reduce using rule 16 (print_statement -> PRINT argument_list .)
    RETURN          reduce using rule 16 (print_statement -> PRINT argument_list .)
    IF              reduce using rule 16 (print_statement -> PRINT argument_list .)
    UNTIL           reduce using rule 16 (print_statement -> PRINT argument_list .)
    UNLESS          reduce using rule 16 (print_statement -> PRINT argument_list .)
    WHILE           reduce using rule 16 (print_statement -> PRINT argument_list .)
    $end            reduce using rule 16 (print_statement -> PRINT argument_list .)
    END             reduce using rule 16 (print_statement -> PRINT argument_list .)
    ELSE            reduce using rule 16 (print_statement -> PRINT argument_list .)
    COMMA           shift and go to state 58


state 30

    (22) argument_list -> expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 22 (argument_list -> expression .)
    PRINT           reduce using rule 22 (argument_list -> expression .)
    PUTS            reduce using rule 22 (argument_list -> expression .)
    LOCAL_VAR       reduce using rule 22 (argument_list -> expression .)
    DEF             reduce using rule 22 (argument_list -> expression .)
    RETURN          reduce using rule 22 (argument_list -> expression .)
    IF              reduce using rule 22 (argument_list -> expression .)
    UNTIL           reduce using rule 22 (argument_list -> expression .)
    UNLESS          reduce using rule 22 (argument_list -> expression .)
    WHILE           reduce using rule 22 (argument_list -> expression .)
    $end            reduce using rule 22 (argument_list -> expression .)
    END             reduce using rule 22 (argument_list -> expression .)
    ELSE            reduce using rule 22 (argument_list -> expression .)
    R_PAREN         reduce using rule 22 (argument_list -> expression .)
    R_ULTRA_PAREN   reduce using rule 22 (argument_list -> expression .)
    R_MAYUS_PAREN   reduce using rule 22 (argument_list -> expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! PLUS            [ reduce using rule 22 (argument_list -> expression .) ]
  ! MINUS           [ reduce using rule 22 (argument_list -> expression .) ]
  ! MULTIPLY        [ reduce using rule 22 (argument_list -> expression .) ]
  ! DIVIDE          [ reduce using rule 22 (argument_list -> expression .) ]
  ! MODULE          [ reduce using rule 22 (argument_list -> expression .) ]
  ! EQUALS          [ reduce using rule 22 (argument_list -> expression .) ]
  ! DIFFERENT       [ reduce using rule 22 (argument_list -> expression .) ]
  ! GREATER         [ reduce using rule 22 (argument_list -> expression .) ]
  ! LESS            [ reduce using rule 22 (argument_list -> expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 22 (argument_list -> expression .) ]
  ! LESS_EQUAL      [ reduce using rule 22 (argument_list -> expression .) ]
  ! AND             [ reduce using rule 22 (argument_list -> expression .) ]
  ! OR              [ reduce using rule 22 (argument_list -> expression .) ]


state 31

    (57) expression -> expression_binop .

    PLUS            reduce using rule 57 (expression -> expression_binop .)
    MINUS           reduce using rule 57 (expression -> expression_binop .)
    MULTIPLY        reduce using rule 57 (expression -> expression_binop .)
    DIVIDE          reduce using rule 57 (expression -> expression_binop .)
    MODULE          reduce using rule 57 (expression -> expression_binop .)
    EQUALS          reduce using rule 57 (expression -> expression_binop .)
    DIFFERENT       reduce using rule 57 (expression -> expression_binop .)
    GREATER         reduce using rule 57 (expression -> expression_binop .)
    LESS            reduce using rule 57 (expression -> expression_binop .)
    GREATER_EQUAL   reduce using rule 57 (expression -> expression_binop .)
    LESS_EQUAL      reduce using rule 57 (expression -> expression_binop .)
    AND             reduce using rule 57 (expression -> expression_binop .)
    OR              reduce using rule 57 (expression -> expression_binop .)
    COMMA           reduce using rule 57 (expression -> expression_binop .)
    PRINT           reduce using rule 57 (expression -> expression_binop .)
    PUTS            reduce using rule 57 (expression -> expression_binop .)
    LOCAL_VAR       reduce using rule 57 (expression -> expression_binop .)
    DEF             reduce using rule 57 (expression -> expression_binop .)
    RETURN          reduce using rule 57 (expression -> expression_binop .)
    IF              reduce using rule 57 (expression -> expression_binop .)
    UNTIL           reduce using rule 57 (expression -> expression_binop .)
    UNLESS          reduce using rule 57 (expression -> expression_binop .)
    WHILE           reduce using rule 57 (expression -> expression_binop .)
    $end            reduce using rule 57 (expression -> expression_binop .)
    END             reduce using rule 57 (expression -> expression_binop .)
    ELSE            reduce using rule 57 (expression -> expression_binop .)
    R_PAREN         reduce using rule 57 (expression -> expression_binop .)
    R_ULTRA_PAREN   reduce using rule 57 (expression -> expression_binop .)
    R_MAYUS_PAREN   reduce using rule 57 (expression -> expression_binop .)


state 32

    (58) expression -> expression_not .

    PLUS            reduce using rule 58 (expression -> expression_not .)
    MINUS           reduce using rule 58 (expression -> expression_not .)
    MULTIPLY        reduce using rule 58 (expression -> expression_not .)
    DIVIDE          reduce using rule 58 (expression -> expression_not .)
    MODULE          reduce using rule 58 (expression -> expression_not .)
    EQUALS          reduce using rule 58 (expression -> expression_not .)
    DIFFERENT       reduce using rule 58 (expression -> expression_not .)
    GREATER         reduce using rule 58 (expression -> expression_not .)
    LESS            reduce using rule 58 (expression -> expression_not .)
    GREATER_EQUAL   reduce using rule 58 (expression -> expression_not .)
    LESS_EQUAL      reduce using rule 58 (expression -> expression_not .)
    AND             reduce using rule 58 (expression -> expression_not .)
    OR              reduce using rule 58 (expression -> expression_not .)
    COMMA           reduce using rule 58 (expression -> expression_not .)
    PRINT           reduce using rule 58 (expression -> expression_not .)
    PUTS            reduce using rule 58 (expression -> expression_not .)
    LOCAL_VAR       reduce using rule 58 (expression -> expression_not .)
    DEF             reduce using rule 58 (expression -> expression_not .)
    RETURN          reduce using rule 58 (expression -> expression_not .)
    IF              reduce using rule 58 (expression -> expression_not .)
    UNTIL           reduce using rule 58 (expression -> expression_not .)
    UNLESS          reduce using rule 58 (expression -> expression_not .)
    WHILE           reduce using rule 58 (expression -> expression_not .)
    $end            reduce using rule 58 (expression -> expression_not .)
    END             reduce using rule 58 (expression -> expression_not .)
    ELSE            reduce using rule 58 (expression -> expression_not .)
    R_PAREN         reduce using rule 58 (expression -> expression_not .)
    R_ULTRA_PAREN   reduce using rule 58 (expression -> expression_not .)
    R_MAYUS_PAREN   reduce using rule 58 (expression -> expression_not .)


state 33

    (59) expression -> expression_group .

    PLUS            reduce using rule 59 (expression -> expression_group .)
    MINUS           reduce using rule 59 (expression -> expression_group .)
    MULTIPLY        reduce using rule 59 (expression -> expression_group .)
    DIVIDE          reduce using rule 59 (expression -> expression_group .)
    MODULE          reduce using rule 59 (expression -> expression_group .)
    EQUALS          reduce using rule 59 (expression -> expression_group .)
    DIFFERENT       reduce using rule 59 (expression -> expression_group .)
    GREATER         reduce using rule 59 (expression -> expression_group .)
    LESS            reduce using rule 59 (expression -> expression_group .)
    GREATER_EQUAL   reduce using rule 59 (expression -> expression_group .)
    LESS_EQUAL      reduce using rule 59 (expression -> expression_group .)
    AND             reduce using rule 59 (expression -> expression_group .)
    OR              reduce using rule 59 (expression -> expression_group .)
    COMMA           reduce using rule 59 (expression -> expression_group .)
    PRINT           reduce using rule 59 (expression -> expression_group .)
    PUTS            reduce using rule 59 (expression -> expression_group .)
    LOCAL_VAR       reduce using rule 59 (expression -> expression_group .)
    DEF             reduce using rule 59 (expression -> expression_group .)
    RETURN          reduce using rule 59 (expression -> expression_group .)
    IF              reduce using rule 59 (expression -> expression_group .)
    UNTIL           reduce using rule 59 (expression -> expression_group .)
    UNLESS          reduce using rule 59 (expression -> expression_group .)
    WHILE           reduce using rule 59 (expression -> expression_group .)
    $end            reduce using rule 59 (expression -> expression_group .)
    END             reduce using rule 59 (expression -> expression_group .)
    ELSE            reduce using rule 59 (expression -> expression_group .)
    R_PAREN         reduce using rule 59 (expression -> expression_group .)
    R_ULTRA_PAREN   reduce using rule 59 (expression -> expression_group .)
    R_MAYUS_PAREN   reduce using rule 59 (expression -> expression_group .)


state 34

    (60) expression -> expression_term .

    PLUS            reduce using rule 60 (expression -> expression_term .)
    MINUS           reduce using rule 60 (expression -> expression_term .)
    MULTIPLY        reduce using rule 60 (expression -> expression_term .)
    DIVIDE          reduce using rule 60 (expression -> expression_term .)
    MODULE          reduce using rule 60 (expression -> expression_term .)
    EQUALS          reduce using rule 60 (expression -> expression_term .)
    DIFFERENT       reduce using rule 60 (expression -> expression_term .)
    GREATER         reduce using rule 60 (expression -> expression_term .)
    LESS            reduce using rule 60 (expression -> expression_term .)
    GREATER_EQUAL   reduce using rule 60 (expression -> expression_term .)
    LESS_EQUAL      reduce using rule 60 (expression -> expression_term .)
    AND             reduce using rule 60 (expression -> expression_term .)
    OR              reduce using rule 60 (expression -> expression_term .)
    COMMA           reduce using rule 60 (expression -> expression_term .)
    PRINT           reduce using rule 60 (expression -> expression_term .)
    PUTS            reduce using rule 60 (expression -> expression_term .)
    LOCAL_VAR       reduce using rule 60 (expression -> expression_term .)
    DEF             reduce using rule 60 (expression -> expression_term .)
    RETURN          reduce using rule 60 (expression -> expression_term .)
    IF              reduce using rule 60 (expression -> expression_term .)
    UNTIL           reduce using rule 60 (expression -> expression_term .)
    UNLESS          reduce using rule 60 (expression -> expression_term .)
    WHILE           reduce using rule 60 (expression -> expression_term .)
    $end            reduce using rule 60 (expression -> expression_term .)
    END             reduce using rule 60 (expression -> expression_term .)
    ELSE            reduce using rule 60 (expression -> expression_term .)
    R_PAREN         reduce using rule 60 (expression -> expression_term .)
    R_ULTRA_PAREN   reduce using rule 60 (expression -> expression_term .)
    R_MAYUS_PAREN   reduce using rule 60 (expression -> expression_term .)


state 35

    (74) expression_not -> NOT . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 72
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 36

    (76) expression_term -> INTEGER .

    PLUS            reduce using rule 76 (expression_term -> INTEGER .)
    MINUS           reduce using rule 76 (expression_term -> INTEGER .)
    MULTIPLY        reduce using rule 76 (expression_term -> INTEGER .)
    DIVIDE          reduce using rule 76 (expression_term -> INTEGER .)
    MODULE          reduce using rule 76 (expression_term -> INTEGER .)
    EQUALS          reduce using rule 76 (expression_term -> INTEGER .)
    DIFFERENT       reduce using rule 76 (expression_term -> INTEGER .)
    GREATER         reduce using rule 76 (expression_term -> INTEGER .)
    LESS            reduce using rule 76 (expression_term -> INTEGER .)
    GREATER_EQUAL   reduce using rule 76 (expression_term -> INTEGER .)
    LESS_EQUAL      reduce using rule 76 (expression_term -> INTEGER .)
    AND             reduce using rule 76 (expression_term -> INTEGER .)
    OR              reduce using rule 76 (expression_term -> INTEGER .)
    COMMA           reduce using rule 76 (expression_term -> INTEGER .)
    PRINT           reduce using rule 76 (expression_term -> INTEGER .)
    PUTS            reduce using rule 76 (expression_term -> INTEGER .)
    LOCAL_VAR       reduce using rule 76 (expression_term -> INTEGER .)
    DEF             reduce using rule 76 (expression_term -> INTEGER .)
    RETURN          reduce using rule 76 (expression_term -> INTEGER .)
    IF              reduce using rule 76 (expression_term -> INTEGER .)
    UNTIL           reduce using rule 76 (expression_term -> INTEGER .)
    UNLESS          reduce using rule 76 (expression_term -> INTEGER .)
    WHILE           reduce using rule 76 (expression_term -> INTEGER .)
    $end            reduce using rule 76 (expression_term -> INTEGER .)
    END             reduce using rule 76 (expression_term -> INTEGER .)
    ELSE            reduce using rule 76 (expression_term -> INTEGER .)
    R_PAREN         reduce using rule 76 (expression_term -> INTEGER .)
    R_ULTRA_PAREN   reduce using rule 76 (expression_term -> INTEGER .)
    R_MAYUS_PAREN   reduce using rule 76 (expression_term -> INTEGER .)


state 37

    (77) expression_term -> FLOAT .

    PLUS            reduce using rule 77 (expression_term -> FLOAT .)
    MINUS           reduce using rule 77 (expression_term -> FLOAT .)
    MULTIPLY        reduce using rule 77 (expression_term -> FLOAT .)
    DIVIDE          reduce using rule 77 (expression_term -> FLOAT .)
    MODULE          reduce using rule 77 (expression_term -> FLOAT .)
    EQUALS          reduce using rule 77 (expression_term -> FLOAT .)
    DIFFERENT       reduce using rule 77 (expression_term -> FLOAT .)
    GREATER         reduce using rule 77 (expression_term -> FLOAT .)
    LESS            reduce using rule 77 (expression_term -> FLOAT .)
    GREATER_EQUAL   reduce using rule 77 (expression_term -> FLOAT .)
    LESS_EQUAL      reduce using rule 77 (expression_term -> FLOAT .)
    AND             reduce using rule 77 (expression_term -> FLOAT .)
    OR              reduce using rule 77 (expression_term -> FLOAT .)
    COMMA           reduce using rule 77 (expression_term -> FLOAT .)
    PRINT           reduce using rule 77 (expression_term -> FLOAT .)
    PUTS            reduce using rule 77 (expression_term -> FLOAT .)
    LOCAL_VAR       reduce using rule 77 (expression_term -> FLOAT .)
    DEF             reduce using rule 77 (expression_term -> FLOAT .)
    RETURN          reduce using rule 77 (expression_term -> FLOAT .)
    IF              reduce using rule 77 (expression_term -> FLOAT .)
    UNTIL           reduce using rule 77 (expression_term -> FLOAT .)
    UNLESS          reduce using rule 77 (expression_term -> FLOAT .)
    WHILE           reduce using rule 77 (expression_term -> FLOAT .)
    $end            reduce using rule 77 (expression_term -> FLOAT .)
    END             reduce using rule 77 (expression_term -> FLOAT .)
    ELSE            reduce using rule 77 (expression_term -> FLOAT .)
    R_PAREN         reduce using rule 77 (expression_term -> FLOAT .)
    R_ULTRA_PAREN   reduce using rule 77 (expression_term -> FLOAT .)
    R_MAYUS_PAREN   reduce using rule 77 (expression_term -> FLOAT .)


state 38

    (78) expression_term -> STRING .

    PLUS            reduce using rule 78 (expression_term -> STRING .)
    MINUS           reduce using rule 78 (expression_term -> STRING .)
    MULTIPLY        reduce using rule 78 (expression_term -> STRING .)
    DIVIDE          reduce using rule 78 (expression_term -> STRING .)
    MODULE          reduce using rule 78 (expression_term -> STRING .)
    EQUALS          reduce using rule 78 (expression_term -> STRING .)
    DIFFERENT       reduce using rule 78 (expression_term -> STRING .)
    GREATER         reduce using rule 78 (expression_term -> STRING .)
    LESS            reduce using rule 78 (expression_term -> STRING .)
    GREATER_EQUAL   reduce using rule 78 (expression_term -> STRING .)
    LESS_EQUAL      reduce using rule 78 (expression_term -> STRING .)
    AND             reduce using rule 78 (expression_term -> STRING .)
    OR              reduce using rule 78 (expression_term -> STRING .)
    COMMA           reduce using rule 78 (expression_term -> STRING .)
    PRINT           reduce using rule 78 (expression_term -> STRING .)
    PUTS            reduce using rule 78 (expression_term -> STRING .)
    LOCAL_VAR       reduce using rule 78 (expression_term -> STRING .)
    DEF             reduce using rule 78 (expression_term -> STRING .)
    RETURN          reduce using rule 78 (expression_term -> STRING .)
    IF              reduce using rule 78 (expression_term -> STRING .)
    UNTIL           reduce using rule 78 (expression_term -> STRING .)
    UNLESS          reduce using rule 78 (expression_term -> STRING .)
    WHILE           reduce using rule 78 (expression_term -> STRING .)
    $end            reduce using rule 78 (expression_term -> STRING .)
    END             reduce using rule 78 (expression_term -> STRING .)
    ELSE            reduce using rule 78 (expression_term -> STRING .)
    R_PAREN         reduce using rule 78 (expression_term -> STRING .)
    R_ULTRA_PAREN   reduce using rule 78 (expression_term -> STRING .)
    R_MAYUS_PAREN   reduce using rule 78 (expression_term -> STRING .)


state 39

    (79) expression_term -> LOCAL_VAR .
    (86) array_access -> LOCAL_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> LOCAL_VAR . L_PAREN argument_list R_PAREN
    (83) function_call -> LOCAL_VAR . L_PAREN R_PAREN
    (84) function_call -> LOCAL_VAR . argument_list
    (85) function_call -> LOCAL_VAR .
    (22) argument_list -> . expression
    (23) argument_list -> . argument_list COMMA expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

  ! reduce/reduce conflict for PLUS resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for MINUS resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for MODULE resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for EQUALS resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for GREATER resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for LESS resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for AND resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for OR resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for COMMA resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for PRINT resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for PUTS resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for LOCAL_VAR resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for DEF resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for RETURN resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for IF resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for UNTIL resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for UNLESS resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for WHILE resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for $end resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for END resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for ELSE resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for R_PAREN resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for R_ULTRA_PAREN resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for R_MAYUS_PAREN resolved using rule 79 (expression_term -> LOCAL_VAR .)
  ! shift/reduce conflict for LOCAL_VAR resolved as shift
    PLUS            reduce using rule 79 (expression_term -> LOCAL_VAR .)
    MINUS           reduce using rule 79 (expression_term -> LOCAL_VAR .)
    MULTIPLY        reduce using rule 79 (expression_term -> LOCAL_VAR .)
    DIVIDE          reduce using rule 79 (expression_term -> LOCAL_VAR .)
    MODULE          reduce using rule 79 (expression_term -> LOCAL_VAR .)
    EQUALS          reduce using rule 79 (expression_term -> LOCAL_VAR .)
    DIFFERENT       reduce using rule 79 (expression_term -> LOCAL_VAR .)
    GREATER         reduce using rule 79 (expression_term -> LOCAL_VAR .)
    LESS            reduce using rule 79 (expression_term -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 79 (expression_term -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 79 (expression_term -> LOCAL_VAR .)
    AND             reduce using rule 79 (expression_term -> LOCAL_VAR .)
    OR              reduce using rule 79 (expression_term -> LOCAL_VAR .)
    COMMA           reduce using rule 79 (expression_term -> LOCAL_VAR .)
    PRINT           reduce using rule 79 (expression_term -> LOCAL_VAR .)
    PUTS            reduce using rule 79 (expression_term -> LOCAL_VAR .)
    DEF             reduce using rule 79 (expression_term -> LOCAL_VAR .)
    RETURN          reduce using rule 79 (expression_term -> LOCAL_VAR .)
    IF              reduce using rule 79 (expression_term -> LOCAL_VAR .)
    UNTIL           reduce using rule 79 (expression_term -> LOCAL_VAR .)
    UNLESS          reduce using rule 79 (expression_term -> LOCAL_VAR .)
    WHILE           reduce using rule 79 (expression_term -> LOCAL_VAR .)
    $end            reduce using rule 79 (expression_term -> LOCAL_VAR .)
    END             reduce using rule 79 (expression_term -> LOCAL_VAR .)
    ELSE            reduce using rule 79 (expression_term -> LOCAL_VAR .)
    R_PAREN         reduce using rule 79 (expression_term -> LOCAL_VAR .)
    R_ULTRA_PAREN   reduce using rule 79 (expression_term -> LOCAL_VAR .)
    R_MAYUS_PAREN   reduce using rule 79 (expression_term -> LOCAL_VAR .)
    L_ULTRA_PAREN   shift and go to state 73
    L_PAREN         shift and go to state 74
    NOT             shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

  ! LOCAL_VAR       [ reduce using rule 79 (expression_term -> LOCAL_VAR .) ]
  ! PLUS            [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! MINUS           [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! MULTIPLY        [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! DIVIDE          [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! MODULE          [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! EQUALS          [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! DIFFERENT       [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! GREATER         [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! LESS            [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! GREATER_EQUAL   [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! LESS_EQUAL      [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! AND             [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! OR              [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! COMMA           [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! PRINT           [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! PUTS            [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! LOCAL_VAR       [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! DEF             [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! RETURN          [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! IF              [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! UNTIL           [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! UNLESS          [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! WHILE           [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! $end            [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! END             [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! ELSE            [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! R_PAREN         [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! R_ULTRA_PAREN   [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]
  ! R_MAYUS_PAREN   [ reduce using rule 85 (function_call -> LOCAL_VAR .) ]

    expression                     shift and go to state 30
    argument_list                  shift and go to state 75
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 40

    (80) expression_term -> array_access .

    PLUS            reduce using rule 80 (expression_term -> array_access .)
    MINUS           reduce using rule 80 (expression_term -> array_access .)
    MULTIPLY        reduce using rule 80 (expression_term -> array_access .)
    DIVIDE          reduce using rule 80 (expression_term -> array_access .)
    MODULE          reduce using rule 80 (expression_term -> array_access .)
    EQUALS          reduce using rule 80 (expression_term -> array_access .)
    DIFFERENT       reduce using rule 80 (expression_term -> array_access .)
    GREATER         reduce using rule 80 (expression_term -> array_access .)
    LESS            reduce using rule 80 (expression_term -> array_access .)
    GREATER_EQUAL   reduce using rule 80 (expression_term -> array_access .)
    LESS_EQUAL      reduce using rule 80 (expression_term -> array_access .)
    AND             reduce using rule 80 (expression_term -> array_access .)
    OR              reduce using rule 80 (expression_term -> array_access .)
    COMMA           reduce using rule 80 (expression_term -> array_access .)
    PRINT           reduce using rule 80 (expression_term -> array_access .)
    PUTS            reduce using rule 80 (expression_term -> array_access .)
    LOCAL_VAR       reduce using rule 80 (expression_term -> array_access .)
    DEF             reduce using rule 80 (expression_term -> array_access .)
    RETURN          reduce using rule 80 (expression_term -> array_access .)
    IF              reduce using rule 80 (expression_term -> array_access .)
    UNTIL           reduce using rule 80 (expression_term -> array_access .)
    UNLESS          reduce using rule 80 (expression_term -> array_access .)
    WHILE           reduce using rule 80 (expression_term -> array_access .)
    $end            reduce using rule 80 (expression_term -> array_access .)
    END             reduce using rule 80 (expression_term -> array_access .)
    ELSE            reduce using rule 80 (expression_term -> array_access .)
    R_PAREN         reduce using rule 80 (expression_term -> array_access .)
    R_ULTRA_PAREN   reduce using rule 80 (expression_term -> array_access .)
    R_MAYUS_PAREN   reduce using rule 80 (expression_term -> array_access .)


state 41

    (81) expression_term -> function_call .

    PLUS            reduce using rule 81 (expression_term -> function_call .)
    MINUS           reduce using rule 81 (expression_term -> function_call .)
    MULTIPLY        reduce using rule 81 (expression_term -> function_call .)
    DIVIDE          reduce using rule 81 (expression_term -> function_call .)
    MODULE          reduce using rule 81 (expression_term -> function_call .)
    EQUALS          reduce using rule 81 (expression_term -> function_call .)
    DIFFERENT       reduce using rule 81 (expression_term -> function_call .)
    GREATER         reduce using rule 81 (expression_term -> function_call .)
    LESS            reduce using rule 81 (expression_term -> function_call .)
    GREATER_EQUAL   reduce using rule 81 (expression_term -> function_call .)
    LESS_EQUAL      reduce using rule 81 (expression_term -> function_call .)
    AND             reduce using rule 81 (expression_term -> function_call .)
    OR              reduce using rule 81 (expression_term -> function_call .)
    COMMA           reduce using rule 81 (expression_term -> function_call .)
    PRINT           reduce using rule 81 (expression_term -> function_call .)
    PUTS            reduce using rule 81 (expression_term -> function_call .)
    LOCAL_VAR       reduce using rule 81 (expression_term -> function_call .)
    DEF             reduce using rule 81 (expression_term -> function_call .)
    RETURN          reduce using rule 81 (expression_term -> function_call .)
    IF              reduce using rule 81 (expression_term -> function_call .)
    UNTIL           reduce using rule 81 (expression_term -> function_call .)
    UNLESS          reduce using rule 81 (expression_term -> function_call .)
    WHILE           reduce using rule 81 (expression_term -> function_call .)
    $end            reduce using rule 81 (expression_term -> function_call .)
    END             reduce using rule 81 (expression_term -> function_call .)
    ELSE            reduce using rule 81 (expression_term -> function_call .)
    R_PAREN         reduce using rule 81 (expression_term -> function_call .)
    R_ULTRA_PAREN   reduce using rule 81 (expression_term -> function_call .)
    R_MAYUS_PAREN   reduce using rule 81 (expression_term -> function_call .)


state 42

    (18) puts_statement -> PUTS L_PAREN . argument_list R_PAREN
    (19) puts_statement -> PUTS L_PAREN . R_PAREN
    (75) expression_group -> L_PAREN . expression R_PAREN
    (22) argument_list -> . expression
    (23) argument_list -> . argument_list COMMA expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    R_PAREN         shift and go to state 77
    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    argument_list                  shift and go to state 76
    expression                     shift and go to state 57
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 43

    (20) puts_statement -> PUTS argument_list .
    (23) argument_list -> argument_list . COMMA expression

    PRINT           reduce using rule 20 (puts_statement -> PUTS argument_list .)
    PUTS            reduce using rule 20 (puts_statement -> PUTS argument_list .)
    LOCAL_VAR       reduce using rule 20 (puts_statement -> PUTS argument_list .)
    DEF             reduce using rule 20 (puts_statement -> PUTS argument_list .)
    RETURN          reduce using rule 20 (puts_statement -> PUTS argument_list .)
    IF              reduce using rule 20 (puts_statement -> PUTS argument_list .)
    UNTIL           reduce using rule 20 (puts_statement -> PUTS argument_list .)
    UNLESS          reduce using rule 20 (puts_statement -> PUTS argument_list .)
    WHILE           reduce using rule 20 (puts_statement -> PUTS argument_list .)
    $end            reduce using rule 20 (puts_statement -> PUTS argument_list .)
    END             reduce using rule 20 (puts_statement -> PUTS argument_list .)
    ELSE            reduce using rule 20 (puts_statement -> PUTS argument_list .)
    COMMA           shift and go to state 58


state 44

    (24) input_statement -> LOCAL_VAR ASSIGN . GETS
    (25) input_statement -> LOCAL_VAR ASSIGN . GETS DOT CHOMP
    (13) assignment_statement -> LOCAL_VAR ASSIGN . expression
    (34) array_definition -> LOCAL_VAR ASSIGN . L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> LOCAL_VAR ASSIGN . L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    GETS            shift and go to state 78
    L_ULTRA_PAREN   shift and go to state 80
    L_MAYUS_PAREN   shift and go to state 81
    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 79
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 45

    (51) function_definition -> DEF LOCAL_VAR . parameter_list statement_list END
    (52) function_definition -> DEF LOCAL_VAR . statement_list END
    (53) parameter_list -> . L_PAREN parameter_list_inner R_PAREN
    (54) parameter_list -> . empty
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (93) empty -> .
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for LOCAL_VAR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for UNLESS resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    L_PAREN         shift and go to state 84
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! PUTS            [ reduce using rule 93 (empty -> .) ]
  ! LOCAL_VAR       [ reduce using rule 93 (empty -> .) ]
  ! DEF             [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! UNTIL           [ reduce using rule 93 (empty -> .) ]
  ! UNLESS          [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]

    parameter_list                 shift and go to state 82
    statement_list                 shift and go to state 83
    empty                          shift and go to state 85
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 46

    (12) return_statement -> RETURN expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    PRINT           reduce using rule 12 (return_statement -> RETURN expression .)
    PUTS            reduce using rule 12 (return_statement -> RETURN expression .)
    LOCAL_VAR       reduce using rule 12 (return_statement -> RETURN expression .)
    DEF             reduce using rule 12 (return_statement -> RETURN expression .)
    RETURN          reduce using rule 12 (return_statement -> RETURN expression .)
    IF              reduce using rule 12 (return_statement -> RETURN expression .)
    UNTIL           reduce using rule 12 (return_statement -> RETURN expression .)
    UNLESS          reduce using rule 12 (return_statement -> RETURN expression .)
    WHILE           reduce using rule 12 (return_statement -> RETURN expression .)
    $end            reduce using rule 12 (return_statement -> RETURN expression .)
    END             reduce using rule 12 (return_statement -> RETURN expression .)
    ELSE            reduce using rule 12 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 47

    (75) expression_group -> L_PAREN . expression R_PAREN
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 86
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 48

    (41) if_statement -> IF condition . statement_list END
    (42) if_statement -> IF condition . statement_list ELSE statement_list END
    (48) condition -> condition . logical_operator condition
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (32) logical_operator -> . AND
    (33) logical_operator -> . OR
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    AND             shift and go to state 89
    OR              shift and go to state 90
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement_list                 shift and go to state 87
    logical_operator               shift and go to state 88
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 49

    (47) condition -> expression . comparison_operator expression
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression
    (87) comparison_operator -> . EQUALS
    (88) comparison_operator -> . DIFFERENT
    (89) comparison_operator -> . LESS
    (90) comparison_operator -> . LESS_EQUAL
    (91) comparison_operator -> . GREATER
    (92) comparison_operator -> . GREATER_EQUAL

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 92
    DIFFERENT       shift and go to state 93
    GREATER         shift and go to state 94
    LESS            shift and go to state 95
    GREATER_EQUAL   shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    AND             shift and go to state 70
    OR              shift and go to state 71

    comparison_operator            shift and go to state 91

state 50

    (49) condition -> NOT . condition
    (74) expression_not -> NOT . expression
    (47) condition -> . expression comparison_operator expression
    (48) condition -> . condition logical_operator condition
    (49) condition -> . NOT condition
    (50) condition -> . L_PAREN condition R_PAREN
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    condition                      shift and go to state 98
    expression                     shift and go to state 99
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 51

    (50) condition -> L_PAREN . condition R_PAREN
    (75) expression_group -> L_PAREN . expression R_PAREN
    (47) condition -> . expression comparison_operator expression
    (48) condition -> . condition logical_operator condition
    (49) condition -> . NOT condition
    (50) condition -> . L_PAREN condition R_PAREN
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    condition                      shift and go to state 100
    expression                     shift and go to state 101
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 52

    (46) until_statement -> UNTIL condition . statement_list END
    (48) condition -> condition . logical_operator condition
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (32) logical_operator -> . AND
    (33) logical_operator -> . OR
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    AND             shift and go to state 89
    OR              shift and go to state 90
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement_list                 shift and go to state 102
    logical_operator               shift and go to state 88
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 53

    (44) unless_statement -> UNLESS condition . statement_list END
    (45) unless_statement -> UNLESS condition . statement_list ELSE statement_list END
    (48) condition -> condition . logical_operator condition
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (32) logical_operator -> . AND
    (33) logical_operator -> . OR
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    AND             shift and go to state 89
    OR              shift and go to state 90
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement_list                 shift and go to state 103
    logical_operator               shift and go to state 88
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 54

    (43) while_statement -> WHILE condition . statement_list END
    (48) condition -> condition . logical_operator condition
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (32) logical_operator -> . AND
    (33) logical_operator -> . OR
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    AND             shift and go to state 89
    OR              shift and go to state 90
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement_list                 shift and go to state 104
    logical_operator               shift and go to state 88
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 55

    (14) print_statement -> PRINT L_PAREN argument_list . R_PAREN
    (23) argument_list -> argument_list . COMMA expression

    R_PAREN         shift and go to state 105
    COMMA           shift and go to state 58


state 56

    (15) print_statement -> PRINT L_PAREN R_PAREN .

    PRINT           reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    PUTS            reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    LOCAL_VAR       reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    DEF             reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    RETURN          reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    IF              reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    UNTIL           reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    UNLESS          reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    WHILE           reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    $end            reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    END             reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)
    ELSE            reduce using rule 15 (print_statement -> PRINT L_PAREN R_PAREN .)


state 57

    (75) expression_group -> L_PAREN expression . R_PAREN
    (22) argument_list -> expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

  ! shift/reduce conflict for R_PAREN resolved as shift
    R_PAREN         shift and go to state 106
    COMMA           reduce using rule 22 (argument_list -> expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! R_PAREN         [ reduce using rule 22 (argument_list -> expression .) ]


state 58

    (23) argument_list -> argument_list COMMA . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 107
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 59

    (61) expression_binop -> expression PLUS . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 108
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 60

    (62) expression_binop -> expression MINUS . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 109
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 61

    (63) expression_binop -> expression MULTIPLY . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 110
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 62

    (64) expression_binop -> expression DIVIDE . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 111
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 63

    (65) expression_binop -> expression MODULE . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 112
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 64

    (66) expression_binop -> expression EQUALS . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 113
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 65

    (67) expression_binop -> expression DIFFERENT . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 114
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 66

    (68) expression_binop -> expression GREATER . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 115
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 67

    (69) expression_binop -> expression LESS . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 116
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 68

    (70) expression_binop -> expression GREATER_EQUAL . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 117
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 69

    (71) expression_binop -> expression LESS_EQUAL . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 118
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 70

    (72) expression_binop -> expression AND . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 119
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 71

    (73) expression_binop -> expression OR . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 120
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 72

    (74) expression_not -> NOT expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    COMMA           reduce using rule 74 (expression_not -> NOT expression .)
    PRINT           reduce using rule 74 (expression_not -> NOT expression .)
    PUTS            reduce using rule 74 (expression_not -> NOT expression .)
    LOCAL_VAR       reduce using rule 74 (expression_not -> NOT expression .)
    DEF             reduce using rule 74 (expression_not -> NOT expression .)
    RETURN          reduce using rule 74 (expression_not -> NOT expression .)
    IF              reduce using rule 74 (expression_not -> NOT expression .)
    UNTIL           reduce using rule 74 (expression_not -> NOT expression .)
    UNLESS          reduce using rule 74 (expression_not -> NOT expression .)
    WHILE           reduce using rule 74 (expression_not -> NOT expression .)
    $end            reduce using rule 74 (expression_not -> NOT expression .)
    END             reduce using rule 74 (expression_not -> NOT expression .)
    ELSE            reduce using rule 74 (expression_not -> NOT expression .)
    R_PAREN         reduce using rule 74 (expression_not -> NOT expression .)
    R_ULTRA_PAREN   reduce using rule 74 (expression_not -> NOT expression .)
    R_MAYUS_PAREN   reduce using rule 74 (expression_not -> NOT expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! PLUS            [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! MINUS           [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! MODULE          [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! DIFFERENT       [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! GREATER         [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! LESS            [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! LESS_EQUAL      [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! AND             [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! OR              [ reduce using rule 74 (expression_not -> NOT expression .) ]


state 73

    (86) array_access -> LOCAL_VAR L_ULTRA_PAREN . expression R_ULTRA_PAREN
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 121
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 74

    (82) function_call -> LOCAL_VAR L_PAREN . argument_list R_PAREN
    (83) function_call -> LOCAL_VAR L_PAREN . R_PAREN
    (75) expression_group -> L_PAREN . expression R_PAREN
    (22) argument_list -> . expression
    (23) argument_list -> . argument_list COMMA expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    R_PAREN         shift and go to state 123
    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    argument_list                  shift and go to state 122
    expression                     shift and go to state 57
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 75

    (84) function_call -> LOCAL_VAR argument_list .
    (23) argument_list -> argument_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    PLUS            reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    MINUS           reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    MULTIPLY        reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    DIVIDE          reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    MODULE          reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    EQUALS          reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    DIFFERENT       reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    GREATER         reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    LESS            reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    GREATER_EQUAL   reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    LESS_EQUAL      reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    AND             reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    OR              reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    PRINT           reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    PUTS            reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    LOCAL_VAR       reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    DEF             reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    RETURN          reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    IF              reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    UNTIL           reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    UNLESS          reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    WHILE           reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    $end            reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    END             reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    ELSE            reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    R_PAREN         reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    R_ULTRA_PAREN   reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    R_MAYUS_PAREN   reduce using rule 84 (function_call -> LOCAL_VAR argument_list .)
    COMMA           shift and go to state 58

  ! COMMA           [ reduce using rule 84 (function_call -> LOCAL_VAR argument_list .) ]


state 76

    (18) puts_statement -> PUTS L_PAREN argument_list . R_PAREN
    (23) argument_list -> argument_list . COMMA expression

    R_PAREN         shift and go to state 124
    COMMA           shift and go to state 58


state 77

    (19) puts_statement -> PUTS L_PAREN R_PAREN .

    PRINT           reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    PUTS            reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    LOCAL_VAR       reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    DEF             reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    RETURN          reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    IF              reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    UNTIL           reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    UNLESS          reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    WHILE           reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    $end            reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    END             reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)
    ELSE            reduce using rule 19 (puts_statement -> PUTS L_PAREN R_PAREN .)


state 78

    (24) input_statement -> LOCAL_VAR ASSIGN GETS .
    (25) input_statement -> LOCAL_VAR ASSIGN GETS . DOT CHOMP

    PRINT           reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    PUTS            reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    LOCAL_VAR       reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    DEF             reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    RETURN          reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    IF              reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    UNTIL           reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    UNLESS          reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    WHILE           reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    $end            reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    END             reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    ELSE            reduce using rule 24 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    DOT             shift and go to state 125


state 79

    (13) assignment_statement -> LOCAL_VAR ASSIGN expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    PRINT           reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    PUTS            reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    LOCAL_VAR       reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    DEF             reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    RETURN          reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    IF              reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    UNTIL           reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    UNLESS          reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    WHILE           reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    $end            reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    END             reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    ELSE            reduce using rule 13 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 80

    (34) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN . element_list R_ULTRA_PAREN
    (35) element_list -> . expression
    (36) element_list -> . element_list COMMA expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    element_list                   shift and go to state 126
    expression                     shift and go to state 127
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 81

    (28) hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN . hash_element_list R_MAYUS_PAREN
    (29) hash_element_list -> . hash_element
    (30) hash_element_list -> . hash_element_list COMMA hash_element
    (31) hash_element -> . STRING HASHARROW expression

    STRING          shift and go to state 130

    hash_element_list              shift and go to state 128
    hash_element                   shift and go to state 129

state 82

    (51) function_definition -> DEF LOCAL_VAR parameter_list . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement_list                 shift and go to state 131
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 83

    (52) function_definition -> DEF LOCAL_VAR statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 132
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 27
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 84

    (53) parameter_list -> L_PAREN . parameter_list_inner R_PAREN
    (55) parameter_list_inner -> . LOCAL_VAR
    (56) parameter_list_inner -> . parameter_list_inner COMMA LOCAL_VAR

    LOCAL_VAR       shift and go to state 134

    parameter_list_inner           shift and go to state 133

state 85

    (54) parameter_list -> empty .

    PRINT           reduce using rule 54 (parameter_list -> empty .)
    PUTS            reduce using rule 54 (parameter_list -> empty .)
    LOCAL_VAR       reduce using rule 54 (parameter_list -> empty .)
    DEF             reduce using rule 54 (parameter_list -> empty .)
    RETURN          reduce using rule 54 (parameter_list -> empty .)
    IF              reduce using rule 54 (parameter_list -> empty .)
    UNTIL           reduce using rule 54 (parameter_list -> empty .)
    UNLESS          reduce using rule 54 (parameter_list -> empty .)
    WHILE           reduce using rule 54 (parameter_list -> empty .)


state 86

    (75) expression_group -> L_PAREN expression . R_PAREN
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    R_PAREN         shift and go to state 106
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 87

    (41) if_statement -> IF condition statement_list . END
    (42) if_statement -> IF condition statement_list . ELSE statement_list END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 135
    ELSE            shift and go to state 136
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 27
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 88

    (48) condition -> condition logical_operator . condition
    (47) condition -> . expression comparison_operator expression
    (48) condition -> . condition logical_operator condition
    (49) condition -> . NOT condition
    (50) condition -> . L_PAREN condition R_PAREN
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    condition                      shift and go to state 137
    expression                     shift and go to state 49
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 89

    (32) logical_operator -> AND .

    NOT             reduce using rule 32 (logical_operator -> AND .)
    L_PAREN         reduce using rule 32 (logical_operator -> AND .)
    INTEGER         reduce using rule 32 (logical_operator -> AND .)
    FLOAT           reduce using rule 32 (logical_operator -> AND .)
    STRING          reduce using rule 32 (logical_operator -> AND .)
    LOCAL_VAR       reduce using rule 32 (logical_operator -> AND .)


state 90

    (33) logical_operator -> OR .

    NOT             reduce using rule 33 (logical_operator -> OR .)
    L_PAREN         reduce using rule 33 (logical_operator -> OR .)
    INTEGER         reduce using rule 33 (logical_operator -> OR .)
    FLOAT           reduce using rule 33 (logical_operator -> OR .)
    STRING          reduce using rule 33 (logical_operator -> OR .)
    LOCAL_VAR       reduce using rule 33 (logical_operator -> OR .)


state 91

    (47) condition -> expression comparison_operator . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 138
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 92

    (66) expression_binop -> expression EQUALS . expression
    (87) comparison_operator -> EQUALS .
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             reduce using rule 87 (comparison_operator -> EQUALS .)
    L_PAREN         reduce using rule 87 (comparison_operator -> EQUALS .)
    INTEGER         reduce using rule 87 (comparison_operator -> EQUALS .)
    FLOAT           reduce using rule 87 (comparison_operator -> EQUALS .)
    STRING          reduce using rule 87 (comparison_operator -> EQUALS .)
    LOCAL_VAR       reduce using rule 87 (comparison_operator -> EQUALS .)

  ! NOT             [ shift and go to state 35 ]
  ! L_PAREN         [ shift and go to state 47 ]
  ! INTEGER         [ shift and go to state 36 ]
  ! FLOAT           [ shift and go to state 37 ]
  ! STRING          [ shift and go to state 38 ]
  ! LOCAL_VAR       [ shift and go to state 39 ]

    expression                     shift and go to state 113
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 93

    (67) expression_binop -> expression DIFFERENT . expression
    (88) comparison_operator -> DIFFERENT .
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             reduce using rule 88 (comparison_operator -> DIFFERENT .)
    L_PAREN         reduce using rule 88 (comparison_operator -> DIFFERENT .)
    INTEGER         reduce using rule 88 (comparison_operator -> DIFFERENT .)
    FLOAT           reduce using rule 88 (comparison_operator -> DIFFERENT .)
    STRING          reduce using rule 88 (comparison_operator -> DIFFERENT .)
    LOCAL_VAR       reduce using rule 88 (comparison_operator -> DIFFERENT .)

  ! NOT             [ shift and go to state 35 ]
  ! L_PAREN         [ shift and go to state 47 ]
  ! INTEGER         [ shift and go to state 36 ]
  ! FLOAT           [ shift and go to state 37 ]
  ! STRING          [ shift and go to state 38 ]
  ! LOCAL_VAR       [ shift and go to state 39 ]

    expression                     shift and go to state 114
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 94

    (68) expression_binop -> expression GREATER . expression
    (91) comparison_operator -> GREATER .
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             reduce using rule 91 (comparison_operator -> GREATER .)
    L_PAREN         reduce using rule 91 (comparison_operator -> GREATER .)
    INTEGER         reduce using rule 91 (comparison_operator -> GREATER .)
    FLOAT           reduce using rule 91 (comparison_operator -> GREATER .)
    STRING          reduce using rule 91 (comparison_operator -> GREATER .)
    LOCAL_VAR       reduce using rule 91 (comparison_operator -> GREATER .)

  ! NOT             [ shift and go to state 35 ]
  ! L_PAREN         [ shift and go to state 47 ]
  ! INTEGER         [ shift and go to state 36 ]
  ! FLOAT           [ shift and go to state 37 ]
  ! STRING          [ shift and go to state 38 ]
  ! LOCAL_VAR       [ shift and go to state 39 ]

    expression                     shift and go to state 115
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 95

    (69) expression_binop -> expression LESS . expression
    (89) comparison_operator -> LESS .
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             reduce using rule 89 (comparison_operator -> LESS .)
    L_PAREN         reduce using rule 89 (comparison_operator -> LESS .)
    INTEGER         reduce using rule 89 (comparison_operator -> LESS .)
    FLOAT           reduce using rule 89 (comparison_operator -> LESS .)
    STRING          reduce using rule 89 (comparison_operator -> LESS .)
    LOCAL_VAR       reduce using rule 89 (comparison_operator -> LESS .)

  ! NOT             [ shift and go to state 35 ]
  ! L_PAREN         [ shift and go to state 47 ]
  ! INTEGER         [ shift and go to state 36 ]
  ! FLOAT           [ shift and go to state 37 ]
  ! STRING          [ shift and go to state 38 ]
  ! LOCAL_VAR       [ shift and go to state 39 ]

    expression                     shift and go to state 116
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 96

    (70) expression_binop -> expression GREATER_EQUAL . expression
    (92) comparison_operator -> GREATER_EQUAL .
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             reduce using rule 92 (comparison_operator -> GREATER_EQUAL .)
    L_PAREN         reduce using rule 92 (comparison_operator -> GREATER_EQUAL .)
    INTEGER         reduce using rule 92 (comparison_operator -> GREATER_EQUAL .)
    FLOAT           reduce using rule 92 (comparison_operator -> GREATER_EQUAL .)
    STRING          reduce using rule 92 (comparison_operator -> GREATER_EQUAL .)
    LOCAL_VAR       reduce using rule 92 (comparison_operator -> GREATER_EQUAL .)

  ! NOT             [ shift and go to state 35 ]
  ! L_PAREN         [ shift and go to state 47 ]
  ! INTEGER         [ shift and go to state 36 ]
  ! FLOAT           [ shift and go to state 37 ]
  ! STRING          [ shift and go to state 38 ]
  ! LOCAL_VAR       [ shift and go to state 39 ]

    expression                     shift and go to state 117
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 97

    (71) expression_binop -> expression LESS_EQUAL . expression
    (90) comparison_operator -> LESS_EQUAL .
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             reduce using rule 90 (comparison_operator -> LESS_EQUAL .)
    L_PAREN         reduce using rule 90 (comparison_operator -> LESS_EQUAL .)
    INTEGER         reduce using rule 90 (comparison_operator -> LESS_EQUAL .)
    FLOAT           reduce using rule 90 (comparison_operator -> LESS_EQUAL .)
    STRING          reduce using rule 90 (comparison_operator -> LESS_EQUAL .)
    LOCAL_VAR       reduce using rule 90 (comparison_operator -> LESS_EQUAL .)

  ! NOT             [ shift and go to state 35 ]
  ! L_PAREN         [ shift and go to state 47 ]
  ! INTEGER         [ shift and go to state 36 ]
  ! FLOAT           [ shift and go to state 37 ]
  ! STRING          [ shift and go to state 38 ]
  ! LOCAL_VAR       [ shift and go to state 39 ]

    expression                     shift and go to state 118
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 98

    (49) condition -> NOT condition .
    (48) condition -> condition . logical_operator condition
    (32) logical_operator -> . AND
    (33) logical_operator -> . OR

    PRINT           reduce using rule 49 (condition -> NOT condition .)
    PUTS            reduce using rule 49 (condition -> NOT condition .)
    LOCAL_VAR       reduce using rule 49 (condition -> NOT condition .)
    DEF             reduce using rule 49 (condition -> NOT condition .)
    RETURN          reduce using rule 49 (condition -> NOT condition .)
    IF              reduce using rule 49 (condition -> NOT condition .)
    UNTIL           reduce using rule 49 (condition -> NOT condition .)
    UNLESS          reduce using rule 49 (condition -> NOT condition .)
    WHILE           reduce using rule 49 (condition -> NOT condition .)
    R_PAREN         reduce using rule 49 (condition -> NOT condition .)
    AND             shift and go to state 89
    OR              shift and go to state 90

  ! AND             [ reduce using rule 49 (condition -> NOT condition .) ]
  ! OR              [ reduce using rule 49 (condition -> NOT condition .) ]

    logical_operator               shift and go to state 88

state 99

    (74) expression_not -> NOT expression .
    (47) condition -> expression . comparison_operator expression
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression
    (87) comparison_operator -> . EQUALS
    (88) comparison_operator -> . DIFFERENT
    (89) comparison_operator -> . LESS
    (90) comparison_operator -> . LESS_EQUAL
    (91) comparison_operator -> . GREATER
    (92) comparison_operator -> . GREATER_EQUAL

    R_PAREN         reduce using rule 74 (expression_not -> NOT expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 92
    DIFFERENT       shift and go to state 93
    GREATER         shift and go to state 94
    LESS            shift and go to state 95
    GREATER_EQUAL   shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! PLUS            [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! MINUS           [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! MODULE          [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! DIFFERENT       [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! GREATER         [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! LESS            [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! LESS_EQUAL      [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! AND             [ reduce using rule 74 (expression_not -> NOT expression .) ]
  ! OR              [ reduce using rule 74 (expression_not -> NOT expression .) ]

    comparison_operator            shift and go to state 91

state 100

    (50) condition -> L_PAREN condition . R_PAREN
    (48) condition -> condition . logical_operator condition
    (32) logical_operator -> . AND
    (33) logical_operator -> . OR

    R_PAREN         shift and go to state 139
    AND             shift and go to state 89
    OR              shift and go to state 90

    logical_operator               shift and go to state 88

state 101

    (75) expression_group -> L_PAREN expression . R_PAREN
    (47) condition -> expression . comparison_operator expression
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression
    (87) comparison_operator -> . EQUALS
    (88) comparison_operator -> . DIFFERENT
    (89) comparison_operator -> . LESS
    (90) comparison_operator -> . LESS_EQUAL
    (91) comparison_operator -> . GREATER
    (92) comparison_operator -> . GREATER_EQUAL

    R_PAREN         shift and go to state 106
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 92
    DIFFERENT       shift and go to state 93
    GREATER         shift and go to state 94
    LESS            shift and go to state 95
    GREATER_EQUAL   shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    AND             shift and go to state 70
    OR              shift and go to state 71

    comparison_operator            shift and go to state 91

state 102

    (46) until_statement -> UNTIL condition statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 140
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 27
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 103

    (44) unless_statement -> UNLESS condition statement_list . END
    (45) unless_statement -> UNLESS condition statement_list . ELSE statement_list END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 141
    ELSE            shift and go to state 142
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 27
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 104

    (43) while_statement -> WHILE condition statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 143
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 27
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 105

    (14) print_statement -> PRINT L_PAREN argument_list R_PAREN .

    PRINT           reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    PUTS            reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    LOCAL_VAR       reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    DEF             reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    RETURN          reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    IF              reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    UNTIL           reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    UNLESS          reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    WHILE           reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    $end            reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    END             reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    ELSE            reduce using rule 14 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)


state 106

    (75) expression_group -> L_PAREN expression R_PAREN .

    PLUS            reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    MINUS           reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    MULTIPLY        reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    DIVIDE          reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    MODULE          reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    EQUALS          reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    DIFFERENT       reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    GREATER         reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    LESS            reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    GREATER_EQUAL   reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    LESS_EQUAL      reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    AND             reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    OR              reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    COMMA           reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    PRINT           reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    PUTS            reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    LOCAL_VAR       reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    DEF             reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    RETURN          reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    IF              reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    UNTIL           reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    UNLESS          reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    WHILE           reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    $end            reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    END             reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    ELSE            reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    R_PAREN         reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    R_ULTRA_PAREN   reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)
    R_MAYUS_PAREN   reduce using rule 75 (expression_group -> L_PAREN expression R_PAREN .)


state 107

    (23) argument_list -> argument_list COMMA expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    PRINT           reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    PUTS            reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    LOCAL_VAR       reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    DEF             reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    RETURN          reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    IF              reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    UNTIL           reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    UNLESS          reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    WHILE           reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    $end            reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    END             reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    ELSE            reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    R_PAREN         reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    R_ULTRA_PAREN   reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    R_MAYUS_PAREN   reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! PLUS            [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! MINUS           [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! MODULE          [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! EQUALS          [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! DIFFERENT       [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! GREATER         [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! LESS            [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! LESS_EQUAL      [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! AND             [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]
  ! OR              [ reduce using rule 23 (argument_list -> argument_list COMMA expression .) ]


state 108

    (61) expression_binop -> expression PLUS expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    PLUS            reduce using rule 61 (expression_binop -> expression PLUS expression .)
    MINUS           reduce using rule 61 (expression_binop -> expression PLUS expression .)
    EQUALS          reduce using rule 61 (expression_binop -> expression PLUS expression .)
    DIFFERENT       reduce using rule 61 (expression_binop -> expression PLUS expression .)
    GREATER         reduce using rule 61 (expression_binop -> expression PLUS expression .)
    LESS            reduce using rule 61 (expression_binop -> expression PLUS expression .)
    GREATER_EQUAL   reduce using rule 61 (expression_binop -> expression PLUS expression .)
    LESS_EQUAL      reduce using rule 61 (expression_binop -> expression PLUS expression .)
    AND             reduce using rule 61 (expression_binop -> expression PLUS expression .)
    OR              reduce using rule 61 (expression_binop -> expression PLUS expression .)
    COMMA           reduce using rule 61 (expression_binop -> expression PLUS expression .)
    PRINT           reduce using rule 61 (expression_binop -> expression PLUS expression .)
    PUTS            reduce using rule 61 (expression_binop -> expression PLUS expression .)
    LOCAL_VAR       reduce using rule 61 (expression_binop -> expression PLUS expression .)
    DEF             reduce using rule 61 (expression_binop -> expression PLUS expression .)
    RETURN          reduce using rule 61 (expression_binop -> expression PLUS expression .)
    IF              reduce using rule 61 (expression_binop -> expression PLUS expression .)
    UNTIL           reduce using rule 61 (expression_binop -> expression PLUS expression .)
    UNLESS          reduce using rule 61 (expression_binop -> expression PLUS expression .)
    WHILE           reduce using rule 61 (expression_binop -> expression PLUS expression .)
    $end            reduce using rule 61 (expression_binop -> expression PLUS expression .)
    END             reduce using rule 61 (expression_binop -> expression PLUS expression .)
    ELSE            reduce using rule 61 (expression_binop -> expression PLUS expression .)
    R_PAREN         reduce using rule 61 (expression_binop -> expression PLUS expression .)
    R_ULTRA_PAREN   reduce using rule 61 (expression_binop -> expression PLUS expression .)
    R_MAYUS_PAREN   reduce using rule 61 (expression_binop -> expression PLUS expression .)
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63

  ! MULTIPLY        [ reduce using rule 61 (expression_binop -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression_binop -> expression PLUS expression .) ]
  ! MODULE          [ reduce using rule 61 (expression_binop -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 109

    (62) expression_binop -> expression MINUS expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    PLUS            reduce using rule 62 (expression_binop -> expression MINUS expression .)
    MINUS           reduce using rule 62 (expression_binop -> expression MINUS expression .)
    EQUALS          reduce using rule 62 (expression_binop -> expression MINUS expression .)
    DIFFERENT       reduce using rule 62 (expression_binop -> expression MINUS expression .)
    GREATER         reduce using rule 62 (expression_binop -> expression MINUS expression .)
    LESS            reduce using rule 62 (expression_binop -> expression MINUS expression .)
    GREATER_EQUAL   reduce using rule 62 (expression_binop -> expression MINUS expression .)
    LESS_EQUAL      reduce using rule 62 (expression_binop -> expression MINUS expression .)
    AND             reduce using rule 62 (expression_binop -> expression MINUS expression .)
    OR              reduce using rule 62 (expression_binop -> expression MINUS expression .)
    COMMA           reduce using rule 62 (expression_binop -> expression MINUS expression .)
    PRINT           reduce using rule 62 (expression_binop -> expression MINUS expression .)
    PUTS            reduce using rule 62 (expression_binop -> expression MINUS expression .)
    LOCAL_VAR       reduce using rule 62 (expression_binop -> expression MINUS expression .)
    DEF             reduce using rule 62 (expression_binop -> expression MINUS expression .)
    RETURN          reduce using rule 62 (expression_binop -> expression MINUS expression .)
    IF              reduce using rule 62 (expression_binop -> expression MINUS expression .)
    UNTIL           reduce using rule 62 (expression_binop -> expression MINUS expression .)
    UNLESS          reduce using rule 62 (expression_binop -> expression MINUS expression .)
    WHILE           reduce using rule 62 (expression_binop -> expression MINUS expression .)
    $end            reduce using rule 62 (expression_binop -> expression MINUS expression .)
    END             reduce using rule 62 (expression_binop -> expression MINUS expression .)
    ELSE            reduce using rule 62 (expression_binop -> expression MINUS expression .)
    R_PAREN         reduce using rule 62 (expression_binop -> expression MINUS expression .)
    R_ULTRA_PAREN   reduce using rule 62 (expression_binop -> expression MINUS expression .)
    R_MAYUS_PAREN   reduce using rule 62 (expression_binop -> expression MINUS expression .)
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63

  ! MULTIPLY        [ reduce using rule 62 (expression_binop -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression_binop -> expression MINUS expression .) ]
  ! MODULE          [ reduce using rule 62 (expression_binop -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 110

    (63) expression_binop -> expression MULTIPLY expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    PLUS            reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    MINUS           reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    MODULE          reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    EQUALS          reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    DIFFERENT       reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    GREATER         reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    LESS            reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    GREATER_EQUAL   reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    LESS_EQUAL      reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    AND             reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    OR              reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    COMMA           reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    PRINT           reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    PUTS            reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    LOCAL_VAR       reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    DEF             reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    RETURN          reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    IF              reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    UNTIL           reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    UNLESS          reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    WHILE           reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    $end            reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    END             reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    ELSE            reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    R_PAREN         reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    R_ULTRA_PAREN   reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)
    R_MAYUS_PAREN   reduce using rule 63 (expression_binop -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULTIPLY        [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! MODULE          [ shift and go to state 63 ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 111

    (64) expression_binop -> expression DIVIDE expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    PLUS            reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    MINUS           reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    MODULE          reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    EQUALS          reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    DIFFERENT       reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    GREATER         reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    LESS            reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    GREATER_EQUAL   reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    LESS_EQUAL      reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    AND             reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    OR              reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    COMMA           reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    PRINT           reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    PUTS            reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    LOCAL_VAR       reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    DEF             reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    RETURN          reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    IF              reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    UNTIL           reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    UNLESS          reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    WHILE           reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    $end            reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    END             reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    ELSE            reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    R_PAREN         reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    R_ULTRA_PAREN   reduce using rule 64 (expression_binop -> expression DIVIDE expression .)
    R_MAYUS_PAREN   reduce using rule 64 (expression_binop -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULTIPLY        [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! MODULE          [ shift and go to state 63 ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 112

    (65) expression_binop -> expression MODULE expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    PLUS            reduce using rule 65 (expression_binop -> expression MODULE expression .)
    MINUS           reduce using rule 65 (expression_binop -> expression MODULE expression .)
    MULTIPLY        reduce using rule 65 (expression_binop -> expression MODULE expression .)
    DIVIDE          reduce using rule 65 (expression_binop -> expression MODULE expression .)
    MODULE          reduce using rule 65 (expression_binop -> expression MODULE expression .)
    EQUALS          reduce using rule 65 (expression_binop -> expression MODULE expression .)
    DIFFERENT       reduce using rule 65 (expression_binop -> expression MODULE expression .)
    GREATER         reduce using rule 65 (expression_binop -> expression MODULE expression .)
    LESS            reduce using rule 65 (expression_binop -> expression MODULE expression .)
    GREATER_EQUAL   reduce using rule 65 (expression_binop -> expression MODULE expression .)
    LESS_EQUAL      reduce using rule 65 (expression_binop -> expression MODULE expression .)
    AND             reduce using rule 65 (expression_binop -> expression MODULE expression .)
    OR              reduce using rule 65 (expression_binop -> expression MODULE expression .)
    COMMA           reduce using rule 65 (expression_binop -> expression MODULE expression .)
    PRINT           reduce using rule 65 (expression_binop -> expression MODULE expression .)
    PUTS            reduce using rule 65 (expression_binop -> expression MODULE expression .)
    LOCAL_VAR       reduce using rule 65 (expression_binop -> expression MODULE expression .)
    DEF             reduce using rule 65 (expression_binop -> expression MODULE expression .)
    RETURN          reduce using rule 65 (expression_binop -> expression MODULE expression .)
    IF              reduce using rule 65 (expression_binop -> expression MODULE expression .)
    UNTIL           reduce using rule 65 (expression_binop -> expression MODULE expression .)
    UNLESS          reduce using rule 65 (expression_binop -> expression MODULE expression .)
    WHILE           reduce using rule 65 (expression_binop -> expression MODULE expression .)
    $end            reduce using rule 65 (expression_binop -> expression MODULE expression .)
    END             reduce using rule 65 (expression_binop -> expression MODULE expression .)
    ELSE            reduce using rule 65 (expression_binop -> expression MODULE expression .)
    R_PAREN         reduce using rule 65 (expression_binop -> expression MODULE expression .)
    R_ULTRA_PAREN   reduce using rule 65 (expression_binop -> expression MODULE expression .)
    R_MAYUS_PAREN   reduce using rule 65 (expression_binop -> expression MODULE expression .)

  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULTIPLY        [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! MODULE          [ shift and go to state 63 ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 113

    (66) expression_binop -> expression EQUALS expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    EQUALS          reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    DIFFERENT       reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    GREATER         reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    LESS            reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    GREATER_EQUAL   reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    LESS_EQUAL      reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    AND             reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    OR              reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    COMMA           reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    PRINT           reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    PUTS            reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    LOCAL_VAR       reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    DEF             reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    RETURN          reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    IF              reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    UNTIL           reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    UNLESS          reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    WHILE           reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    $end            reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    END             reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    ELSE            reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    R_PAREN         reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    R_ULTRA_PAREN   reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    R_MAYUS_PAREN   reduce using rule 66 (expression_binop -> expression EQUALS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63

  ! PLUS            [ reduce using rule 66 (expression_binop -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 66 (expression_binop -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 66 (expression_binop -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression_binop -> expression EQUALS expression .) ]
  ! MODULE          [ reduce using rule 66 (expression_binop -> expression EQUALS expression .) ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 114

    (67) expression_binop -> expression DIFFERENT expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    EQUALS          reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    DIFFERENT       reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    GREATER         reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    LESS            reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    GREATER_EQUAL   reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    LESS_EQUAL      reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    AND             reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    OR              reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    COMMA           reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    PRINT           reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    PUTS            reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    LOCAL_VAR       reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    DEF             reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    RETURN          reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    IF              reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    UNTIL           reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    UNLESS          reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    WHILE           reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    $end            reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    END             reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    ELSE            reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    R_PAREN         reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    R_ULTRA_PAREN   reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    R_MAYUS_PAREN   reduce using rule 67 (expression_binop -> expression DIFFERENT expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63

  ! PLUS            [ reduce using rule 67 (expression_binop -> expression DIFFERENT expression .) ]
  ! MINUS           [ reduce using rule 67 (expression_binop -> expression DIFFERENT expression .) ]
  ! MULTIPLY        [ reduce using rule 67 (expression_binop -> expression DIFFERENT expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression_binop -> expression DIFFERENT expression .) ]
  ! MODULE          [ reduce using rule 67 (expression_binop -> expression DIFFERENT expression .) ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 115

    (68) expression_binop -> expression GREATER expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    EQUALS          reduce using rule 68 (expression_binop -> expression GREATER expression .)
    DIFFERENT       reduce using rule 68 (expression_binop -> expression GREATER expression .)
    GREATER         reduce using rule 68 (expression_binop -> expression GREATER expression .)
    LESS            reduce using rule 68 (expression_binop -> expression GREATER expression .)
    GREATER_EQUAL   reduce using rule 68 (expression_binop -> expression GREATER expression .)
    LESS_EQUAL      reduce using rule 68 (expression_binop -> expression GREATER expression .)
    AND             reduce using rule 68 (expression_binop -> expression GREATER expression .)
    OR              reduce using rule 68 (expression_binop -> expression GREATER expression .)
    COMMA           reduce using rule 68 (expression_binop -> expression GREATER expression .)
    PRINT           reduce using rule 68 (expression_binop -> expression GREATER expression .)
    PUTS            reduce using rule 68 (expression_binop -> expression GREATER expression .)
    LOCAL_VAR       reduce using rule 68 (expression_binop -> expression GREATER expression .)
    DEF             reduce using rule 68 (expression_binop -> expression GREATER expression .)
    RETURN          reduce using rule 68 (expression_binop -> expression GREATER expression .)
    IF              reduce using rule 68 (expression_binop -> expression GREATER expression .)
    UNTIL           reduce using rule 68 (expression_binop -> expression GREATER expression .)
    UNLESS          reduce using rule 68 (expression_binop -> expression GREATER expression .)
    WHILE           reduce using rule 68 (expression_binop -> expression GREATER expression .)
    $end            reduce using rule 68 (expression_binop -> expression GREATER expression .)
    END             reduce using rule 68 (expression_binop -> expression GREATER expression .)
    ELSE            reduce using rule 68 (expression_binop -> expression GREATER expression .)
    R_PAREN         reduce using rule 68 (expression_binop -> expression GREATER expression .)
    R_ULTRA_PAREN   reduce using rule 68 (expression_binop -> expression GREATER expression .)
    R_MAYUS_PAREN   reduce using rule 68 (expression_binop -> expression GREATER expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63

  ! PLUS            [ reduce using rule 68 (expression_binop -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 68 (expression_binop -> expression GREATER expression .) ]
  ! MULTIPLY        [ reduce using rule 68 (expression_binop -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression_binop -> expression GREATER expression .) ]
  ! MODULE          [ reduce using rule 68 (expression_binop -> expression GREATER expression .) ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 116

    (69) expression_binop -> expression LESS expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    EQUALS          reduce using rule 69 (expression_binop -> expression LESS expression .)
    DIFFERENT       reduce using rule 69 (expression_binop -> expression LESS expression .)
    GREATER         reduce using rule 69 (expression_binop -> expression LESS expression .)
    LESS            reduce using rule 69 (expression_binop -> expression LESS expression .)
    GREATER_EQUAL   reduce using rule 69 (expression_binop -> expression LESS expression .)
    LESS_EQUAL      reduce using rule 69 (expression_binop -> expression LESS expression .)
    AND             reduce using rule 69 (expression_binop -> expression LESS expression .)
    OR              reduce using rule 69 (expression_binop -> expression LESS expression .)
    COMMA           reduce using rule 69 (expression_binop -> expression LESS expression .)
    PRINT           reduce using rule 69 (expression_binop -> expression LESS expression .)
    PUTS            reduce using rule 69 (expression_binop -> expression LESS expression .)
    LOCAL_VAR       reduce using rule 69 (expression_binop -> expression LESS expression .)
    DEF             reduce using rule 69 (expression_binop -> expression LESS expression .)
    RETURN          reduce using rule 69 (expression_binop -> expression LESS expression .)
    IF              reduce using rule 69 (expression_binop -> expression LESS expression .)
    UNTIL           reduce using rule 69 (expression_binop -> expression LESS expression .)
    UNLESS          reduce using rule 69 (expression_binop -> expression LESS expression .)
    WHILE           reduce using rule 69 (expression_binop -> expression LESS expression .)
    $end            reduce using rule 69 (expression_binop -> expression LESS expression .)
    END             reduce using rule 69 (expression_binop -> expression LESS expression .)
    ELSE            reduce using rule 69 (expression_binop -> expression LESS expression .)
    R_PAREN         reduce using rule 69 (expression_binop -> expression LESS expression .)
    R_ULTRA_PAREN   reduce using rule 69 (expression_binop -> expression LESS expression .)
    R_MAYUS_PAREN   reduce using rule 69 (expression_binop -> expression LESS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63

  ! PLUS            [ reduce using rule 69 (expression_binop -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 69 (expression_binop -> expression LESS expression .) ]
  ! MULTIPLY        [ reduce using rule 69 (expression_binop -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression_binop -> expression LESS expression .) ]
  ! MODULE          [ reduce using rule 69 (expression_binop -> expression LESS expression .) ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 117

    (70) expression_binop -> expression GREATER_EQUAL expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    EQUALS          reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    DIFFERENT       reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    GREATER         reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    LESS            reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    LESS_EQUAL      reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    AND             reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    OR              reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    PRINT           reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    PUTS            reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    LOCAL_VAR       reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    DEF             reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    RETURN          reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    UNTIL           reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    UNLESS          reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    END             reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    R_PAREN         reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    R_ULTRA_PAREN   reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    R_MAYUS_PAREN   reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63

  ! PLUS            [ reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! MODULE          [ reduce using rule 70 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 118

    (71) expression_binop -> expression LESS_EQUAL expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    EQUALS          reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    DIFFERENT       reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    GREATER         reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    LESS            reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    LESS_EQUAL      reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    AND             reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    OR              reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    PRINT           reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    PUTS            reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    LOCAL_VAR       reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    DEF             reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    RETURN          reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    IF              reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    UNTIL           reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    UNLESS          reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    WHILE           reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    $end            reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    END             reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    ELSE            reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    R_PAREN         reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    R_ULTRA_PAREN   reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    R_MAYUS_PAREN   reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63

  ! PLUS            [ reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! MODULE          [ reduce using rule 71 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! EQUALS          [ shift and go to state 64 ]
  ! DIFFERENT       [ shift and go to state 65 ]
  ! GREATER         [ shift and go to state 66 ]
  ! LESS            [ shift and go to state 67 ]
  ! GREATER_EQUAL   [ shift and go to state 68 ]
  ! LESS_EQUAL      [ shift and go to state 69 ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 119

    (72) expression_binop -> expression AND expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    AND             reduce using rule 72 (expression_binop -> expression AND expression .)
    COMMA           reduce using rule 72 (expression_binop -> expression AND expression .)
    PRINT           reduce using rule 72 (expression_binop -> expression AND expression .)
    PUTS            reduce using rule 72 (expression_binop -> expression AND expression .)
    LOCAL_VAR       reduce using rule 72 (expression_binop -> expression AND expression .)
    DEF             reduce using rule 72 (expression_binop -> expression AND expression .)
    RETURN          reduce using rule 72 (expression_binop -> expression AND expression .)
    IF              reduce using rule 72 (expression_binop -> expression AND expression .)
    UNTIL           reduce using rule 72 (expression_binop -> expression AND expression .)
    UNLESS          reduce using rule 72 (expression_binop -> expression AND expression .)
    WHILE           reduce using rule 72 (expression_binop -> expression AND expression .)
    $end            reduce using rule 72 (expression_binop -> expression AND expression .)
    END             reduce using rule 72 (expression_binop -> expression AND expression .)
    ELSE            reduce using rule 72 (expression_binop -> expression AND expression .)
    R_PAREN         reduce using rule 72 (expression_binop -> expression AND expression .)
    R_ULTRA_PAREN   reduce using rule 72 (expression_binop -> expression AND expression .)
    R_MAYUS_PAREN   reduce using rule 72 (expression_binop -> expression AND expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    OR              shift and go to state 71

  ! PLUS            [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! MODULE          [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! DIFFERENT       [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! LESS            [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! LESS_EQUAL      [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! OR              [ reduce using rule 72 (expression_binop -> expression AND expression .) ]
  ! AND             [ shift and go to state 70 ]


state 120

    (73) expression_binop -> expression OR expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    AND             reduce using rule 73 (expression_binop -> expression OR expression .)
    OR              reduce using rule 73 (expression_binop -> expression OR expression .)
    COMMA           reduce using rule 73 (expression_binop -> expression OR expression .)
    PRINT           reduce using rule 73 (expression_binop -> expression OR expression .)
    PUTS            reduce using rule 73 (expression_binop -> expression OR expression .)
    LOCAL_VAR       reduce using rule 73 (expression_binop -> expression OR expression .)
    DEF             reduce using rule 73 (expression_binop -> expression OR expression .)
    RETURN          reduce using rule 73 (expression_binop -> expression OR expression .)
    IF              reduce using rule 73 (expression_binop -> expression OR expression .)
    UNTIL           reduce using rule 73 (expression_binop -> expression OR expression .)
    UNLESS          reduce using rule 73 (expression_binop -> expression OR expression .)
    WHILE           reduce using rule 73 (expression_binop -> expression OR expression .)
    $end            reduce using rule 73 (expression_binop -> expression OR expression .)
    END             reduce using rule 73 (expression_binop -> expression OR expression .)
    ELSE            reduce using rule 73 (expression_binop -> expression OR expression .)
    R_PAREN         reduce using rule 73 (expression_binop -> expression OR expression .)
    R_ULTRA_PAREN   reduce using rule 73 (expression_binop -> expression OR expression .)
    R_MAYUS_PAREN   reduce using rule 73 (expression_binop -> expression OR expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69

  ! PLUS            [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! MODULE          [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! DIFFERENT       [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! LESS            [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! LESS_EQUAL      [ reduce using rule 73 (expression_binop -> expression OR expression .) ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 121

    (86) array_access -> LOCAL_VAR L_ULTRA_PAREN expression . R_ULTRA_PAREN
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    R_ULTRA_PAREN   shift and go to state 144
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 122

    (82) function_call -> LOCAL_VAR L_PAREN argument_list . R_PAREN
    (23) argument_list -> argument_list . COMMA expression

    R_PAREN         shift and go to state 145
    COMMA           shift and go to state 58


state 123

    (83) function_call -> LOCAL_VAR L_PAREN R_PAREN .

    PLUS            reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    MINUS           reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    MULTIPLY        reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    MODULE          reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    EQUALS          reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    DIFFERENT       reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    GREATER         reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    LESS            reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    GREATER_EQUAL   reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    LESS_EQUAL      reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    AND             reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    OR              reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    COMMA           reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    PRINT           reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    PUTS            reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    LOCAL_VAR       reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    DEF             reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    RETURN          reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    IF              reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    UNTIL           reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    UNLESS          reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    WHILE           reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    $end            reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    END             reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    ELSE            reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    R_ULTRA_PAREN   reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    R_MAYUS_PAREN   reduce using rule 83 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)


state 124

    (18) puts_statement -> PUTS L_PAREN argument_list R_PAREN .

    PRINT           reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    PUTS            reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    LOCAL_VAR       reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    DEF             reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    RETURN          reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    IF              reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    UNTIL           reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    UNLESS          reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    WHILE           reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    $end            reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    END             reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    ELSE            reduce using rule 18 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)


state 125

    (25) input_statement -> LOCAL_VAR ASSIGN GETS DOT . CHOMP

    CHOMP           shift and go to state 146


state 126

    (34) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list . R_ULTRA_PAREN
    (36) element_list -> element_list . COMMA expression

    R_ULTRA_PAREN   shift and go to state 147
    COMMA           shift and go to state 148


state 127

    (35) element_list -> expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    R_ULTRA_PAREN   reduce using rule 35 (element_list -> expression .)
    COMMA           reduce using rule 35 (element_list -> expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 128

    (28) hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list . R_MAYUS_PAREN
    (30) hash_element_list -> hash_element_list . COMMA hash_element

    R_MAYUS_PAREN   shift and go to state 149
    COMMA           shift and go to state 150


state 129

    (29) hash_element_list -> hash_element .

    R_MAYUS_PAREN   reduce using rule 29 (hash_element_list -> hash_element .)
    COMMA           reduce using rule 29 (hash_element_list -> hash_element .)


state 130

    (31) hash_element -> STRING . HASHARROW expression

    HASHARROW       shift and go to state 151


state 131

    (51) function_definition -> DEF LOCAL_VAR parameter_list statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 152
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 27
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 132

    (52) function_definition -> DEF LOCAL_VAR statement_list END .

    PRINT           reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    PUTS            reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    LOCAL_VAR       reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    DEF             reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    RETURN          reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    IF              reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    UNTIL           reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    UNLESS          reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    WHILE           reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    $end            reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    END             reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)
    ELSE            reduce using rule 52 (function_definition -> DEF LOCAL_VAR statement_list END .)


state 133

    (53) parameter_list -> L_PAREN parameter_list_inner . R_PAREN
    (56) parameter_list_inner -> parameter_list_inner . COMMA LOCAL_VAR

    R_PAREN         shift and go to state 153
    COMMA           shift and go to state 154


state 134

    (55) parameter_list_inner -> LOCAL_VAR .

    R_PAREN         reduce using rule 55 (parameter_list_inner -> LOCAL_VAR .)
    COMMA           reduce using rule 55 (parameter_list_inner -> LOCAL_VAR .)


state 135

    (41) if_statement -> IF condition statement_list END .

    PRINT           reduce using rule 41 (if_statement -> IF condition statement_list END .)
    PUTS            reduce using rule 41 (if_statement -> IF condition statement_list END .)
    LOCAL_VAR       reduce using rule 41 (if_statement -> IF condition statement_list END .)
    DEF             reduce using rule 41 (if_statement -> IF condition statement_list END .)
    RETURN          reduce using rule 41 (if_statement -> IF condition statement_list END .)
    IF              reduce using rule 41 (if_statement -> IF condition statement_list END .)
    UNTIL           reduce using rule 41 (if_statement -> IF condition statement_list END .)
    UNLESS          reduce using rule 41 (if_statement -> IF condition statement_list END .)
    WHILE           reduce using rule 41 (if_statement -> IF condition statement_list END .)
    $end            reduce using rule 41 (if_statement -> IF condition statement_list END .)
    END             reduce using rule 41 (if_statement -> IF condition statement_list END .)
    ELSE            reduce using rule 41 (if_statement -> IF condition statement_list END .)


state 136

    (42) if_statement -> IF condition statement_list ELSE . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement_list                 shift and go to state 155
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 137

    (48) condition -> condition logical_operator condition .
    (48) condition -> condition . logical_operator condition
    (32) logical_operator -> . AND
    (33) logical_operator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PRINT           reduce using rule 48 (condition -> condition logical_operator condition .)
    PUTS            reduce using rule 48 (condition -> condition logical_operator condition .)
    LOCAL_VAR       reduce using rule 48 (condition -> condition logical_operator condition .)
    DEF             reduce using rule 48 (condition -> condition logical_operator condition .)
    RETURN          reduce using rule 48 (condition -> condition logical_operator condition .)
    IF              reduce using rule 48 (condition -> condition logical_operator condition .)
    UNTIL           reduce using rule 48 (condition -> condition logical_operator condition .)
    UNLESS          reduce using rule 48 (condition -> condition logical_operator condition .)
    WHILE           reduce using rule 48 (condition -> condition logical_operator condition .)
    R_PAREN         reduce using rule 48 (condition -> condition logical_operator condition .)
    AND             shift and go to state 89
    OR              shift and go to state 90

  ! AND             [ reduce using rule 48 (condition -> condition logical_operator condition .) ]
  ! OR              [ reduce using rule 48 (condition -> condition logical_operator condition .) ]

    logical_operator               shift and go to state 88

state 138

    (47) condition -> expression comparison_operator expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PRINT           reduce using rule 47 (condition -> expression comparison_operator expression .)
    PUTS            reduce using rule 47 (condition -> expression comparison_operator expression .)
    LOCAL_VAR       reduce using rule 47 (condition -> expression comparison_operator expression .)
    DEF             reduce using rule 47 (condition -> expression comparison_operator expression .)
    RETURN          reduce using rule 47 (condition -> expression comparison_operator expression .)
    IF              reduce using rule 47 (condition -> expression comparison_operator expression .)
    UNTIL           reduce using rule 47 (condition -> expression comparison_operator expression .)
    UNLESS          reduce using rule 47 (condition -> expression comparison_operator expression .)
    WHILE           reduce using rule 47 (condition -> expression comparison_operator expression .)
    R_PAREN         reduce using rule 47 (condition -> expression comparison_operator expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! AND             [ reduce using rule 47 (condition -> expression comparison_operator expression .) ]
  ! OR              [ reduce using rule 47 (condition -> expression comparison_operator expression .) ]


state 139

    (50) condition -> L_PAREN condition R_PAREN .

    AND             reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    OR              reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    PRINT           reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    PUTS            reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    LOCAL_VAR       reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    DEF             reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    RETURN          reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    IF              reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    UNTIL           reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    UNLESS          reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    WHILE           reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)
    R_PAREN         reduce using rule 50 (condition -> L_PAREN condition R_PAREN .)


state 140

    (46) until_statement -> UNTIL condition statement_list END .

    PRINT           reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    PUTS            reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    LOCAL_VAR       reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    DEF             reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    RETURN          reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    IF              reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    UNTIL           reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    UNLESS          reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    WHILE           reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    $end            reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    END             reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)
    ELSE            reduce using rule 46 (until_statement -> UNTIL condition statement_list END .)


state 141

    (44) unless_statement -> UNLESS condition statement_list END .

    PRINT           reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    PUTS            reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    LOCAL_VAR       reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    DEF             reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    RETURN          reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    IF              reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    UNTIL           reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    UNLESS          reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    WHILE           reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    $end            reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    END             reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)
    ELSE            reduce using rule 44 (unless_statement -> UNLESS condition statement_list END .)


state 142

    (45) unless_statement -> UNLESS condition statement_list ELSE . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement_list                 shift and go to state 156
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 143

    (43) while_statement -> WHILE condition statement_list END .

    PRINT           reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    PUTS            reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    LOCAL_VAR       reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    DEF             reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    RETURN          reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    IF              reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    UNTIL           reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    UNLESS          reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    WHILE           reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    $end            reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    END             reduce using rule 43 (while_statement -> WHILE condition statement_list END .)
    ELSE            reduce using rule 43 (while_statement -> WHILE condition statement_list END .)


state 144

    (86) array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .

    PLUS            reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MINUS           reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MULTIPLY        reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIVIDE          reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MODULE          reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    EQUALS          reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIFFERENT       reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER         reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS            reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER_EQUAL   reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS_EQUAL      reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    AND             reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR              reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    COMMA           reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PRINT           reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PUTS            reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DEF             reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    RETURN          reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    IF              reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNTIL           reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNLESS          reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    WHILE           reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    $end            reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    END             reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSE            reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_PAREN         reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_ULTRA_PAREN   reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_MAYUS_PAREN   reduce using rule 86 (array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)


state 145

    (82) function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .

    PLUS            reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    MINUS           reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    MULTIPLY        reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    DIVIDE          reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    MODULE          reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    EQUALS          reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    DIFFERENT       reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    GREATER         reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    LESS            reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    GREATER_EQUAL   reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    LESS_EQUAL      reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    AND             reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    OR              reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    COMMA           reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    PRINT           reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    PUTS            reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    LOCAL_VAR       reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    DEF             reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    RETURN          reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    IF              reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    UNTIL           reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    UNLESS          reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    WHILE           reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    $end            reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    END             reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    ELSE            reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    R_PAREN         reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    R_ULTRA_PAREN   reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    R_MAYUS_PAREN   reduce using rule 82 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)


state 146

    (25) input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .

    PRINT           reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    PUTS            reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    LOCAL_VAR       reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    DEF             reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    RETURN          reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    IF              reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    UNTIL           reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    UNLESS          reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    WHILE           reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    $end            reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    END             reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    ELSE            reduce using rule 25 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)


state 147

    (34) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .

    PRINT           reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    PUTS            reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    DEF             reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    RETURN          reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    IF              reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNTIL           reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNLESS          reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    WHILE           reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    $end            reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    END             reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    ELSE            reduce using rule 34 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)


state 148

    (36) element_list -> element_list COMMA . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 157
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 149

    (28) hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .

    PRINT           reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    PUTS            reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    LOCAL_VAR       reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    DEF             reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    RETURN          reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    IF              reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    UNTIL           reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    UNLESS          reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    WHILE           reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    $end            reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    END             reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    ELSE            reduce using rule 28 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)


state 150

    (30) hash_element_list -> hash_element_list COMMA . hash_element
    (31) hash_element -> . STRING HASHARROW expression

    STRING          shift and go to state 130

    hash_element                   shift and go to state 158

state 151

    (31) hash_element -> STRING HASHARROW . expression
    (57) expression -> . expression_binop
    (58) expression -> . expression_not
    (59) expression -> . expression_group
    (60) expression -> . expression_term
    (61) expression_binop -> . expression PLUS expression
    (62) expression_binop -> . expression MINUS expression
    (63) expression_binop -> . expression MULTIPLY expression
    (64) expression_binop -> . expression DIVIDE expression
    (65) expression_binop -> . expression MODULE expression
    (66) expression_binop -> . expression EQUALS expression
    (67) expression_binop -> . expression DIFFERENT expression
    (68) expression_binop -> . expression GREATER expression
    (69) expression_binop -> . expression LESS expression
    (70) expression_binop -> . expression GREATER_EQUAL expression
    (71) expression_binop -> . expression LESS_EQUAL expression
    (72) expression_binop -> . expression AND expression
    (73) expression_binop -> . expression OR expression
    (74) expression_not -> . NOT expression
    (75) expression_group -> . L_PAREN expression R_PAREN
    (76) expression_term -> . INTEGER
    (77) expression_term -> . FLOAT
    (78) expression_term -> . STRING
    (79) expression_term -> . LOCAL_VAR
    (80) expression_term -> . array_access
    (81) expression_term -> . function_call
    (86) array_access -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (82) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (83) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (84) function_call -> . LOCAL_VAR argument_list
    (85) function_call -> . LOCAL_VAR

    NOT             shift and go to state 35
    L_PAREN         shift and go to state 47
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    STRING          shift and go to state 38
    LOCAL_VAR       shift and go to state 39

    expression                     shift and go to state 159
    expression_binop               shift and go to state 31
    expression_not                 shift and go to state 32
    expression_group               shift and go to state 33
    expression_term                shift and go to state 34
    array_access                   shift and go to state 40
    function_call                  shift and go to state 41

state 152

    (51) function_definition -> DEF LOCAL_VAR parameter_list statement_list END .

    PRINT           reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    PUTS            reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    LOCAL_VAR       reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    DEF             reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    RETURN          reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    IF              reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    UNTIL           reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    UNLESS          reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    WHILE           reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    $end            reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    END             reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    ELSE            reduce using rule 51 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)


state 153

    (53) parameter_list -> L_PAREN parameter_list_inner R_PAREN .

    PRINT           reduce using rule 53 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    PUTS            reduce using rule 53 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    LOCAL_VAR       reduce using rule 53 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    DEF             reduce using rule 53 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    RETURN          reduce using rule 53 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    IF              reduce using rule 53 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    UNTIL           reduce using rule 53 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    UNLESS          reduce using rule 53 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    WHILE           reduce using rule 53 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)


state 154

    (56) parameter_list_inner -> parameter_list_inner COMMA . LOCAL_VAR

    LOCAL_VAR       shift and go to state 160


state 155

    (42) if_statement -> IF condition statement_list ELSE statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 161
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 27
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 156

    (45) unless_statement -> UNLESS condition statement_list ELSE statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (14) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (15) print_statement -> . PRINT L_PAREN R_PAREN
    (16) print_statement -> . PRINT argument_list
    (17) print_statement -> . PRINT
    (18) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (19) puts_statement -> . PUTS L_PAREN R_PAREN
    (20) puts_statement -> . PUTS argument_list
    (21) puts_statement -> . PUTS
    (24) input_statement -> . LOCAL_VAR ASSIGN GETS
    (25) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (13) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (26) data_structure -> . array_definition
    (27) data_structure -> . hash_definition
    (37) control_structure -> . if_statement
    (38) control_structure -> . until_statement
    (39) control_structure -> . unless_statement
    (40) control_structure -> . while_statement
    (51) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (52) function_definition -> . DEF LOCAL_VAR statement_list END
    (12) return_statement -> . RETURN expression
    (34) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (28) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (41) if_statement -> . IF condition statement_list END
    (42) if_statement -> . IF condition statement_list ELSE statement_list END
    (46) until_statement -> . UNTIL condition statement_list END
    (44) unless_statement -> . UNLESS condition statement_list END
    (45) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (43) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 162
    PRINT           shift and go to state 12
    PUTS            shift and go to state 13
    LOCAL_VAR       shift and go to state 14
    DEF             shift and go to state 21
    RETURN          shift and go to state 22
    IF              shift and go to state 23
    UNTIL           shift and go to state 24
    UNLESS          shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 27
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    array_definition               shift and go to state 15
    hash_definition                shift and go to state 16
    if_statement                   shift and go to state 17
    until_statement                shift and go to state 18
    unless_statement               shift and go to state 19
    while_statement                shift and go to state 20

state 157

    (36) element_list -> element_list COMMA expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    R_ULTRA_PAREN   reduce using rule 36 (element_list -> element_list COMMA expression .)
    COMMA           reduce using rule 36 (element_list -> element_list COMMA expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 158

    (30) hash_element_list -> hash_element_list COMMA hash_element .

    R_MAYUS_PAREN   reduce using rule 30 (hash_element_list -> hash_element_list COMMA hash_element .)
    COMMA           reduce using rule 30 (hash_element_list -> hash_element_list COMMA hash_element .)


state 159

    (31) hash_element -> STRING HASHARROW expression .
    (61) expression_binop -> expression . PLUS expression
    (62) expression_binop -> expression . MINUS expression
    (63) expression_binop -> expression . MULTIPLY expression
    (64) expression_binop -> expression . DIVIDE expression
    (65) expression_binop -> expression . MODULE expression
    (66) expression_binop -> expression . EQUALS expression
    (67) expression_binop -> expression . DIFFERENT expression
    (68) expression_binop -> expression . GREATER expression
    (69) expression_binop -> expression . LESS expression
    (70) expression_binop -> expression . GREATER_EQUAL expression
    (71) expression_binop -> expression . LESS_EQUAL expression
    (72) expression_binop -> expression . AND expression
    (73) expression_binop -> expression . OR expression

    R_MAYUS_PAREN   reduce using rule 31 (hash_element -> STRING HASHARROW expression .)
    COMMA           reduce using rule 31 (hash_element -> STRING HASHARROW expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    MULTIPLY        shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULE          shift and go to state 63
    EQUALS          shift and go to state 64
    DIFFERENT       shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATER_EQUAL   shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71


state 160

    (56) parameter_list_inner -> parameter_list_inner COMMA LOCAL_VAR .

    R_PAREN         reduce using rule 56 (parameter_list_inner -> parameter_list_inner COMMA LOCAL_VAR .)
    COMMA           reduce using rule 56 (parameter_list_inner -> parameter_list_inner COMMA LOCAL_VAR .)


state 161

    (42) if_statement -> IF condition statement_list ELSE statement_list END .

    PRINT           reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    PUTS            reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    LOCAL_VAR       reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    DEF             reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    RETURN          reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    IF              reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    UNTIL           reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    UNLESS          reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    WHILE           reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    $end            reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    END             reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)
    ELSE            reduce using rule 42 (if_statement -> IF condition statement_list ELSE statement_list END .)


state 162

    (45) unless_statement -> UNLESS condition statement_list ELSE statement_list END .

    PRINT           reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    PUTS            reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    LOCAL_VAR       reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    DEF             reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    RETURN          reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    IF              reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    UNTIL           reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    UNLESS          reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    WHILE           reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    $end            reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    END             reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    ELSE            reduce using rule 45 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LOCAL_VAR in state 12 resolved as shift
WARNING: shift/reduce conflict for LOCAL_VAR in state 13 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 30 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 30 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 30 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 30 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 30 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 30 resolved as shift
WARNING: shift/reduce conflict for LESS in state 30 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 30 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 30 resolved as shift
WARNING: shift/reduce conflict for AND in state 30 resolved as shift
WARNING: shift/reduce conflict for OR in state 30 resolved as shift
WARNING: shift/reduce conflict for LOCAL_VAR in state 39 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 45 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 45 resolved as shift
WARNING: shift/reduce conflict for LOCAL_VAR in state 45 resolved as shift
WARNING: shift/reduce conflict for DEF in state 45 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 45 resolved as shift
WARNING: shift/reduce conflict for UNLESS in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for R_PAREN in state 57 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: reduce/reduce conflict in state 39 resolved using rule (expression_term -> LOCAL_VAR)
WARNING: rejected rule (function_call -> LOCAL_VAR) in state 39
WARNING: Rule (function_call -> LOCAL_VAR) is never reduced
