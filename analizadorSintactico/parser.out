Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BEGIN
    NIL
    THEN
    WHEN

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> print_statement
Rule 5     statement -> puts_statement
Rule 6     statement -> input_statement
Rule 7     statement -> assignment_statement
Rule 8     statement -> data_structure
Rule 9     statement -> control_structure
Rule 10    statement -> function_definition
Rule 11    statement -> return_statement
Rule 12    statement -> class_definition
Rule 13    statement -> method_call
Rule 14    statement -> array_append
Rule 15    statement -> indexing
Rule 16    statement -> array_assignament
Rule 17    class_definition -> CLASS CONSTANT class_body END
Rule 18    class_body -> statement_list
Rule 19    class_statement -> function_definition
Rule 20    class_statement -> assignment_statement
Rule 21    return_statement -> RETURN expression
Rule 22    assignment_statement -> LOCAL_VAR ASSIGN expression
Rule 23    assignment_statement -> GLOBAL_VAR ASSIGN expression
Rule 24    assignment_statement -> INSTANCE_VAR ASSIGN expression
Rule 25    assignment_statement -> CLASS_VAR ASSIGN expression
Rule 26    print_statement -> PRINT L_PAREN argument_list R_PAREN
Rule 27    print_statement -> PRINT L_PAREN R_PAREN
Rule 28    print_statement -> PRINT argument_list
Rule 29    print_statement -> PRINT
Rule 30    puts_statement -> PUTS L_PAREN argument_list R_PAREN
Rule 31    puts_statement -> PUTS L_PAREN R_PAREN
Rule 32    puts_statement -> PUTS argument_list
Rule 33    puts_statement -> PUTS
Rule 34    argument_list -> expression
Rule 35    argument_list -> argument_list COMMA expression
Rule 36    input_statement -> LOCAL_VAR ASSIGN GETS
Rule 37    input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP
Rule 38    data_structure -> array_definition
Rule 39    data_structure -> hash_definition
Rule 40    hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
Rule 41    hash_element_list -> hash_element
Rule 42    hash_element_list -> hash_element_list COMMA hash_element
Rule 43    hash_element -> STRING HASHARROW expression
Rule 44    hash_element -> LOCAL_VAR TWO_POINTS expression
Rule 45    logical_operator -> AND
Rule 46    logical_operator -> OR
Rule 47    logical_operator -> OR_OPERATOR
Rule 48    array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
Rule 49    array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
Rule 50    array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
Rule 51    array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
Rule 52    array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
Rule 53    array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
Rule 54    array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
Rule 55    array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
Rule 56    array_append -> LOCAL_VAR APPEND expression
Rule 57    array_append -> GLOBAL_VAR APPEND expression
Rule 58    array_append -> INSTANCE_VAR APPEND expression
Rule 59    array_append -> CLASS_VAR APPEND expression
Rule 60    element_list -> expression
Rule 61    element_list -> element_list COMMA expression
Rule 62    control_structure -> if_statement
Rule 63    control_structure -> until_statement
Rule 64    control_structure -> unless_statement
Rule 65    control_structure -> while_statement
Rule 66    if_statement -> IF condition statement_list END
Rule 67    if_statement -> IF condition statement_list ELSE statement_list END
Rule 68    if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END
Rule 69    while_statement -> WHILE condition statement_list END
Rule 70    unless_statement -> UNLESS condition statement_list END
Rule 71    unless_statement -> UNLESS condition statement_list ELSE statement_list END
Rule 72    until_statement -> UNTIL condition statement_list END
Rule 73    condition -> expression comparison_operator expression
Rule 74    condition -> condition logical_operator condition
Rule 75    condition -> NOT condition
Rule 76    condition -> L_PAREN condition R_PAREN
Rule 77    function_definition -> DEF LOCAL_VAR parameter_list statement_list END
Rule 78    function_definition -> DEF LOCAL_VAR statement_list END
Rule 79    parameter_list -> L_PAREN parameter_list_inner R_PAREN
Rule 80    parameter_list -> L_PAREN R_PAREN
Rule 81    parameter_list_inner -> LOCAL_VAR
Rule 82    parameter_list_inner -> parameter_list_inner COMMA LOCAL_VAR
Rule 83    expression -> expression_binop
Rule 84    expression -> expression_not
Rule 85    expression -> expression_group
Rule 86    expression -> expression_term
Rule 87    expression -> indexing
Rule 88    expression -> method_call
Rule 89    expression_binop -> expression PLUS expression
Rule 90    expression_binop -> expression MINUS expression
Rule 91    expression_binop -> expression MULTIPLY expression
Rule 92    expression_binop -> expression DIVIDE expression
Rule 93    expression_binop -> expression MODULE expression
Rule 94    expression_binop -> expression EQUALS expression
Rule 95    expression_binop -> expression DIFFERENT expression
Rule 96    expression_binop -> expression GREATER expression
Rule 97    expression_binop -> expression LESS expression
Rule 98    expression_binop -> expression GREATER_EQUAL expression
Rule 99    expression_binop -> expression LESS_EQUAL expression
Rule 100   expression_binop -> expression AND expression
Rule 101   expression_binop -> expression OR expression
Rule 102   expression_binop -> expression OR_OPERATOR expression
Rule 103   expression_binop -> expression GREATER_EQUAL method_call
Rule 104   expression_binop -> expression LESS_EQUAL method_call
Rule 105   expression_binop -> expression GREATER method_call
Rule 106   expression_binop -> expression LESS method_call
Rule 107   expression_binop -> expression EQUALS method_call
Rule 108   expression_not -> NOT expression
Rule 109   expression_group -> L_PAREN expression R_PAREN
Rule 110   expression_term -> INTEGER
Rule 111   expression_term -> FLOAT
Rule 112   expression_term -> STRING
Rule 113   expression_term -> LOCAL_VAR
Rule 114   expression_term -> indexing
Rule 115   expression_term -> function_call
Rule 116   function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN
Rule 117   function_call -> LOCAL_VAR L_PAREN R_PAREN
Rule 118   function_call -> LOCAL_VAR argument_list
Rule 119   function_call -> LOCAL_VAR
Rule 120   method_call -> LOCAL_VAR DOT function_call
Rule 121   method_call -> GLOBAL_VAR DOT function_call
Rule 122   method_call -> INSTANCE_VAR DOT function_call
Rule 123   method_call -> CLASS_VAR DOT function_call
Rule 124   method_call -> CONSTANT DOT function_call
Rule 125   indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
Rule 126   indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
Rule 127   indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
Rule 128   indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
Rule 129   indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
Rule 130   indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
Rule 131   indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
Rule 132   array_assignament -> indexing ASSIGN expression
Rule 133   comparison_operator -> EQUALS
Rule 134   comparison_operator -> DIFFERENT
Rule 135   comparison_operator -> LESS
Rule 136   comparison_operator -> LESS_EQUAL
Rule 137   comparison_operator -> GREATER
Rule 138   comparison_operator -> GREATER_EQUAL
Rule 139   empty -> <empty>

Terminals, with rules where they appear

AND                  : 45 100
APPEND               : 56 57 58 59
ASSIGN               : 22 23 24 25 36 37 40 48 49 50 51 52 53 54 55 132
BEGIN                : 
CHOMP                : 37
CLASS                : 17
CLASS_VAR            : 25 54 55 59 123 128
COMMA                : 35 42 61 82
CONSTANT             : 17 124
DEF                  : 77 78
DIFFERENT            : 95 134
DIVIDE               : 92
DOT                  : 37 120 121 122 123 124
ELSE                 : 67 68 71
ELSIF                : 68
END                  : 17 66 67 68 69 70 71 72 77 78
EQUALS               : 94 107 133
FLOAT                : 111
GETS                 : 36 37
GLOBAL_VAR           : 23 50 51 57 121 126
GREATER              : 96 105 137
GREATER_EQUAL        : 98 103 138
HASHARROW            : 43
IF                   : 66 67 68
INSTANCE_VAR         : 24 52 53 58 122 127
INTEGER              : 110
LESS                 : 97 106 135
LESS_EQUAL           : 99 104 136
LOCAL_VAR            : 22 36 37 40 44 48 49 56 77 78 81 82 113 116 117 118 119 120 125 129 131
L_MAYUS_PAREN        : 40
L_PAREN              : 26 27 30 31 76 79 80 109 116 117
L_ULTRA_PAREN        : 48 49 50 51 52 53 54 55 125 126 127 128 129 130 131
MINUS                : 90
MODULE               : 93
MULTIPLY             : 91
NIL                  : 
NOT                  : 75 108
OR                   : 46 101
OR_OPERATOR          : 47 102
PLUS                 : 89
PRINT                : 26 27 28 29
PUTS                 : 30 31 32 33
RETURN               : 21
R_MAYUS_PAREN        : 40
R_PAREN              : 26 27 30 31 76 79 80 109 116 117
R_ULTRA_PAREN        : 48 49 50 51 52 53 54 55 125 126 127 128 129 130 131
STRING               : 43 112
THEN                 : 
TWO_POINTS           : 44 129 131
UNLESS               : 70 71
UNTIL                : 72
WHEN                 : 
WHILE                : 69
error                : 

Nonterminals, with rules where they appear

argument_list        : 26 28 30 32 35 116 118
array_append         : 14
array_assignament    : 16
array_definition     : 38
assignment_statement : 7 20
class_body           : 17
class_definition     : 12
class_statement      : 
comparison_operator  : 73
condition            : 66 67 68 68 69 70 71 72 74 74 75 76
control_structure    : 9
data_structure       : 8
element_list         : 48 50 52 54 61
empty                : 
expression           : 21 22 23 24 25 34 35 43 44 56 57 58 59 60 61 73 73 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 104 105 106 107 108 109 125 126 127 128 130 132
expression_binop     : 83
expression_group     : 85
expression_not       : 84
expression_term      : 86
function_call        : 115 120 121 122 123 124
function_definition  : 10 19
hash_definition      : 39
hash_element         : 41 42
hash_element_list    : 40 42
if_statement         : 62
indexing             : 15 87 114 130 131 132
input_statement      : 6
logical_operator     : 74
method_call          : 13 88 103 104 105 106 107
parameter_list       : 77
parameter_list_inner : 79 82
print_statement      : 4
program              : 0
puts_statement       : 5
return_statement     : 11
statement            : 2 3
statement_list       : 1 3 18 66 67 67 68 68 68 69 70 71 71 72 77 78
unless_statement     : 64
until_statement      : 63
while_statement      : 65

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    $end            reduce using rule 1 (program -> statement_list .)
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 3

    (2) statement_list -> statement .

    PRINT           reduce using rule 2 (statement_list -> statement .)
    PUTS            reduce using rule 2 (statement_list -> statement .)
    LOCAL_VAR       reduce using rule 2 (statement_list -> statement .)
    GLOBAL_VAR      reduce using rule 2 (statement_list -> statement .)
    INSTANCE_VAR    reduce using rule 2 (statement_list -> statement .)
    CLASS_VAR       reduce using rule 2 (statement_list -> statement .)
    DEF             reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    CLASS           reduce using rule 2 (statement_list -> statement .)
    CONSTANT        reduce using rule 2 (statement_list -> statement .)
    L_ULTRA_PAREN   reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    UNTIL           reduce using rule 2 (statement_list -> statement .)
    UNLESS          reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    END             reduce using rule 2 (statement_list -> statement .)
    ELSE            reduce using rule 2 (statement_list -> statement .)
    ELSIF           reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> print_statement .

    PRINT           reduce using rule 4 (statement -> print_statement .)
    PUTS            reduce using rule 4 (statement -> print_statement .)
    LOCAL_VAR       reduce using rule 4 (statement -> print_statement .)
    GLOBAL_VAR      reduce using rule 4 (statement -> print_statement .)
    INSTANCE_VAR    reduce using rule 4 (statement -> print_statement .)
    CLASS_VAR       reduce using rule 4 (statement -> print_statement .)
    DEF             reduce using rule 4 (statement -> print_statement .)
    RETURN          reduce using rule 4 (statement -> print_statement .)
    CLASS           reduce using rule 4 (statement -> print_statement .)
    CONSTANT        reduce using rule 4 (statement -> print_statement .)
    L_ULTRA_PAREN   reduce using rule 4 (statement -> print_statement .)
    IF              reduce using rule 4 (statement -> print_statement .)
    UNTIL           reduce using rule 4 (statement -> print_statement .)
    UNLESS          reduce using rule 4 (statement -> print_statement .)
    WHILE           reduce using rule 4 (statement -> print_statement .)
    $end            reduce using rule 4 (statement -> print_statement .)
    END             reduce using rule 4 (statement -> print_statement .)
    ELSE            reduce using rule 4 (statement -> print_statement .)
    ELSIF           reduce using rule 4 (statement -> print_statement .)


state 5

    (5) statement -> puts_statement .

    PRINT           reduce using rule 5 (statement -> puts_statement .)
    PUTS            reduce using rule 5 (statement -> puts_statement .)
    LOCAL_VAR       reduce using rule 5 (statement -> puts_statement .)
    GLOBAL_VAR      reduce using rule 5 (statement -> puts_statement .)
    INSTANCE_VAR    reduce using rule 5 (statement -> puts_statement .)
    CLASS_VAR       reduce using rule 5 (statement -> puts_statement .)
    DEF             reduce using rule 5 (statement -> puts_statement .)
    RETURN          reduce using rule 5 (statement -> puts_statement .)
    CLASS           reduce using rule 5 (statement -> puts_statement .)
    CONSTANT        reduce using rule 5 (statement -> puts_statement .)
    L_ULTRA_PAREN   reduce using rule 5 (statement -> puts_statement .)
    IF              reduce using rule 5 (statement -> puts_statement .)
    UNTIL           reduce using rule 5 (statement -> puts_statement .)
    UNLESS          reduce using rule 5 (statement -> puts_statement .)
    WHILE           reduce using rule 5 (statement -> puts_statement .)
    $end            reduce using rule 5 (statement -> puts_statement .)
    END             reduce using rule 5 (statement -> puts_statement .)
    ELSE            reduce using rule 5 (statement -> puts_statement .)
    ELSIF           reduce using rule 5 (statement -> puts_statement .)


state 6

    (6) statement -> input_statement .

    PRINT           reduce using rule 6 (statement -> input_statement .)
    PUTS            reduce using rule 6 (statement -> input_statement .)
    LOCAL_VAR       reduce using rule 6 (statement -> input_statement .)
    GLOBAL_VAR      reduce using rule 6 (statement -> input_statement .)
    INSTANCE_VAR    reduce using rule 6 (statement -> input_statement .)
    CLASS_VAR       reduce using rule 6 (statement -> input_statement .)
    DEF             reduce using rule 6 (statement -> input_statement .)
    RETURN          reduce using rule 6 (statement -> input_statement .)
    CLASS           reduce using rule 6 (statement -> input_statement .)
    CONSTANT        reduce using rule 6 (statement -> input_statement .)
    L_ULTRA_PAREN   reduce using rule 6 (statement -> input_statement .)
    IF              reduce using rule 6 (statement -> input_statement .)
    UNTIL           reduce using rule 6 (statement -> input_statement .)
    UNLESS          reduce using rule 6 (statement -> input_statement .)
    WHILE           reduce using rule 6 (statement -> input_statement .)
    $end            reduce using rule 6 (statement -> input_statement .)
    END             reduce using rule 6 (statement -> input_statement .)
    ELSE            reduce using rule 6 (statement -> input_statement .)
    ELSIF           reduce using rule 6 (statement -> input_statement .)


state 7

    (7) statement -> assignment_statement .

    PRINT           reduce using rule 7 (statement -> assignment_statement .)
    PUTS            reduce using rule 7 (statement -> assignment_statement .)
    LOCAL_VAR       reduce using rule 7 (statement -> assignment_statement .)
    GLOBAL_VAR      reduce using rule 7 (statement -> assignment_statement .)
    INSTANCE_VAR    reduce using rule 7 (statement -> assignment_statement .)
    CLASS_VAR       reduce using rule 7 (statement -> assignment_statement .)
    DEF             reduce using rule 7 (statement -> assignment_statement .)
    RETURN          reduce using rule 7 (statement -> assignment_statement .)
    CLASS           reduce using rule 7 (statement -> assignment_statement .)
    CONSTANT        reduce using rule 7 (statement -> assignment_statement .)
    L_ULTRA_PAREN   reduce using rule 7 (statement -> assignment_statement .)
    IF              reduce using rule 7 (statement -> assignment_statement .)
    UNTIL           reduce using rule 7 (statement -> assignment_statement .)
    UNLESS          reduce using rule 7 (statement -> assignment_statement .)
    WHILE           reduce using rule 7 (statement -> assignment_statement .)
    $end            reduce using rule 7 (statement -> assignment_statement .)
    END             reduce using rule 7 (statement -> assignment_statement .)
    ELSE            reduce using rule 7 (statement -> assignment_statement .)
    ELSIF           reduce using rule 7 (statement -> assignment_statement .)


state 8

    (8) statement -> data_structure .

    PRINT           reduce using rule 8 (statement -> data_structure .)
    PUTS            reduce using rule 8 (statement -> data_structure .)
    LOCAL_VAR       reduce using rule 8 (statement -> data_structure .)
    GLOBAL_VAR      reduce using rule 8 (statement -> data_structure .)
    INSTANCE_VAR    reduce using rule 8 (statement -> data_structure .)
    CLASS_VAR       reduce using rule 8 (statement -> data_structure .)
    DEF             reduce using rule 8 (statement -> data_structure .)
    RETURN          reduce using rule 8 (statement -> data_structure .)
    CLASS           reduce using rule 8 (statement -> data_structure .)
    CONSTANT        reduce using rule 8 (statement -> data_structure .)
    L_ULTRA_PAREN   reduce using rule 8 (statement -> data_structure .)
    IF              reduce using rule 8 (statement -> data_structure .)
    UNTIL           reduce using rule 8 (statement -> data_structure .)
    UNLESS          reduce using rule 8 (statement -> data_structure .)
    WHILE           reduce using rule 8 (statement -> data_structure .)
    $end            reduce using rule 8 (statement -> data_structure .)
    END             reduce using rule 8 (statement -> data_structure .)
    ELSE            reduce using rule 8 (statement -> data_structure .)
    ELSIF           reduce using rule 8 (statement -> data_structure .)


state 9

    (9) statement -> control_structure .

    PRINT           reduce using rule 9 (statement -> control_structure .)
    PUTS            reduce using rule 9 (statement -> control_structure .)
    LOCAL_VAR       reduce using rule 9 (statement -> control_structure .)
    GLOBAL_VAR      reduce using rule 9 (statement -> control_structure .)
    INSTANCE_VAR    reduce using rule 9 (statement -> control_structure .)
    CLASS_VAR       reduce using rule 9 (statement -> control_structure .)
    DEF             reduce using rule 9 (statement -> control_structure .)
    RETURN          reduce using rule 9 (statement -> control_structure .)
    CLASS           reduce using rule 9 (statement -> control_structure .)
    CONSTANT        reduce using rule 9 (statement -> control_structure .)
    L_ULTRA_PAREN   reduce using rule 9 (statement -> control_structure .)
    IF              reduce using rule 9 (statement -> control_structure .)
    UNTIL           reduce using rule 9 (statement -> control_structure .)
    UNLESS          reduce using rule 9 (statement -> control_structure .)
    WHILE           reduce using rule 9 (statement -> control_structure .)
    $end            reduce using rule 9 (statement -> control_structure .)
    END             reduce using rule 9 (statement -> control_structure .)
    ELSE            reduce using rule 9 (statement -> control_structure .)
    ELSIF           reduce using rule 9 (statement -> control_structure .)


state 10

    (10) statement -> function_definition .

    PRINT           reduce using rule 10 (statement -> function_definition .)
    PUTS            reduce using rule 10 (statement -> function_definition .)
    LOCAL_VAR       reduce using rule 10 (statement -> function_definition .)
    GLOBAL_VAR      reduce using rule 10 (statement -> function_definition .)
    INSTANCE_VAR    reduce using rule 10 (statement -> function_definition .)
    CLASS_VAR       reduce using rule 10 (statement -> function_definition .)
    DEF             reduce using rule 10 (statement -> function_definition .)
    RETURN          reduce using rule 10 (statement -> function_definition .)
    CLASS           reduce using rule 10 (statement -> function_definition .)
    CONSTANT        reduce using rule 10 (statement -> function_definition .)
    L_ULTRA_PAREN   reduce using rule 10 (statement -> function_definition .)
    IF              reduce using rule 10 (statement -> function_definition .)
    UNTIL           reduce using rule 10 (statement -> function_definition .)
    UNLESS          reduce using rule 10 (statement -> function_definition .)
    WHILE           reduce using rule 10 (statement -> function_definition .)
    $end            reduce using rule 10 (statement -> function_definition .)
    END             reduce using rule 10 (statement -> function_definition .)
    ELSE            reduce using rule 10 (statement -> function_definition .)
    ELSIF           reduce using rule 10 (statement -> function_definition .)


state 11

    (11) statement -> return_statement .

    PRINT           reduce using rule 11 (statement -> return_statement .)
    PUTS            reduce using rule 11 (statement -> return_statement .)
    LOCAL_VAR       reduce using rule 11 (statement -> return_statement .)
    GLOBAL_VAR      reduce using rule 11 (statement -> return_statement .)
    INSTANCE_VAR    reduce using rule 11 (statement -> return_statement .)
    CLASS_VAR       reduce using rule 11 (statement -> return_statement .)
    DEF             reduce using rule 11 (statement -> return_statement .)
    RETURN          reduce using rule 11 (statement -> return_statement .)
    CLASS           reduce using rule 11 (statement -> return_statement .)
    CONSTANT        reduce using rule 11 (statement -> return_statement .)
    L_ULTRA_PAREN   reduce using rule 11 (statement -> return_statement .)
    IF              reduce using rule 11 (statement -> return_statement .)
    UNTIL           reduce using rule 11 (statement -> return_statement .)
    UNLESS          reduce using rule 11 (statement -> return_statement .)
    WHILE           reduce using rule 11 (statement -> return_statement .)
    $end            reduce using rule 11 (statement -> return_statement .)
    END             reduce using rule 11 (statement -> return_statement .)
    ELSE            reduce using rule 11 (statement -> return_statement .)
    ELSIF           reduce using rule 11 (statement -> return_statement .)


state 12

    (12) statement -> class_definition .

    PRINT           reduce using rule 12 (statement -> class_definition .)
    PUTS            reduce using rule 12 (statement -> class_definition .)
    LOCAL_VAR       reduce using rule 12 (statement -> class_definition .)
    GLOBAL_VAR      reduce using rule 12 (statement -> class_definition .)
    INSTANCE_VAR    reduce using rule 12 (statement -> class_definition .)
    CLASS_VAR       reduce using rule 12 (statement -> class_definition .)
    DEF             reduce using rule 12 (statement -> class_definition .)
    RETURN          reduce using rule 12 (statement -> class_definition .)
    CLASS           reduce using rule 12 (statement -> class_definition .)
    CONSTANT        reduce using rule 12 (statement -> class_definition .)
    L_ULTRA_PAREN   reduce using rule 12 (statement -> class_definition .)
    IF              reduce using rule 12 (statement -> class_definition .)
    UNTIL           reduce using rule 12 (statement -> class_definition .)
    UNLESS          reduce using rule 12 (statement -> class_definition .)
    WHILE           reduce using rule 12 (statement -> class_definition .)
    $end            reduce using rule 12 (statement -> class_definition .)
    END             reduce using rule 12 (statement -> class_definition .)
    ELSE            reduce using rule 12 (statement -> class_definition .)
    ELSIF           reduce using rule 12 (statement -> class_definition .)


state 13

    (13) statement -> method_call .

    PRINT           reduce using rule 13 (statement -> method_call .)
    PUTS            reduce using rule 13 (statement -> method_call .)
    LOCAL_VAR       reduce using rule 13 (statement -> method_call .)
    GLOBAL_VAR      reduce using rule 13 (statement -> method_call .)
    INSTANCE_VAR    reduce using rule 13 (statement -> method_call .)
    CLASS_VAR       reduce using rule 13 (statement -> method_call .)
    DEF             reduce using rule 13 (statement -> method_call .)
    RETURN          reduce using rule 13 (statement -> method_call .)
    CLASS           reduce using rule 13 (statement -> method_call .)
    CONSTANT        reduce using rule 13 (statement -> method_call .)
    L_ULTRA_PAREN   reduce using rule 13 (statement -> method_call .)
    IF              reduce using rule 13 (statement -> method_call .)
    UNTIL           reduce using rule 13 (statement -> method_call .)
    UNLESS          reduce using rule 13 (statement -> method_call .)
    WHILE           reduce using rule 13 (statement -> method_call .)
    $end            reduce using rule 13 (statement -> method_call .)
    END             reduce using rule 13 (statement -> method_call .)
    ELSE            reduce using rule 13 (statement -> method_call .)
    ELSIF           reduce using rule 13 (statement -> method_call .)


state 14

    (14) statement -> array_append .

    PRINT           reduce using rule 14 (statement -> array_append .)
    PUTS            reduce using rule 14 (statement -> array_append .)
    LOCAL_VAR       reduce using rule 14 (statement -> array_append .)
    GLOBAL_VAR      reduce using rule 14 (statement -> array_append .)
    INSTANCE_VAR    reduce using rule 14 (statement -> array_append .)
    CLASS_VAR       reduce using rule 14 (statement -> array_append .)
    DEF             reduce using rule 14 (statement -> array_append .)
    RETURN          reduce using rule 14 (statement -> array_append .)
    CLASS           reduce using rule 14 (statement -> array_append .)
    CONSTANT        reduce using rule 14 (statement -> array_append .)
    L_ULTRA_PAREN   reduce using rule 14 (statement -> array_append .)
    IF              reduce using rule 14 (statement -> array_append .)
    UNTIL           reduce using rule 14 (statement -> array_append .)
    UNLESS          reduce using rule 14 (statement -> array_append .)
    WHILE           reduce using rule 14 (statement -> array_append .)
    $end            reduce using rule 14 (statement -> array_append .)
    END             reduce using rule 14 (statement -> array_append .)
    ELSE            reduce using rule 14 (statement -> array_append .)
    ELSIF           reduce using rule 14 (statement -> array_append .)


state 15

    (15) statement -> indexing .
    (130) indexing -> indexing . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> indexing . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> indexing . ASSIGN expression

  ! shift/reduce conflict for L_ULTRA_PAREN resolved as shift
    PRINT           reduce using rule 15 (statement -> indexing .)
    PUTS            reduce using rule 15 (statement -> indexing .)
    LOCAL_VAR       reduce using rule 15 (statement -> indexing .)
    GLOBAL_VAR      reduce using rule 15 (statement -> indexing .)
    INSTANCE_VAR    reduce using rule 15 (statement -> indexing .)
    CLASS_VAR       reduce using rule 15 (statement -> indexing .)
    DEF             reduce using rule 15 (statement -> indexing .)
    RETURN          reduce using rule 15 (statement -> indexing .)
    CLASS           reduce using rule 15 (statement -> indexing .)
    CONSTANT        reduce using rule 15 (statement -> indexing .)
    IF              reduce using rule 15 (statement -> indexing .)
    UNTIL           reduce using rule 15 (statement -> indexing .)
    UNLESS          reduce using rule 15 (statement -> indexing .)
    WHILE           reduce using rule 15 (statement -> indexing .)
    $end            reduce using rule 15 (statement -> indexing .)
    END             reduce using rule 15 (statement -> indexing .)
    ELSE            reduce using rule 15 (statement -> indexing .)
    ELSIF           reduce using rule 15 (statement -> indexing .)
    L_ULTRA_PAREN   shift and go to state 39
    ASSIGN          shift and go to state 40

  ! L_ULTRA_PAREN   [ reduce using rule 15 (statement -> indexing .) ]


state 16

    (16) statement -> array_assignament .

    PRINT           reduce using rule 16 (statement -> array_assignament .)
    PUTS            reduce using rule 16 (statement -> array_assignament .)
    LOCAL_VAR       reduce using rule 16 (statement -> array_assignament .)
    GLOBAL_VAR      reduce using rule 16 (statement -> array_assignament .)
    INSTANCE_VAR    reduce using rule 16 (statement -> array_assignament .)
    CLASS_VAR       reduce using rule 16 (statement -> array_assignament .)
    DEF             reduce using rule 16 (statement -> array_assignament .)
    RETURN          reduce using rule 16 (statement -> array_assignament .)
    CLASS           reduce using rule 16 (statement -> array_assignament .)
    CONSTANT        reduce using rule 16 (statement -> array_assignament .)
    L_ULTRA_PAREN   reduce using rule 16 (statement -> array_assignament .)
    IF              reduce using rule 16 (statement -> array_assignament .)
    UNTIL           reduce using rule 16 (statement -> array_assignament .)
    UNLESS          reduce using rule 16 (statement -> array_assignament .)
    WHILE           reduce using rule 16 (statement -> array_assignament .)
    $end            reduce using rule 16 (statement -> array_assignament .)
    END             reduce using rule 16 (statement -> array_assignament .)
    ELSE            reduce using rule 16 (statement -> array_assignament .)
    ELSIF           reduce using rule 16 (statement -> array_assignament .)


state 17

    (26) print_statement -> PRINT . L_PAREN argument_list R_PAREN
    (27) print_statement -> PRINT . L_PAREN R_PAREN
    (28) print_statement -> PRINT . argument_list
    (29) print_statement -> PRINT .
    (34) argument_list -> . expression
    (35) argument_list -> . argument_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

  ! shift/reduce conflict for LOCAL_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for CLASS_VAR resolved as shift
  ! shift/reduce conflict for L_ULTRA_PAREN resolved as shift
  ! shift/reduce conflict for CONSTANT resolved as shift
    L_PAREN         shift and go to state 41
    PRINT           reduce using rule 29 (print_statement -> PRINT .)
    PUTS            reduce using rule 29 (print_statement -> PRINT .)
    DEF             reduce using rule 29 (print_statement -> PRINT .)
    RETURN          reduce using rule 29 (print_statement -> PRINT .)
    CLASS           reduce using rule 29 (print_statement -> PRINT .)
    IF              reduce using rule 29 (print_statement -> PRINT .)
    UNTIL           reduce using rule 29 (print_statement -> PRINT .)
    UNLESS          reduce using rule 29 (print_statement -> PRINT .)
    WHILE           reduce using rule 29 (print_statement -> PRINT .)
    $end            reduce using rule 29 (print_statement -> PRINT .)
    END             reduce using rule 29 (print_statement -> PRINT .)
    ELSE            reduce using rule 29 (print_statement -> PRINT .)
    ELSIF           reduce using rule 29 (print_statement -> PRINT .)
    NOT             shift and go to state 50
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

  ! LOCAL_VAR       [ reduce using rule 29 (print_statement -> PRINT .) ]
  ! GLOBAL_VAR      [ reduce using rule 29 (print_statement -> PRINT .) ]
  ! INSTANCE_VAR    [ reduce using rule 29 (print_statement -> PRINT .) ]
  ! CLASS_VAR       [ reduce using rule 29 (print_statement -> PRINT .) ]
  ! CONSTANT        [ reduce using rule 29 (print_statement -> PRINT .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 29 (print_statement -> PRINT .) ]

    argument_list                  shift and go to state 42
    expression                     shift and go to state 43
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 18

    (30) puts_statement -> PUTS . L_PAREN argument_list R_PAREN
    (31) puts_statement -> PUTS . L_PAREN R_PAREN
    (32) puts_statement -> PUTS . argument_list
    (33) puts_statement -> PUTS .
    (34) argument_list -> . expression
    (35) argument_list -> . argument_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

  ! shift/reduce conflict for LOCAL_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for CLASS_VAR resolved as shift
  ! shift/reduce conflict for L_ULTRA_PAREN resolved as shift
  ! shift/reduce conflict for CONSTANT resolved as shift
    L_PAREN         shift and go to state 59
    PRINT           reduce using rule 33 (puts_statement -> PUTS .)
    PUTS            reduce using rule 33 (puts_statement -> PUTS .)
    DEF             reduce using rule 33 (puts_statement -> PUTS .)
    RETURN          reduce using rule 33 (puts_statement -> PUTS .)
    CLASS           reduce using rule 33 (puts_statement -> PUTS .)
    IF              reduce using rule 33 (puts_statement -> PUTS .)
    UNTIL           reduce using rule 33 (puts_statement -> PUTS .)
    UNLESS          reduce using rule 33 (puts_statement -> PUTS .)
    WHILE           reduce using rule 33 (puts_statement -> PUTS .)
    $end            reduce using rule 33 (puts_statement -> PUTS .)
    END             reduce using rule 33 (puts_statement -> PUTS .)
    ELSE            reduce using rule 33 (puts_statement -> PUTS .)
    ELSIF           reduce using rule 33 (puts_statement -> PUTS .)
    NOT             shift and go to state 50
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

  ! LOCAL_VAR       [ reduce using rule 33 (puts_statement -> PUTS .) ]
  ! GLOBAL_VAR      [ reduce using rule 33 (puts_statement -> PUTS .) ]
  ! INSTANCE_VAR    [ reduce using rule 33 (puts_statement -> PUTS .) ]
  ! CLASS_VAR       [ reduce using rule 33 (puts_statement -> PUTS .) ]
  ! CONSTANT        [ reduce using rule 33 (puts_statement -> PUTS .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 33 (puts_statement -> PUTS .) ]

    argument_list                  shift and go to state 60
    expression                     shift and go to state 43
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 19

    (36) input_statement -> LOCAL_VAR . ASSIGN GETS
    (37) input_statement -> LOCAL_VAR . ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> LOCAL_VAR . ASSIGN expression
    (120) method_call -> LOCAL_VAR . DOT function_call
    (56) array_append -> LOCAL_VAR . APPEND expression
    (125) indexing -> LOCAL_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (48) array_definition -> LOCAL_VAR . ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> LOCAL_VAR . ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> LOCAL_VAR . ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN

    ASSIGN          shift and go to state 61
    DOT             shift and go to state 62
    APPEND          shift and go to state 63
    L_ULTRA_PAREN   shift and go to state 64


state 20

    (23) assignment_statement -> GLOBAL_VAR . ASSIGN expression
    (121) method_call -> GLOBAL_VAR . DOT function_call
    (57) array_append -> GLOBAL_VAR . APPEND expression
    (126) indexing -> GLOBAL_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (50) array_definition -> GLOBAL_VAR . ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> GLOBAL_VAR . ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN

    ASSIGN          shift and go to state 65
    DOT             shift and go to state 66
    APPEND          shift and go to state 67
    L_ULTRA_PAREN   shift and go to state 68


state 21

    (24) assignment_statement -> INSTANCE_VAR . ASSIGN expression
    (122) method_call -> INSTANCE_VAR . DOT function_call
    (58) array_append -> INSTANCE_VAR . APPEND expression
    (127) indexing -> INSTANCE_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (52) array_definition -> INSTANCE_VAR . ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> INSTANCE_VAR . ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN

    ASSIGN          shift and go to state 69
    DOT             shift and go to state 70
    APPEND          shift and go to state 71
    L_ULTRA_PAREN   shift and go to state 72


state 22

    (25) assignment_statement -> CLASS_VAR . ASSIGN expression
    (123) method_call -> CLASS_VAR . DOT function_call
    (59) array_append -> CLASS_VAR . APPEND expression
    (128) indexing -> CLASS_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (54) array_definition -> CLASS_VAR . ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> CLASS_VAR . ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN

    ASSIGN          shift and go to state 73
    DOT             shift and go to state 74
    APPEND          shift and go to state 75
    L_ULTRA_PAREN   shift and go to state 76


state 23

    (38) data_structure -> array_definition .

    PRINT           reduce using rule 38 (data_structure -> array_definition .)
    PUTS            reduce using rule 38 (data_structure -> array_definition .)
    LOCAL_VAR       reduce using rule 38 (data_structure -> array_definition .)
    GLOBAL_VAR      reduce using rule 38 (data_structure -> array_definition .)
    INSTANCE_VAR    reduce using rule 38 (data_structure -> array_definition .)
    CLASS_VAR       reduce using rule 38 (data_structure -> array_definition .)
    DEF             reduce using rule 38 (data_structure -> array_definition .)
    RETURN          reduce using rule 38 (data_structure -> array_definition .)
    CLASS           reduce using rule 38 (data_structure -> array_definition .)
    CONSTANT        reduce using rule 38 (data_structure -> array_definition .)
    L_ULTRA_PAREN   reduce using rule 38 (data_structure -> array_definition .)
    IF              reduce using rule 38 (data_structure -> array_definition .)
    UNTIL           reduce using rule 38 (data_structure -> array_definition .)
    UNLESS          reduce using rule 38 (data_structure -> array_definition .)
    WHILE           reduce using rule 38 (data_structure -> array_definition .)
    $end            reduce using rule 38 (data_structure -> array_definition .)
    END             reduce using rule 38 (data_structure -> array_definition .)
    ELSE            reduce using rule 38 (data_structure -> array_definition .)
    ELSIF           reduce using rule 38 (data_structure -> array_definition .)


state 24

    (39) data_structure -> hash_definition .

    PRINT           reduce using rule 39 (data_structure -> hash_definition .)
    PUTS            reduce using rule 39 (data_structure -> hash_definition .)
    LOCAL_VAR       reduce using rule 39 (data_structure -> hash_definition .)
    GLOBAL_VAR      reduce using rule 39 (data_structure -> hash_definition .)
    INSTANCE_VAR    reduce using rule 39 (data_structure -> hash_definition .)
    CLASS_VAR       reduce using rule 39 (data_structure -> hash_definition .)
    DEF             reduce using rule 39 (data_structure -> hash_definition .)
    RETURN          reduce using rule 39 (data_structure -> hash_definition .)
    CLASS           reduce using rule 39 (data_structure -> hash_definition .)
    CONSTANT        reduce using rule 39 (data_structure -> hash_definition .)
    L_ULTRA_PAREN   reduce using rule 39 (data_structure -> hash_definition .)
    IF              reduce using rule 39 (data_structure -> hash_definition .)
    UNTIL           reduce using rule 39 (data_structure -> hash_definition .)
    UNLESS          reduce using rule 39 (data_structure -> hash_definition .)
    WHILE           reduce using rule 39 (data_structure -> hash_definition .)
    $end            reduce using rule 39 (data_structure -> hash_definition .)
    END             reduce using rule 39 (data_structure -> hash_definition .)
    ELSE            reduce using rule 39 (data_structure -> hash_definition .)
    ELSIF           reduce using rule 39 (data_structure -> hash_definition .)


state 25

    (62) control_structure -> if_statement .

    PRINT           reduce using rule 62 (control_structure -> if_statement .)
    PUTS            reduce using rule 62 (control_structure -> if_statement .)
    LOCAL_VAR       reduce using rule 62 (control_structure -> if_statement .)
    GLOBAL_VAR      reduce using rule 62 (control_structure -> if_statement .)
    INSTANCE_VAR    reduce using rule 62 (control_structure -> if_statement .)
    CLASS_VAR       reduce using rule 62 (control_structure -> if_statement .)
    DEF             reduce using rule 62 (control_structure -> if_statement .)
    RETURN          reduce using rule 62 (control_structure -> if_statement .)
    CLASS           reduce using rule 62 (control_structure -> if_statement .)
    CONSTANT        reduce using rule 62 (control_structure -> if_statement .)
    L_ULTRA_PAREN   reduce using rule 62 (control_structure -> if_statement .)
    IF              reduce using rule 62 (control_structure -> if_statement .)
    UNTIL           reduce using rule 62 (control_structure -> if_statement .)
    UNLESS          reduce using rule 62 (control_structure -> if_statement .)
    WHILE           reduce using rule 62 (control_structure -> if_statement .)
    $end            reduce using rule 62 (control_structure -> if_statement .)
    END             reduce using rule 62 (control_structure -> if_statement .)
    ELSE            reduce using rule 62 (control_structure -> if_statement .)
    ELSIF           reduce using rule 62 (control_structure -> if_statement .)


state 26

    (63) control_structure -> until_statement .

    PRINT           reduce using rule 63 (control_structure -> until_statement .)
    PUTS            reduce using rule 63 (control_structure -> until_statement .)
    LOCAL_VAR       reduce using rule 63 (control_structure -> until_statement .)
    GLOBAL_VAR      reduce using rule 63 (control_structure -> until_statement .)
    INSTANCE_VAR    reduce using rule 63 (control_structure -> until_statement .)
    CLASS_VAR       reduce using rule 63 (control_structure -> until_statement .)
    DEF             reduce using rule 63 (control_structure -> until_statement .)
    RETURN          reduce using rule 63 (control_structure -> until_statement .)
    CLASS           reduce using rule 63 (control_structure -> until_statement .)
    CONSTANT        reduce using rule 63 (control_structure -> until_statement .)
    L_ULTRA_PAREN   reduce using rule 63 (control_structure -> until_statement .)
    IF              reduce using rule 63 (control_structure -> until_statement .)
    UNTIL           reduce using rule 63 (control_structure -> until_statement .)
    UNLESS          reduce using rule 63 (control_structure -> until_statement .)
    WHILE           reduce using rule 63 (control_structure -> until_statement .)
    $end            reduce using rule 63 (control_structure -> until_statement .)
    END             reduce using rule 63 (control_structure -> until_statement .)
    ELSE            reduce using rule 63 (control_structure -> until_statement .)
    ELSIF           reduce using rule 63 (control_structure -> until_statement .)


state 27

    (64) control_structure -> unless_statement .

    PRINT           reduce using rule 64 (control_structure -> unless_statement .)
    PUTS            reduce using rule 64 (control_structure -> unless_statement .)
    LOCAL_VAR       reduce using rule 64 (control_structure -> unless_statement .)
    GLOBAL_VAR      reduce using rule 64 (control_structure -> unless_statement .)
    INSTANCE_VAR    reduce using rule 64 (control_structure -> unless_statement .)
    CLASS_VAR       reduce using rule 64 (control_structure -> unless_statement .)
    DEF             reduce using rule 64 (control_structure -> unless_statement .)
    RETURN          reduce using rule 64 (control_structure -> unless_statement .)
    CLASS           reduce using rule 64 (control_structure -> unless_statement .)
    CONSTANT        reduce using rule 64 (control_structure -> unless_statement .)
    L_ULTRA_PAREN   reduce using rule 64 (control_structure -> unless_statement .)
    IF              reduce using rule 64 (control_structure -> unless_statement .)
    UNTIL           reduce using rule 64 (control_structure -> unless_statement .)
    UNLESS          reduce using rule 64 (control_structure -> unless_statement .)
    WHILE           reduce using rule 64 (control_structure -> unless_statement .)
    $end            reduce using rule 64 (control_structure -> unless_statement .)
    END             reduce using rule 64 (control_structure -> unless_statement .)
    ELSE            reduce using rule 64 (control_structure -> unless_statement .)
    ELSIF           reduce using rule 64 (control_structure -> unless_statement .)


state 28

    (65) control_structure -> while_statement .

    PRINT           reduce using rule 65 (control_structure -> while_statement .)
    PUTS            reduce using rule 65 (control_structure -> while_statement .)
    LOCAL_VAR       reduce using rule 65 (control_structure -> while_statement .)
    GLOBAL_VAR      reduce using rule 65 (control_structure -> while_statement .)
    INSTANCE_VAR    reduce using rule 65 (control_structure -> while_statement .)
    CLASS_VAR       reduce using rule 65 (control_structure -> while_statement .)
    DEF             reduce using rule 65 (control_structure -> while_statement .)
    RETURN          reduce using rule 65 (control_structure -> while_statement .)
    CLASS           reduce using rule 65 (control_structure -> while_statement .)
    CONSTANT        reduce using rule 65 (control_structure -> while_statement .)
    L_ULTRA_PAREN   reduce using rule 65 (control_structure -> while_statement .)
    IF              reduce using rule 65 (control_structure -> while_statement .)
    UNTIL           reduce using rule 65 (control_structure -> while_statement .)
    UNLESS          reduce using rule 65 (control_structure -> while_statement .)
    WHILE           reduce using rule 65 (control_structure -> while_statement .)
    $end            reduce using rule 65 (control_structure -> while_statement .)
    END             reduce using rule 65 (control_structure -> while_statement .)
    ELSE            reduce using rule 65 (control_structure -> while_statement .)
    ELSIF           reduce using rule 65 (control_structure -> while_statement .)


state 29

    (77) function_definition -> DEF . LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> DEF . LOCAL_VAR statement_list END

    LOCAL_VAR       shift and go to state 77


state 30

    (21) return_statement -> RETURN . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 78
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 31

    (17) class_definition -> CLASS . CONSTANT class_body END

    CONSTANT        shift and go to state 80


state 32

    (124) method_call -> CONSTANT . DOT function_call

    DOT             shift and go to state 81


state 33

    (129) indexing -> L_ULTRA_PAREN . TWO_POINTS LOCAL_VAR R_ULTRA_PAREN

    TWO_POINTS      shift and go to state 82


state 34

    (66) if_statement -> IF . condition statement_list END
    (67) if_statement -> IF . condition statement_list ELSE statement_list END
    (68) if_statement -> IF . condition statement_list ELSIF condition statement_list ELSE statement_list END
    (73) condition -> . expression comparison_operator expression
    (74) condition -> . condition logical_operator condition
    (75) condition -> . NOT condition
    (76) condition -> . L_PAREN condition R_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 85
    L_PAREN         shift and go to state 86
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    condition                      shift and go to state 83
    expression                     shift and go to state 84
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 35

    (72) until_statement -> UNTIL . condition statement_list END
    (73) condition -> . expression comparison_operator expression
    (74) condition -> . condition logical_operator condition
    (75) condition -> . NOT condition
    (76) condition -> . L_PAREN condition R_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 85
    L_PAREN         shift and go to state 86
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    condition                      shift and go to state 87
    expression                     shift and go to state 84
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 36

    (70) unless_statement -> UNLESS . condition statement_list END
    (71) unless_statement -> UNLESS . condition statement_list ELSE statement_list END
    (73) condition -> . expression comparison_operator expression
    (74) condition -> . condition logical_operator condition
    (75) condition -> . NOT condition
    (76) condition -> . L_PAREN condition R_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 85
    L_PAREN         shift and go to state 86
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    condition                      shift and go to state 88
    expression                     shift and go to state 84
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 37

    (69) while_statement -> WHILE . condition statement_list END
    (73) condition -> . expression comparison_operator expression
    (74) condition -> . condition logical_operator condition
    (75) condition -> . NOT condition
    (76) condition -> . L_PAREN condition R_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 85
    L_PAREN         shift and go to state 86
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    condition                      shift and go to state 89
    expression                     shift and go to state 84
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 38

    (3) statement_list -> statement_list statement .

    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    PUTS            reduce using rule 3 (statement_list -> statement_list statement .)
    LOCAL_VAR       reduce using rule 3 (statement_list -> statement_list statement .)
    GLOBAL_VAR      reduce using rule 3 (statement_list -> statement_list statement .)
    INSTANCE_VAR    reduce using rule 3 (statement_list -> statement_list statement .)
    CLASS_VAR       reduce using rule 3 (statement_list -> statement_list statement .)
    DEF             reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 3 (statement_list -> statement_list statement .)
    CONSTANT        reduce using rule 3 (statement_list -> statement_list statement .)
    L_ULTRA_PAREN   reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 3 (statement_list -> statement_list statement .)
    UNLESS          reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    END             reduce using rule 3 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 3 (statement_list -> statement_list statement .)
    ELSIF           reduce using rule 3 (statement_list -> statement_list statement .)


state 39

    (130) indexing -> indexing L_ULTRA_PAREN . expression R_ULTRA_PAREN
    (131) indexing -> indexing L_ULTRA_PAREN . TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    TWO_POINTS      shift and go to state 91
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    indexing                       shift and go to state 48
    expression                     shift and go to state 90
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 40

    (132) array_assignament -> indexing ASSIGN . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    indexing                       shift and go to state 48
    expression                     shift and go to state 92
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 41

    (26) print_statement -> PRINT L_PAREN . argument_list R_PAREN
    (27) print_statement -> PRINT L_PAREN . R_PAREN
    (109) expression_group -> L_PAREN . expression R_PAREN
    (34) argument_list -> . expression
    (35) argument_list -> . argument_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    R_PAREN         shift and go to state 94
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    argument_list                  shift and go to state 93
    expression                     shift and go to state 95
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 42

    (28) print_statement -> PRINT argument_list .
    (35) argument_list -> argument_list . COMMA expression

    PRINT           reduce using rule 28 (print_statement -> PRINT argument_list .)
    PUTS            reduce using rule 28 (print_statement -> PRINT argument_list .)
    LOCAL_VAR       reduce using rule 28 (print_statement -> PRINT argument_list .)
    GLOBAL_VAR      reduce using rule 28 (print_statement -> PRINT argument_list .)
    INSTANCE_VAR    reduce using rule 28 (print_statement -> PRINT argument_list .)
    CLASS_VAR       reduce using rule 28 (print_statement -> PRINT argument_list .)
    DEF             reduce using rule 28 (print_statement -> PRINT argument_list .)
    RETURN          reduce using rule 28 (print_statement -> PRINT argument_list .)
    CLASS           reduce using rule 28 (print_statement -> PRINT argument_list .)
    CONSTANT        reduce using rule 28 (print_statement -> PRINT argument_list .)
    L_ULTRA_PAREN   reduce using rule 28 (print_statement -> PRINT argument_list .)
    IF              reduce using rule 28 (print_statement -> PRINT argument_list .)
    UNTIL           reduce using rule 28 (print_statement -> PRINT argument_list .)
    UNLESS          reduce using rule 28 (print_statement -> PRINT argument_list .)
    WHILE           reduce using rule 28 (print_statement -> PRINT argument_list .)
    $end            reduce using rule 28 (print_statement -> PRINT argument_list .)
    END             reduce using rule 28 (print_statement -> PRINT argument_list .)
    ELSE            reduce using rule 28 (print_statement -> PRINT argument_list .)
    ELSIF           reduce using rule 28 (print_statement -> PRINT argument_list .)
    COMMA           shift and go to state 96


state 43

    (34) argument_list -> expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for OR_OPERATOR resolved as shift
    COMMA           reduce using rule 34 (argument_list -> expression .)
    PRINT           reduce using rule 34 (argument_list -> expression .)
    PUTS            reduce using rule 34 (argument_list -> expression .)
    LOCAL_VAR       reduce using rule 34 (argument_list -> expression .)
    GLOBAL_VAR      reduce using rule 34 (argument_list -> expression .)
    INSTANCE_VAR    reduce using rule 34 (argument_list -> expression .)
    CLASS_VAR       reduce using rule 34 (argument_list -> expression .)
    DEF             reduce using rule 34 (argument_list -> expression .)
    RETURN          reduce using rule 34 (argument_list -> expression .)
    CLASS           reduce using rule 34 (argument_list -> expression .)
    CONSTANT        reduce using rule 34 (argument_list -> expression .)
    L_ULTRA_PAREN   reduce using rule 34 (argument_list -> expression .)
    IF              reduce using rule 34 (argument_list -> expression .)
    UNTIL           reduce using rule 34 (argument_list -> expression .)
    UNLESS          reduce using rule 34 (argument_list -> expression .)
    WHILE           reduce using rule 34 (argument_list -> expression .)
    $end            reduce using rule 34 (argument_list -> expression .)
    END             reduce using rule 34 (argument_list -> expression .)
    ELSE            reduce using rule 34 (argument_list -> expression .)
    ELSIF           reduce using rule 34 (argument_list -> expression .)
    R_ULTRA_PAREN   reduce using rule 34 (argument_list -> expression .)
    R_PAREN         reduce using rule 34 (argument_list -> expression .)
    R_MAYUS_PAREN   reduce using rule 34 (argument_list -> expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110

  ! PLUS            [ reduce using rule 34 (argument_list -> expression .) ]
  ! MINUS           [ reduce using rule 34 (argument_list -> expression .) ]
  ! MULTIPLY        [ reduce using rule 34 (argument_list -> expression .) ]
  ! DIVIDE          [ reduce using rule 34 (argument_list -> expression .) ]
  ! MODULE          [ reduce using rule 34 (argument_list -> expression .) ]
  ! EQUALS          [ reduce using rule 34 (argument_list -> expression .) ]
  ! DIFFERENT       [ reduce using rule 34 (argument_list -> expression .) ]
  ! GREATER         [ reduce using rule 34 (argument_list -> expression .) ]
  ! LESS            [ reduce using rule 34 (argument_list -> expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 34 (argument_list -> expression .) ]
  ! LESS_EQUAL      [ reduce using rule 34 (argument_list -> expression .) ]
  ! AND             [ reduce using rule 34 (argument_list -> expression .) ]
  ! OR              [ reduce using rule 34 (argument_list -> expression .) ]
  ! OR_OPERATOR     [ reduce using rule 34 (argument_list -> expression .) ]


state 44

    (83) expression -> expression_binop .

    PLUS            reduce using rule 83 (expression -> expression_binop .)
    MINUS           reduce using rule 83 (expression -> expression_binop .)
    MULTIPLY        reduce using rule 83 (expression -> expression_binop .)
    DIVIDE          reduce using rule 83 (expression -> expression_binop .)
    MODULE          reduce using rule 83 (expression -> expression_binop .)
    EQUALS          reduce using rule 83 (expression -> expression_binop .)
    DIFFERENT       reduce using rule 83 (expression -> expression_binop .)
    GREATER         reduce using rule 83 (expression -> expression_binop .)
    LESS            reduce using rule 83 (expression -> expression_binop .)
    GREATER_EQUAL   reduce using rule 83 (expression -> expression_binop .)
    LESS_EQUAL      reduce using rule 83 (expression -> expression_binop .)
    AND             reduce using rule 83 (expression -> expression_binop .)
    OR              reduce using rule 83 (expression -> expression_binop .)
    OR_OPERATOR     reduce using rule 83 (expression -> expression_binop .)
    COMMA           reduce using rule 83 (expression -> expression_binop .)
    PRINT           reduce using rule 83 (expression -> expression_binop .)
    PUTS            reduce using rule 83 (expression -> expression_binop .)
    LOCAL_VAR       reduce using rule 83 (expression -> expression_binop .)
    GLOBAL_VAR      reduce using rule 83 (expression -> expression_binop .)
    INSTANCE_VAR    reduce using rule 83 (expression -> expression_binop .)
    CLASS_VAR       reduce using rule 83 (expression -> expression_binop .)
    DEF             reduce using rule 83 (expression -> expression_binop .)
    RETURN          reduce using rule 83 (expression -> expression_binop .)
    CLASS           reduce using rule 83 (expression -> expression_binop .)
    CONSTANT        reduce using rule 83 (expression -> expression_binop .)
    L_ULTRA_PAREN   reduce using rule 83 (expression -> expression_binop .)
    IF              reduce using rule 83 (expression -> expression_binop .)
    UNTIL           reduce using rule 83 (expression -> expression_binop .)
    UNLESS          reduce using rule 83 (expression -> expression_binop .)
    WHILE           reduce using rule 83 (expression -> expression_binop .)
    $end            reduce using rule 83 (expression -> expression_binop .)
    END             reduce using rule 83 (expression -> expression_binop .)
    ELSE            reduce using rule 83 (expression -> expression_binop .)
    ELSIF           reduce using rule 83 (expression -> expression_binop .)
    R_ULTRA_PAREN   reduce using rule 83 (expression -> expression_binop .)
    R_PAREN         reduce using rule 83 (expression -> expression_binop .)
    R_MAYUS_PAREN   reduce using rule 83 (expression -> expression_binop .)


state 45

    (84) expression -> expression_not .

    PLUS            reduce using rule 84 (expression -> expression_not .)
    MINUS           reduce using rule 84 (expression -> expression_not .)
    MULTIPLY        reduce using rule 84 (expression -> expression_not .)
    DIVIDE          reduce using rule 84 (expression -> expression_not .)
    MODULE          reduce using rule 84 (expression -> expression_not .)
    EQUALS          reduce using rule 84 (expression -> expression_not .)
    DIFFERENT       reduce using rule 84 (expression -> expression_not .)
    GREATER         reduce using rule 84 (expression -> expression_not .)
    LESS            reduce using rule 84 (expression -> expression_not .)
    GREATER_EQUAL   reduce using rule 84 (expression -> expression_not .)
    LESS_EQUAL      reduce using rule 84 (expression -> expression_not .)
    AND             reduce using rule 84 (expression -> expression_not .)
    OR              reduce using rule 84 (expression -> expression_not .)
    OR_OPERATOR     reduce using rule 84 (expression -> expression_not .)
    COMMA           reduce using rule 84 (expression -> expression_not .)
    PRINT           reduce using rule 84 (expression -> expression_not .)
    PUTS            reduce using rule 84 (expression -> expression_not .)
    LOCAL_VAR       reduce using rule 84 (expression -> expression_not .)
    GLOBAL_VAR      reduce using rule 84 (expression -> expression_not .)
    INSTANCE_VAR    reduce using rule 84 (expression -> expression_not .)
    CLASS_VAR       reduce using rule 84 (expression -> expression_not .)
    DEF             reduce using rule 84 (expression -> expression_not .)
    RETURN          reduce using rule 84 (expression -> expression_not .)
    CLASS           reduce using rule 84 (expression -> expression_not .)
    CONSTANT        reduce using rule 84 (expression -> expression_not .)
    L_ULTRA_PAREN   reduce using rule 84 (expression -> expression_not .)
    IF              reduce using rule 84 (expression -> expression_not .)
    UNTIL           reduce using rule 84 (expression -> expression_not .)
    UNLESS          reduce using rule 84 (expression -> expression_not .)
    WHILE           reduce using rule 84 (expression -> expression_not .)
    $end            reduce using rule 84 (expression -> expression_not .)
    END             reduce using rule 84 (expression -> expression_not .)
    ELSE            reduce using rule 84 (expression -> expression_not .)
    ELSIF           reduce using rule 84 (expression -> expression_not .)
    R_ULTRA_PAREN   reduce using rule 84 (expression -> expression_not .)
    R_PAREN         reduce using rule 84 (expression -> expression_not .)
    R_MAYUS_PAREN   reduce using rule 84 (expression -> expression_not .)


state 46

    (85) expression -> expression_group .

    PLUS            reduce using rule 85 (expression -> expression_group .)
    MINUS           reduce using rule 85 (expression -> expression_group .)
    MULTIPLY        reduce using rule 85 (expression -> expression_group .)
    DIVIDE          reduce using rule 85 (expression -> expression_group .)
    MODULE          reduce using rule 85 (expression -> expression_group .)
    EQUALS          reduce using rule 85 (expression -> expression_group .)
    DIFFERENT       reduce using rule 85 (expression -> expression_group .)
    GREATER         reduce using rule 85 (expression -> expression_group .)
    LESS            reduce using rule 85 (expression -> expression_group .)
    GREATER_EQUAL   reduce using rule 85 (expression -> expression_group .)
    LESS_EQUAL      reduce using rule 85 (expression -> expression_group .)
    AND             reduce using rule 85 (expression -> expression_group .)
    OR              reduce using rule 85 (expression -> expression_group .)
    OR_OPERATOR     reduce using rule 85 (expression -> expression_group .)
    COMMA           reduce using rule 85 (expression -> expression_group .)
    PRINT           reduce using rule 85 (expression -> expression_group .)
    PUTS            reduce using rule 85 (expression -> expression_group .)
    LOCAL_VAR       reduce using rule 85 (expression -> expression_group .)
    GLOBAL_VAR      reduce using rule 85 (expression -> expression_group .)
    INSTANCE_VAR    reduce using rule 85 (expression -> expression_group .)
    CLASS_VAR       reduce using rule 85 (expression -> expression_group .)
    DEF             reduce using rule 85 (expression -> expression_group .)
    RETURN          reduce using rule 85 (expression -> expression_group .)
    CLASS           reduce using rule 85 (expression -> expression_group .)
    CONSTANT        reduce using rule 85 (expression -> expression_group .)
    L_ULTRA_PAREN   reduce using rule 85 (expression -> expression_group .)
    IF              reduce using rule 85 (expression -> expression_group .)
    UNTIL           reduce using rule 85 (expression -> expression_group .)
    UNLESS          reduce using rule 85 (expression -> expression_group .)
    WHILE           reduce using rule 85 (expression -> expression_group .)
    $end            reduce using rule 85 (expression -> expression_group .)
    END             reduce using rule 85 (expression -> expression_group .)
    ELSE            reduce using rule 85 (expression -> expression_group .)
    ELSIF           reduce using rule 85 (expression -> expression_group .)
    R_ULTRA_PAREN   reduce using rule 85 (expression -> expression_group .)
    R_PAREN         reduce using rule 85 (expression -> expression_group .)
    R_MAYUS_PAREN   reduce using rule 85 (expression -> expression_group .)


state 47

    (86) expression -> expression_term .

    PLUS            reduce using rule 86 (expression -> expression_term .)
    MINUS           reduce using rule 86 (expression -> expression_term .)
    MULTIPLY        reduce using rule 86 (expression -> expression_term .)
    DIVIDE          reduce using rule 86 (expression -> expression_term .)
    MODULE          reduce using rule 86 (expression -> expression_term .)
    EQUALS          reduce using rule 86 (expression -> expression_term .)
    DIFFERENT       reduce using rule 86 (expression -> expression_term .)
    GREATER         reduce using rule 86 (expression -> expression_term .)
    LESS            reduce using rule 86 (expression -> expression_term .)
    GREATER_EQUAL   reduce using rule 86 (expression -> expression_term .)
    LESS_EQUAL      reduce using rule 86 (expression -> expression_term .)
    AND             reduce using rule 86 (expression -> expression_term .)
    OR              reduce using rule 86 (expression -> expression_term .)
    OR_OPERATOR     reduce using rule 86 (expression -> expression_term .)
    COMMA           reduce using rule 86 (expression -> expression_term .)
    PRINT           reduce using rule 86 (expression -> expression_term .)
    PUTS            reduce using rule 86 (expression -> expression_term .)
    LOCAL_VAR       reduce using rule 86 (expression -> expression_term .)
    GLOBAL_VAR      reduce using rule 86 (expression -> expression_term .)
    INSTANCE_VAR    reduce using rule 86 (expression -> expression_term .)
    CLASS_VAR       reduce using rule 86 (expression -> expression_term .)
    DEF             reduce using rule 86 (expression -> expression_term .)
    RETURN          reduce using rule 86 (expression -> expression_term .)
    CLASS           reduce using rule 86 (expression -> expression_term .)
    CONSTANT        reduce using rule 86 (expression -> expression_term .)
    L_ULTRA_PAREN   reduce using rule 86 (expression -> expression_term .)
    IF              reduce using rule 86 (expression -> expression_term .)
    UNTIL           reduce using rule 86 (expression -> expression_term .)
    UNLESS          reduce using rule 86 (expression -> expression_term .)
    WHILE           reduce using rule 86 (expression -> expression_term .)
    $end            reduce using rule 86 (expression -> expression_term .)
    END             reduce using rule 86 (expression -> expression_term .)
    ELSE            reduce using rule 86 (expression -> expression_term .)
    ELSIF           reduce using rule 86 (expression -> expression_term .)
    R_ULTRA_PAREN   reduce using rule 86 (expression -> expression_term .)
    R_PAREN         reduce using rule 86 (expression -> expression_term .)
    R_MAYUS_PAREN   reduce using rule 86 (expression -> expression_term .)


state 48

    (87) expression -> indexing .
    (114) expression_term -> indexing .
    (130) indexing -> indexing . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> indexing . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN

  ! reduce/reduce conflict for PLUS resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for MINUS resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for MODULE resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for EQUALS resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for GREATER resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for LESS resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for AND resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for OR resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for OR_OPERATOR resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for COMMA resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for PRINT resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for PUTS resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for LOCAL_VAR resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for CLASS_VAR resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for DEF resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for RETURN resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for CLASS resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for CONSTANT resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for L_ULTRA_PAREN resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for IF resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for UNTIL resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for UNLESS resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for WHILE resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for $end resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for END resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for ELSE resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for ELSIF resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for R_ULTRA_PAREN resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for R_PAREN resolved using rule 87 (expression -> indexing .)
  ! reduce/reduce conflict for R_MAYUS_PAREN resolved using rule 87 (expression -> indexing .)
  ! shift/reduce conflict for L_ULTRA_PAREN resolved as shift
    PLUS            reduce using rule 87 (expression -> indexing .)
    MINUS           reduce using rule 87 (expression -> indexing .)
    MULTIPLY        reduce using rule 87 (expression -> indexing .)
    DIVIDE          reduce using rule 87 (expression -> indexing .)
    MODULE          reduce using rule 87 (expression -> indexing .)
    EQUALS          reduce using rule 87 (expression -> indexing .)
    DIFFERENT       reduce using rule 87 (expression -> indexing .)
    GREATER         reduce using rule 87 (expression -> indexing .)
    LESS            reduce using rule 87 (expression -> indexing .)
    GREATER_EQUAL   reduce using rule 87 (expression -> indexing .)
    LESS_EQUAL      reduce using rule 87 (expression -> indexing .)
    AND             reduce using rule 87 (expression -> indexing .)
    OR              reduce using rule 87 (expression -> indexing .)
    OR_OPERATOR     reduce using rule 87 (expression -> indexing .)
    COMMA           reduce using rule 87 (expression -> indexing .)
    PRINT           reduce using rule 87 (expression -> indexing .)
    PUTS            reduce using rule 87 (expression -> indexing .)
    LOCAL_VAR       reduce using rule 87 (expression -> indexing .)
    GLOBAL_VAR      reduce using rule 87 (expression -> indexing .)
    INSTANCE_VAR    reduce using rule 87 (expression -> indexing .)
    CLASS_VAR       reduce using rule 87 (expression -> indexing .)
    DEF             reduce using rule 87 (expression -> indexing .)
    RETURN          reduce using rule 87 (expression -> indexing .)
    CLASS           reduce using rule 87 (expression -> indexing .)
    CONSTANT        reduce using rule 87 (expression -> indexing .)
    IF              reduce using rule 87 (expression -> indexing .)
    UNTIL           reduce using rule 87 (expression -> indexing .)
    UNLESS          reduce using rule 87 (expression -> indexing .)
    WHILE           reduce using rule 87 (expression -> indexing .)
    $end            reduce using rule 87 (expression -> indexing .)
    END             reduce using rule 87 (expression -> indexing .)
    ELSE            reduce using rule 87 (expression -> indexing .)
    ELSIF           reduce using rule 87 (expression -> indexing .)
    R_ULTRA_PAREN   reduce using rule 87 (expression -> indexing .)
    R_PAREN         reduce using rule 87 (expression -> indexing .)
    R_MAYUS_PAREN   reduce using rule 87 (expression -> indexing .)
    L_ULTRA_PAREN   shift and go to state 39

  ! L_ULTRA_PAREN   [ reduce using rule 87 (expression -> indexing .) ]
  ! PLUS            [ reduce using rule 114 (expression_term -> indexing .) ]
  ! MINUS           [ reduce using rule 114 (expression_term -> indexing .) ]
  ! MULTIPLY        [ reduce using rule 114 (expression_term -> indexing .) ]
  ! DIVIDE          [ reduce using rule 114 (expression_term -> indexing .) ]
  ! MODULE          [ reduce using rule 114 (expression_term -> indexing .) ]
  ! EQUALS          [ reduce using rule 114 (expression_term -> indexing .) ]
  ! DIFFERENT       [ reduce using rule 114 (expression_term -> indexing .) ]
  ! GREATER         [ reduce using rule 114 (expression_term -> indexing .) ]
  ! LESS            [ reduce using rule 114 (expression_term -> indexing .) ]
  ! GREATER_EQUAL   [ reduce using rule 114 (expression_term -> indexing .) ]
  ! LESS_EQUAL      [ reduce using rule 114 (expression_term -> indexing .) ]
  ! AND             [ reduce using rule 114 (expression_term -> indexing .) ]
  ! OR              [ reduce using rule 114 (expression_term -> indexing .) ]
  ! OR_OPERATOR     [ reduce using rule 114 (expression_term -> indexing .) ]
  ! COMMA           [ reduce using rule 114 (expression_term -> indexing .) ]
  ! PRINT           [ reduce using rule 114 (expression_term -> indexing .) ]
  ! PUTS            [ reduce using rule 114 (expression_term -> indexing .) ]
  ! LOCAL_VAR       [ reduce using rule 114 (expression_term -> indexing .) ]
  ! GLOBAL_VAR      [ reduce using rule 114 (expression_term -> indexing .) ]
  ! INSTANCE_VAR    [ reduce using rule 114 (expression_term -> indexing .) ]
  ! CLASS_VAR       [ reduce using rule 114 (expression_term -> indexing .) ]
  ! DEF             [ reduce using rule 114 (expression_term -> indexing .) ]
  ! RETURN          [ reduce using rule 114 (expression_term -> indexing .) ]
  ! CLASS           [ reduce using rule 114 (expression_term -> indexing .) ]
  ! CONSTANT        [ reduce using rule 114 (expression_term -> indexing .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 114 (expression_term -> indexing .) ]
  ! IF              [ reduce using rule 114 (expression_term -> indexing .) ]
  ! UNTIL           [ reduce using rule 114 (expression_term -> indexing .) ]
  ! UNLESS          [ reduce using rule 114 (expression_term -> indexing .) ]
  ! WHILE           [ reduce using rule 114 (expression_term -> indexing .) ]
  ! $end            [ reduce using rule 114 (expression_term -> indexing .) ]
  ! END             [ reduce using rule 114 (expression_term -> indexing .) ]
  ! ELSE            [ reduce using rule 114 (expression_term -> indexing .) ]
  ! ELSIF           [ reduce using rule 114 (expression_term -> indexing .) ]
  ! R_ULTRA_PAREN   [ reduce using rule 114 (expression_term -> indexing .) ]
  ! R_PAREN         [ reduce using rule 114 (expression_term -> indexing .) ]
  ! R_MAYUS_PAREN   [ reduce using rule 114 (expression_term -> indexing .) ]


state 49

    (88) expression -> method_call .

    PLUS            reduce using rule 88 (expression -> method_call .)
    MINUS           reduce using rule 88 (expression -> method_call .)
    MULTIPLY        reduce using rule 88 (expression -> method_call .)
    DIVIDE          reduce using rule 88 (expression -> method_call .)
    MODULE          reduce using rule 88 (expression -> method_call .)
    EQUALS          reduce using rule 88 (expression -> method_call .)
    DIFFERENT       reduce using rule 88 (expression -> method_call .)
    GREATER         reduce using rule 88 (expression -> method_call .)
    LESS            reduce using rule 88 (expression -> method_call .)
    GREATER_EQUAL   reduce using rule 88 (expression -> method_call .)
    LESS_EQUAL      reduce using rule 88 (expression -> method_call .)
    AND             reduce using rule 88 (expression -> method_call .)
    OR              reduce using rule 88 (expression -> method_call .)
    OR_OPERATOR     reduce using rule 88 (expression -> method_call .)
    COMMA           reduce using rule 88 (expression -> method_call .)
    PRINT           reduce using rule 88 (expression -> method_call .)
    PUTS            reduce using rule 88 (expression -> method_call .)
    LOCAL_VAR       reduce using rule 88 (expression -> method_call .)
    GLOBAL_VAR      reduce using rule 88 (expression -> method_call .)
    INSTANCE_VAR    reduce using rule 88 (expression -> method_call .)
    CLASS_VAR       reduce using rule 88 (expression -> method_call .)
    DEF             reduce using rule 88 (expression -> method_call .)
    RETURN          reduce using rule 88 (expression -> method_call .)
    CLASS           reduce using rule 88 (expression -> method_call .)
    CONSTANT        reduce using rule 88 (expression -> method_call .)
    L_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    IF              reduce using rule 88 (expression -> method_call .)
    UNTIL           reduce using rule 88 (expression -> method_call .)
    UNLESS          reduce using rule 88 (expression -> method_call .)
    WHILE           reduce using rule 88 (expression -> method_call .)
    $end            reduce using rule 88 (expression -> method_call .)
    END             reduce using rule 88 (expression -> method_call .)
    ELSE            reduce using rule 88 (expression -> method_call .)
    ELSIF           reduce using rule 88 (expression -> method_call .)
    R_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    R_PAREN         reduce using rule 88 (expression -> method_call .)
    R_MAYUS_PAREN   reduce using rule 88 (expression -> method_call .)


state 50

    (108) expression_not -> NOT . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 111
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 51

    (110) expression_term -> INTEGER .

    PLUS            reduce using rule 110 (expression_term -> INTEGER .)
    MINUS           reduce using rule 110 (expression_term -> INTEGER .)
    MULTIPLY        reduce using rule 110 (expression_term -> INTEGER .)
    DIVIDE          reduce using rule 110 (expression_term -> INTEGER .)
    MODULE          reduce using rule 110 (expression_term -> INTEGER .)
    EQUALS          reduce using rule 110 (expression_term -> INTEGER .)
    DIFFERENT       reduce using rule 110 (expression_term -> INTEGER .)
    GREATER         reduce using rule 110 (expression_term -> INTEGER .)
    LESS            reduce using rule 110 (expression_term -> INTEGER .)
    GREATER_EQUAL   reduce using rule 110 (expression_term -> INTEGER .)
    LESS_EQUAL      reduce using rule 110 (expression_term -> INTEGER .)
    AND             reduce using rule 110 (expression_term -> INTEGER .)
    OR              reduce using rule 110 (expression_term -> INTEGER .)
    OR_OPERATOR     reduce using rule 110 (expression_term -> INTEGER .)
    COMMA           reduce using rule 110 (expression_term -> INTEGER .)
    PRINT           reduce using rule 110 (expression_term -> INTEGER .)
    PUTS            reduce using rule 110 (expression_term -> INTEGER .)
    LOCAL_VAR       reduce using rule 110 (expression_term -> INTEGER .)
    GLOBAL_VAR      reduce using rule 110 (expression_term -> INTEGER .)
    INSTANCE_VAR    reduce using rule 110 (expression_term -> INTEGER .)
    CLASS_VAR       reduce using rule 110 (expression_term -> INTEGER .)
    DEF             reduce using rule 110 (expression_term -> INTEGER .)
    RETURN          reduce using rule 110 (expression_term -> INTEGER .)
    CLASS           reduce using rule 110 (expression_term -> INTEGER .)
    CONSTANT        reduce using rule 110 (expression_term -> INTEGER .)
    L_ULTRA_PAREN   reduce using rule 110 (expression_term -> INTEGER .)
    IF              reduce using rule 110 (expression_term -> INTEGER .)
    UNTIL           reduce using rule 110 (expression_term -> INTEGER .)
    UNLESS          reduce using rule 110 (expression_term -> INTEGER .)
    WHILE           reduce using rule 110 (expression_term -> INTEGER .)
    $end            reduce using rule 110 (expression_term -> INTEGER .)
    END             reduce using rule 110 (expression_term -> INTEGER .)
    ELSE            reduce using rule 110 (expression_term -> INTEGER .)
    ELSIF           reduce using rule 110 (expression_term -> INTEGER .)
    R_ULTRA_PAREN   reduce using rule 110 (expression_term -> INTEGER .)
    R_PAREN         reduce using rule 110 (expression_term -> INTEGER .)
    R_MAYUS_PAREN   reduce using rule 110 (expression_term -> INTEGER .)


state 52

    (111) expression_term -> FLOAT .

    PLUS            reduce using rule 111 (expression_term -> FLOAT .)
    MINUS           reduce using rule 111 (expression_term -> FLOAT .)
    MULTIPLY        reduce using rule 111 (expression_term -> FLOAT .)
    DIVIDE          reduce using rule 111 (expression_term -> FLOAT .)
    MODULE          reduce using rule 111 (expression_term -> FLOAT .)
    EQUALS          reduce using rule 111 (expression_term -> FLOAT .)
    DIFFERENT       reduce using rule 111 (expression_term -> FLOAT .)
    GREATER         reduce using rule 111 (expression_term -> FLOAT .)
    LESS            reduce using rule 111 (expression_term -> FLOAT .)
    GREATER_EQUAL   reduce using rule 111 (expression_term -> FLOAT .)
    LESS_EQUAL      reduce using rule 111 (expression_term -> FLOAT .)
    AND             reduce using rule 111 (expression_term -> FLOAT .)
    OR              reduce using rule 111 (expression_term -> FLOAT .)
    OR_OPERATOR     reduce using rule 111 (expression_term -> FLOAT .)
    COMMA           reduce using rule 111 (expression_term -> FLOAT .)
    PRINT           reduce using rule 111 (expression_term -> FLOAT .)
    PUTS            reduce using rule 111 (expression_term -> FLOAT .)
    LOCAL_VAR       reduce using rule 111 (expression_term -> FLOAT .)
    GLOBAL_VAR      reduce using rule 111 (expression_term -> FLOAT .)
    INSTANCE_VAR    reduce using rule 111 (expression_term -> FLOAT .)
    CLASS_VAR       reduce using rule 111 (expression_term -> FLOAT .)
    DEF             reduce using rule 111 (expression_term -> FLOAT .)
    RETURN          reduce using rule 111 (expression_term -> FLOAT .)
    CLASS           reduce using rule 111 (expression_term -> FLOAT .)
    CONSTANT        reduce using rule 111 (expression_term -> FLOAT .)
    L_ULTRA_PAREN   reduce using rule 111 (expression_term -> FLOAT .)
    IF              reduce using rule 111 (expression_term -> FLOAT .)
    UNTIL           reduce using rule 111 (expression_term -> FLOAT .)
    UNLESS          reduce using rule 111 (expression_term -> FLOAT .)
    WHILE           reduce using rule 111 (expression_term -> FLOAT .)
    $end            reduce using rule 111 (expression_term -> FLOAT .)
    END             reduce using rule 111 (expression_term -> FLOAT .)
    ELSE            reduce using rule 111 (expression_term -> FLOAT .)
    ELSIF           reduce using rule 111 (expression_term -> FLOAT .)
    R_ULTRA_PAREN   reduce using rule 111 (expression_term -> FLOAT .)
    R_PAREN         reduce using rule 111 (expression_term -> FLOAT .)
    R_MAYUS_PAREN   reduce using rule 111 (expression_term -> FLOAT .)


state 53

    (112) expression_term -> STRING .

    PLUS            reduce using rule 112 (expression_term -> STRING .)
    MINUS           reduce using rule 112 (expression_term -> STRING .)
    MULTIPLY        reduce using rule 112 (expression_term -> STRING .)
    DIVIDE          reduce using rule 112 (expression_term -> STRING .)
    MODULE          reduce using rule 112 (expression_term -> STRING .)
    EQUALS          reduce using rule 112 (expression_term -> STRING .)
    DIFFERENT       reduce using rule 112 (expression_term -> STRING .)
    GREATER         reduce using rule 112 (expression_term -> STRING .)
    LESS            reduce using rule 112 (expression_term -> STRING .)
    GREATER_EQUAL   reduce using rule 112 (expression_term -> STRING .)
    LESS_EQUAL      reduce using rule 112 (expression_term -> STRING .)
    AND             reduce using rule 112 (expression_term -> STRING .)
    OR              reduce using rule 112 (expression_term -> STRING .)
    OR_OPERATOR     reduce using rule 112 (expression_term -> STRING .)
    COMMA           reduce using rule 112 (expression_term -> STRING .)
    PRINT           reduce using rule 112 (expression_term -> STRING .)
    PUTS            reduce using rule 112 (expression_term -> STRING .)
    LOCAL_VAR       reduce using rule 112 (expression_term -> STRING .)
    GLOBAL_VAR      reduce using rule 112 (expression_term -> STRING .)
    INSTANCE_VAR    reduce using rule 112 (expression_term -> STRING .)
    CLASS_VAR       reduce using rule 112 (expression_term -> STRING .)
    DEF             reduce using rule 112 (expression_term -> STRING .)
    RETURN          reduce using rule 112 (expression_term -> STRING .)
    CLASS           reduce using rule 112 (expression_term -> STRING .)
    CONSTANT        reduce using rule 112 (expression_term -> STRING .)
    L_ULTRA_PAREN   reduce using rule 112 (expression_term -> STRING .)
    IF              reduce using rule 112 (expression_term -> STRING .)
    UNTIL           reduce using rule 112 (expression_term -> STRING .)
    UNLESS          reduce using rule 112 (expression_term -> STRING .)
    WHILE           reduce using rule 112 (expression_term -> STRING .)
    $end            reduce using rule 112 (expression_term -> STRING .)
    END             reduce using rule 112 (expression_term -> STRING .)
    ELSE            reduce using rule 112 (expression_term -> STRING .)
    ELSIF           reduce using rule 112 (expression_term -> STRING .)
    R_ULTRA_PAREN   reduce using rule 112 (expression_term -> STRING .)
    R_PAREN         reduce using rule 112 (expression_term -> STRING .)
    R_MAYUS_PAREN   reduce using rule 112 (expression_term -> STRING .)


state 54

    (113) expression_term -> LOCAL_VAR .
    (125) indexing -> LOCAL_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (120) method_call -> LOCAL_VAR . DOT function_call
    (116) function_call -> LOCAL_VAR . L_PAREN argument_list R_PAREN
    (117) function_call -> LOCAL_VAR . L_PAREN R_PAREN
    (118) function_call -> LOCAL_VAR . argument_list
    (119) function_call -> LOCAL_VAR .
    (34) argument_list -> . expression
    (35) argument_list -> . argument_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

  ! shift/reduce conflict for L_ULTRA_PAREN resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for MINUS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for MODULE resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for EQUALS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for GREATER resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for LESS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for AND resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for OR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for OR_OPERATOR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for COMMA resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for PRINT resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for PUTS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for LOCAL_VAR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for CLASS_VAR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for DEF resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for RETURN resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for CLASS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for CONSTANT resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! shift/reduce conflict for L_ULTRA_PAREN resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for UNTIL resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for UNLESS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for WHILE resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for $end resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for END resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for ELSE resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for ELSIF resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for R_ULTRA_PAREN resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for R_PAREN resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for R_MAYUS_PAREN resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! shift/reduce conflict for LOCAL_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for CLASS_VAR resolved as shift
  ! shift/reduce conflict for CONSTANT resolved as shift
    PLUS            reduce using rule 113 (expression_term -> LOCAL_VAR .)
    MINUS           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    MULTIPLY        reduce using rule 113 (expression_term -> LOCAL_VAR .)
    DIVIDE          reduce using rule 113 (expression_term -> LOCAL_VAR .)
    MODULE          reduce using rule 113 (expression_term -> LOCAL_VAR .)
    EQUALS          reduce using rule 113 (expression_term -> LOCAL_VAR .)
    DIFFERENT       reduce using rule 113 (expression_term -> LOCAL_VAR .)
    GREATER         reduce using rule 113 (expression_term -> LOCAL_VAR .)
    LESS            reduce using rule 113 (expression_term -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 113 (expression_term -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 113 (expression_term -> LOCAL_VAR .)
    AND             reduce using rule 113 (expression_term -> LOCAL_VAR .)
    OR              reduce using rule 113 (expression_term -> LOCAL_VAR .)
    OR_OPERATOR     reduce using rule 113 (expression_term -> LOCAL_VAR .)
    COMMA           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    PRINT           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    PUTS            reduce using rule 113 (expression_term -> LOCAL_VAR .)
    DEF             reduce using rule 113 (expression_term -> LOCAL_VAR .)
    RETURN          reduce using rule 113 (expression_term -> LOCAL_VAR .)
    CLASS           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    IF              reduce using rule 113 (expression_term -> LOCAL_VAR .)
    UNTIL           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    UNLESS          reduce using rule 113 (expression_term -> LOCAL_VAR .)
    WHILE           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    $end            reduce using rule 113 (expression_term -> LOCAL_VAR .)
    END             reduce using rule 113 (expression_term -> LOCAL_VAR .)
    ELSE            reduce using rule 113 (expression_term -> LOCAL_VAR .)
    ELSIF           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    R_ULTRA_PAREN   reduce using rule 113 (expression_term -> LOCAL_VAR .)
    R_PAREN         reduce using rule 113 (expression_term -> LOCAL_VAR .)
    R_MAYUS_PAREN   reduce using rule 113 (expression_term -> LOCAL_VAR .)
    L_ULTRA_PAREN   shift and go to state 112
    DOT             shift and go to state 62
    L_PAREN         shift and go to state 113
    NOT             shift and go to state 50
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    CONSTANT        shift and go to state 32

  ! LOCAL_VAR       [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! GLOBAL_VAR      [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! INSTANCE_VAR    [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! CLASS_VAR       [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! CONSTANT        [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! PLUS            [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! MINUS           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! MULTIPLY        [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! DIVIDE          [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! MODULE          [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! EQUALS          [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! DIFFERENT       [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! GREATER         [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! LESS            [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! GREATER_EQUAL   [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! LESS_EQUAL      [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! AND             [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! OR              [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! OR_OPERATOR     [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! COMMA           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! PRINT           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! PUTS            [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! LOCAL_VAR       [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! GLOBAL_VAR      [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! INSTANCE_VAR    [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! CLASS_VAR       [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! DEF             [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! RETURN          [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! CLASS           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! CONSTANT        [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! IF              [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! UNTIL           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! UNLESS          [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! WHILE           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! $end            [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! END             [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! ELSE            [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! ELSIF           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! R_ULTRA_PAREN   [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! R_PAREN         [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! R_MAYUS_PAREN   [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]

    expression                     shift and go to state 43
    function_call                  shift and go to state 55
    argument_list                  shift and go to state 114
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49

state 55

    (115) expression_term -> function_call .

    PLUS            reduce using rule 115 (expression_term -> function_call .)
    MINUS           reduce using rule 115 (expression_term -> function_call .)
    MULTIPLY        reduce using rule 115 (expression_term -> function_call .)
    DIVIDE          reduce using rule 115 (expression_term -> function_call .)
    MODULE          reduce using rule 115 (expression_term -> function_call .)
    EQUALS          reduce using rule 115 (expression_term -> function_call .)
    DIFFERENT       reduce using rule 115 (expression_term -> function_call .)
    GREATER         reduce using rule 115 (expression_term -> function_call .)
    LESS            reduce using rule 115 (expression_term -> function_call .)
    GREATER_EQUAL   reduce using rule 115 (expression_term -> function_call .)
    LESS_EQUAL      reduce using rule 115 (expression_term -> function_call .)
    AND             reduce using rule 115 (expression_term -> function_call .)
    OR              reduce using rule 115 (expression_term -> function_call .)
    OR_OPERATOR     reduce using rule 115 (expression_term -> function_call .)
    COMMA           reduce using rule 115 (expression_term -> function_call .)
    PRINT           reduce using rule 115 (expression_term -> function_call .)
    PUTS            reduce using rule 115 (expression_term -> function_call .)
    LOCAL_VAR       reduce using rule 115 (expression_term -> function_call .)
    GLOBAL_VAR      reduce using rule 115 (expression_term -> function_call .)
    INSTANCE_VAR    reduce using rule 115 (expression_term -> function_call .)
    CLASS_VAR       reduce using rule 115 (expression_term -> function_call .)
    DEF             reduce using rule 115 (expression_term -> function_call .)
    RETURN          reduce using rule 115 (expression_term -> function_call .)
    CLASS           reduce using rule 115 (expression_term -> function_call .)
    CONSTANT        reduce using rule 115 (expression_term -> function_call .)
    L_ULTRA_PAREN   reduce using rule 115 (expression_term -> function_call .)
    IF              reduce using rule 115 (expression_term -> function_call .)
    UNTIL           reduce using rule 115 (expression_term -> function_call .)
    UNLESS          reduce using rule 115 (expression_term -> function_call .)
    WHILE           reduce using rule 115 (expression_term -> function_call .)
    $end            reduce using rule 115 (expression_term -> function_call .)
    END             reduce using rule 115 (expression_term -> function_call .)
    ELSE            reduce using rule 115 (expression_term -> function_call .)
    ELSIF           reduce using rule 115 (expression_term -> function_call .)
    R_ULTRA_PAREN   reduce using rule 115 (expression_term -> function_call .)
    R_PAREN         reduce using rule 115 (expression_term -> function_call .)
    R_MAYUS_PAREN   reduce using rule 115 (expression_term -> function_call .)


state 56

    (126) indexing -> GLOBAL_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (121) method_call -> GLOBAL_VAR . DOT function_call

    L_ULTRA_PAREN   shift and go to state 68
    DOT             shift and go to state 66


state 57

    (127) indexing -> INSTANCE_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (122) method_call -> INSTANCE_VAR . DOT function_call

    L_ULTRA_PAREN   shift and go to state 72
    DOT             shift and go to state 70


state 58

    (128) indexing -> CLASS_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (123) method_call -> CLASS_VAR . DOT function_call

    L_ULTRA_PAREN   shift and go to state 76
    DOT             shift and go to state 74


state 59

    (30) puts_statement -> PUTS L_PAREN . argument_list R_PAREN
    (31) puts_statement -> PUTS L_PAREN . R_PAREN
    (109) expression_group -> L_PAREN . expression R_PAREN
    (34) argument_list -> . expression
    (35) argument_list -> . argument_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    R_PAREN         shift and go to state 116
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    argument_list                  shift and go to state 115
    expression                     shift and go to state 95
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 60

    (32) puts_statement -> PUTS argument_list .
    (35) argument_list -> argument_list . COMMA expression

    PRINT           reduce using rule 32 (puts_statement -> PUTS argument_list .)
    PUTS            reduce using rule 32 (puts_statement -> PUTS argument_list .)
    LOCAL_VAR       reduce using rule 32 (puts_statement -> PUTS argument_list .)
    GLOBAL_VAR      reduce using rule 32 (puts_statement -> PUTS argument_list .)
    INSTANCE_VAR    reduce using rule 32 (puts_statement -> PUTS argument_list .)
    CLASS_VAR       reduce using rule 32 (puts_statement -> PUTS argument_list .)
    DEF             reduce using rule 32 (puts_statement -> PUTS argument_list .)
    RETURN          reduce using rule 32 (puts_statement -> PUTS argument_list .)
    CLASS           reduce using rule 32 (puts_statement -> PUTS argument_list .)
    CONSTANT        reduce using rule 32 (puts_statement -> PUTS argument_list .)
    L_ULTRA_PAREN   reduce using rule 32 (puts_statement -> PUTS argument_list .)
    IF              reduce using rule 32 (puts_statement -> PUTS argument_list .)
    UNTIL           reduce using rule 32 (puts_statement -> PUTS argument_list .)
    UNLESS          reduce using rule 32 (puts_statement -> PUTS argument_list .)
    WHILE           reduce using rule 32 (puts_statement -> PUTS argument_list .)
    $end            reduce using rule 32 (puts_statement -> PUTS argument_list .)
    END             reduce using rule 32 (puts_statement -> PUTS argument_list .)
    ELSE            reduce using rule 32 (puts_statement -> PUTS argument_list .)
    ELSIF           reduce using rule 32 (puts_statement -> PUTS argument_list .)
    COMMA           shift and go to state 96


state 61

    (36) input_statement -> LOCAL_VAR ASSIGN . GETS
    (37) input_statement -> LOCAL_VAR ASSIGN . GETS DOT CHOMP
    (22) assignment_statement -> LOCAL_VAR ASSIGN . expression
    (48) array_definition -> LOCAL_VAR ASSIGN . L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> LOCAL_VAR ASSIGN . L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> LOCAL_VAR ASSIGN . L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    GETS            shift and go to state 117
    L_ULTRA_PAREN   shift and go to state 119
    L_MAYUS_PAREN   shift and go to state 120
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 118
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 62

    (120) method_call -> LOCAL_VAR DOT . function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    LOCAL_VAR       shift and go to state 121

    function_call                  shift and go to state 122

state 63

    (56) array_append -> LOCAL_VAR APPEND . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 123
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 64

    (125) indexing -> LOCAL_VAR L_ULTRA_PAREN . expression R_ULTRA_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 124
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 65

    (23) assignment_statement -> GLOBAL_VAR ASSIGN . expression
    (50) array_definition -> GLOBAL_VAR ASSIGN . L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> GLOBAL_VAR ASSIGN . L_ULTRA_PAREN R_ULTRA_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    L_ULTRA_PAREN   shift and go to state 126
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 125
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 66

    (121) method_call -> GLOBAL_VAR DOT . function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    LOCAL_VAR       shift and go to state 121

    function_call                  shift and go to state 127

state 67

    (57) array_append -> GLOBAL_VAR APPEND . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 128
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 68

    (126) indexing -> GLOBAL_VAR L_ULTRA_PAREN . expression R_ULTRA_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 129
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 69

    (24) assignment_statement -> INSTANCE_VAR ASSIGN . expression
    (52) array_definition -> INSTANCE_VAR ASSIGN . L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> INSTANCE_VAR ASSIGN . L_ULTRA_PAREN R_ULTRA_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    L_ULTRA_PAREN   shift and go to state 131
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 130
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 70

    (122) method_call -> INSTANCE_VAR DOT . function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    LOCAL_VAR       shift and go to state 121

    function_call                  shift and go to state 132

state 71

    (58) array_append -> INSTANCE_VAR APPEND . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 133
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 72

    (127) indexing -> INSTANCE_VAR L_ULTRA_PAREN . expression R_ULTRA_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 134
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 73

    (25) assignment_statement -> CLASS_VAR ASSIGN . expression
    (54) array_definition -> CLASS_VAR ASSIGN . L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> CLASS_VAR ASSIGN . L_ULTRA_PAREN R_ULTRA_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    L_ULTRA_PAREN   shift and go to state 136
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 135
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 74

    (123) method_call -> CLASS_VAR DOT . function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    LOCAL_VAR       shift and go to state 121

    function_call                  shift and go to state 137

state 75

    (59) array_append -> CLASS_VAR APPEND . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 138
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 76

    (128) indexing -> CLASS_VAR L_ULTRA_PAREN . expression R_ULTRA_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 139
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 77

    (77) function_definition -> DEF LOCAL_VAR . parameter_list statement_list END
    (78) function_definition -> DEF LOCAL_VAR . statement_list END
    (79) parameter_list -> . L_PAREN parameter_list_inner R_PAREN
    (80) parameter_list -> . L_PAREN R_PAREN
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    L_PAREN         shift and go to state 142
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    parameter_list                 shift and go to state 140
    statement_list                 shift and go to state 141
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 78

    (21) return_statement -> RETURN expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PRINT           reduce using rule 21 (return_statement -> RETURN expression .)
    PUTS            reduce using rule 21 (return_statement -> RETURN expression .)
    LOCAL_VAR       reduce using rule 21 (return_statement -> RETURN expression .)
    GLOBAL_VAR      reduce using rule 21 (return_statement -> RETURN expression .)
    INSTANCE_VAR    reduce using rule 21 (return_statement -> RETURN expression .)
    CLASS_VAR       reduce using rule 21 (return_statement -> RETURN expression .)
    DEF             reduce using rule 21 (return_statement -> RETURN expression .)
    RETURN          reduce using rule 21 (return_statement -> RETURN expression .)
    CLASS           reduce using rule 21 (return_statement -> RETURN expression .)
    CONSTANT        reduce using rule 21 (return_statement -> RETURN expression .)
    L_ULTRA_PAREN   reduce using rule 21 (return_statement -> RETURN expression .)
    IF              reduce using rule 21 (return_statement -> RETURN expression .)
    UNTIL           reduce using rule 21 (return_statement -> RETURN expression .)
    UNLESS          reduce using rule 21 (return_statement -> RETURN expression .)
    WHILE           reduce using rule 21 (return_statement -> RETURN expression .)
    $end            reduce using rule 21 (return_statement -> RETURN expression .)
    END             reduce using rule 21 (return_statement -> RETURN expression .)
    ELSE            reduce using rule 21 (return_statement -> RETURN expression .)
    ELSIF           reduce using rule 21 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 79

    (109) expression_group -> L_PAREN . expression R_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 143
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 80

    (17) class_definition -> CLASS CONSTANT . class_body END
    (18) class_body -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    class_body                     shift and go to state 144
    statement_list                 shift and go to state 145
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 81

    (124) method_call -> CONSTANT DOT . function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    LOCAL_VAR       shift and go to state 121

    function_call                  shift and go to state 146

state 82

    (129) indexing -> L_ULTRA_PAREN TWO_POINTS . LOCAL_VAR R_ULTRA_PAREN

    LOCAL_VAR       shift and go to state 147


state 83

    (66) if_statement -> IF condition . statement_list END
    (67) if_statement -> IF condition . statement_list ELSE statement_list END
    (68) if_statement -> IF condition . statement_list ELSIF condition statement_list ELSE statement_list END
    (74) condition -> condition . logical_operator condition
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (45) logical_operator -> . AND
    (46) logical_operator -> . OR
    (47) logical_operator -> . OR_OPERATOR
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    AND             shift and go to state 150
    OR              shift and go to state 151
    OR_OPERATOR     shift and go to state 152
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement_list                 shift and go to state 148
    logical_operator               shift and go to state 149
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 84

    (73) condition -> expression . comparison_operator expression
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call
    (133) comparison_operator -> . EQUALS
    (134) comparison_operator -> . DIFFERENT
    (135) comparison_operator -> . LESS
    (136) comparison_operator -> . LESS_EQUAL
    (137) comparison_operator -> . GREATER
    (138) comparison_operator -> . GREATER_EQUAL

    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 154
    DIFFERENT       shift and go to state 155
    GREATER         shift and go to state 156
    LESS            shift and go to state 157
    GREATER_EQUAL   shift and go to state 158
    LESS_EQUAL      shift and go to state 159
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110

    comparison_operator            shift and go to state 153

state 85

    (75) condition -> NOT . condition
    (108) expression_not -> NOT . expression
    (73) condition -> . expression comparison_operator expression
    (74) condition -> . condition logical_operator condition
    (75) condition -> . NOT condition
    (76) condition -> . L_PAREN condition R_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 85
    L_PAREN         shift and go to state 86
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    condition                      shift and go to state 160
    expression                     shift and go to state 161
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 86

    (76) condition -> L_PAREN . condition R_PAREN
    (109) expression_group -> L_PAREN . expression R_PAREN
    (73) condition -> . expression comparison_operator expression
    (74) condition -> . condition logical_operator condition
    (75) condition -> . NOT condition
    (76) condition -> . L_PAREN condition R_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 85
    L_PAREN         shift and go to state 86
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    condition                      shift and go to state 162
    expression                     shift and go to state 163
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 87

    (72) until_statement -> UNTIL condition . statement_list END
    (74) condition -> condition . logical_operator condition
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (45) logical_operator -> . AND
    (46) logical_operator -> . OR
    (47) logical_operator -> . OR_OPERATOR
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    AND             shift and go to state 150
    OR              shift and go to state 151
    OR_OPERATOR     shift and go to state 152
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement_list                 shift and go to state 164
    logical_operator               shift and go to state 149
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 88

    (70) unless_statement -> UNLESS condition . statement_list END
    (71) unless_statement -> UNLESS condition . statement_list ELSE statement_list END
    (74) condition -> condition . logical_operator condition
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (45) logical_operator -> . AND
    (46) logical_operator -> . OR
    (47) logical_operator -> . OR_OPERATOR
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    AND             shift and go to state 150
    OR              shift and go to state 151
    OR_OPERATOR     shift and go to state 152
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement_list                 shift and go to state 165
    logical_operator               shift and go to state 149
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 89

    (69) while_statement -> WHILE condition . statement_list END
    (74) condition -> condition . logical_operator condition
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (45) logical_operator -> . AND
    (46) logical_operator -> . OR
    (47) logical_operator -> . OR_OPERATOR
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    AND             shift and go to state 150
    OR              shift and go to state 151
    OR_OPERATOR     shift and go to state 152
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement_list                 shift and go to state 166
    logical_operator               shift and go to state 149
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 90

    (130) indexing -> indexing L_ULTRA_PAREN expression . R_ULTRA_PAREN
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    R_ULTRA_PAREN   shift and go to state 167
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 91

    (131) indexing -> indexing L_ULTRA_PAREN TWO_POINTS . LOCAL_VAR R_ULTRA_PAREN

    LOCAL_VAR       shift and go to state 168


state 92

    (132) array_assignament -> indexing ASSIGN expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PRINT           reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    PUTS            reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    LOCAL_VAR       reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    GLOBAL_VAR      reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    CLASS_VAR       reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    DEF             reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    RETURN          reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    CLASS           reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    CONSTANT        reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    L_ULTRA_PAREN   reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    IF              reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    UNTIL           reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    UNLESS          reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    WHILE           reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    $end            reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    END             reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    ELSE            reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    ELSIF           reduce using rule 132 (array_assignament -> indexing ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 93

    (26) print_statement -> PRINT L_PAREN argument_list . R_PAREN
    (35) argument_list -> argument_list . COMMA expression

    R_PAREN         shift and go to state 169
    COMMA           shift and go to state 96


state 94

    (27) print_statement -> PRINT L_PAREN R_PAREN .

    PRINT           reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    PUTS            reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    LOCAL_VAR       reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    GLOBAL_VAR      reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    INSTANCE_VAR    reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    CLASS_VAR       reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    DEF             reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    RETURN          reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    CLASS           reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    CONSTANT        reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    L_ULTRA_PAREN   reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    IF              reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    UNTIL           reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    UNLESS          reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    WHILE           reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    $end            reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    END             reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    ELSE            reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)
    ELSIF           reduce using rule 27 (print_statement -> PRINT L_PAREN R_PAREN .)


state 95

    (109) expression_group -> L_PAREN expression . R_PAREN
    (34) argument_list -> expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

  ! shift/reduce conflict for R_PAREN resolved as shift
    R_PAREN         shift and go to state 170
    COMMA           reduce using rule 34 (argument_list -> expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110

  ! R_PAREN         [ reduce using rule 34 (argument_list -> expression .) ]


state 96

    (35) argument_list -> argument_list COMMA . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 171
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 97

    (89) expression_binop -> expression PLUS . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 172
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 98

    (90) expression_binop -> expression MINUS . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 173
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 99

    (91) expression_binop -> expression MULTIPLY . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 174
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 100

    (92) expression_binop -> expression DIVIDE . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 175
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 101

    (93) expression_binop -> expression MODULE . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 176
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 102

    (94) expression_binop -> expression EQUALS . expression
    (107) expression_binop -> expression EQUALS . method_call
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    LOCAL_VAR       shift and go to state 179
    GLOBAL_VAR      shift and go to state 180
    INSTANCE_VAR    shift and go to state 181
    CLASS_VAR       shift and go to state 182
    CONSTANT        shift and go to state 32
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    L_ULTRA_PAREN   shift and go to state 33

    expression                     shift and go to state 177
    method_call                    shift and go to state 178
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    function_call                  shift and go to state 55

state 103

    (95) expression_binop -> expression DIFFERENT . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 183
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 104

    (96) expression_binop -> expression GREATER . expression
    (105) expression_binop -> expression GREATER . method_call
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    LOCAL_VAR       shift and go to state 179
    GLOBAL_VAR      shift and go to state 180
    INSTANCE_VAR    shift and go to state 181
    CLASS_VAR       shift and go to state 182
    CONSTANT        shift and go to state 32
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    L_ULTRA_PAREN   shift and go to state 33

    expression                     shift and go to state 184
    method_call                    shift and go to state 185
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    function_call                  shift and go to state 55

state 105

    (97) expression_binop -> expression LESS . expression
    (106) expression_binop -> expression LESS . method_call
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    LOCAL_VAR       shift and go to state 179
    GLOBAL_VAR      shift and go to state 180
    INSTANCE_VAR    shift and go to state 181
    CLASS_VAR       shift and go to state 182
    CONSTANT        shift and go to state 32
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    L_ULTRA_PAREN   shift and go to state 33

    expression                     shift and go to state 186
    method_call                    shift and go to state 187
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    function_call                  shift and go to state 55

state 106

    (98) expression_binop -> expression GREATER_EQUAL . expression
    (103) expression_binop -> expression GREATER_EQUAL . method_call
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    LOCAL_VAR       shift and go to state 179
    GLOBAL_VAR      shift and go to state 180
    INSTANCE_VAR    shift and go to state 181
    CLASS_VAR       shift and go to state 182
    CONSTANT        shift and go to state 32
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    L_ULTRA_PAREN   shift and go to state 33

    expression                     shift and go to state 188
    method_call                    shift and go to state 189
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    function_call                  shift and go to state 55

state 107

    (99) expression_binop -> expression LESS_EQUAL . expression
    (104) expression_binop -> expression LESS_EQUAL . method_call
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    LOCAL_VAR       shift and go to state 179
    GLOBAL_VAR      shift and go to state 180
    INSTANCE_VAR    shift and go to state 181
    CLASS_VAR       shift and go to state 182
    CONSTANT        shift and go to state 32
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    L_ULTRA_PAREN   shift and go to state 33

    expression                     shift and go to state 190
    method_call                    shift and go to state 191
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    function_call                  shift and go to state 55

state 108

    (100) expression_binop -> expression AND . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 192
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 109

    (101) expression_binop -> expression OR . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 193
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 110

    (102) expression_binop -> expression OR_OPERATOR . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 194
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 111

    (108) expression_not -> NOT expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    OR_OPERATOR     reduce using rule 108 (expression_not -> NOT expression .)
    COMMA           reduce using rule 108 (expression_not -> NOT expression .)
    PRINT           reduce using rule 108 (expression_not -> NOT expression .)
    PUTS            reduce using rule 108 (expression_not -> NOT expression .)
    LOCAL_VAR       reduce using rule 108 (expression_not -> NOT expression .)
    GLOBAL_VAR      reduce using rule 108 (expression_not -> NOT expression .)
    INSTANCE_VAR    reduce using rule 108 (expression_not -> NOT expression .)
    CLASS_VAR       reduce using rule 108 (expression_not -> NOT expression .)
    DEF             reduce using rule 108 (expression_not -> NOT expression .)
    RETURN          reduce using rule 108 (expression_not -> NOT expression .)
    CLASS           reduce using rule 108 (expression_not -> NOT expression .)
    CONSTANT        reduce using rule 108 (expression_not -> NOT expression .)
    L_ULTRA_PAREN   reduce using rule 108 (expression_not -> NOT expression .)
    IF              reduce using rule 108 (expression_not -> NOT expression .)
    UNTIL           reduce using rule 108 (expression_not -> NOT expression .)
    UNLESS          reduce using rule 108 (expression_not -> NOT expression .)
    WHILE           reduce using rule 108 (expression_not -> NOT expression .)
    $end            reduce using rule 108 (expression_not -> NOT expression .)
    END             reduce using rule 108 (expression_not -> NOT expression .)
    ELSE            reduce using rule 108 (expression_not -> NOT expression .)
    ELSIF           reduce using rule 108 (expression_not -> NOT expression .)
    R_ULTRA_PAREN   reduce using rule 108 (expression_not -> NOT expression .)
    R_PAREN         reduce using rule 108 (expression_not -> NOT expression .)
    R_MAYUS_PAREN   reduce using rule 108 (expression_not -> NOT expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109

  ! PLUS            [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! MINUS           [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! MODULE          [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! DIFFERENT       [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! GREATER         [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! LESS            [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! LESS_EQUAL      [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! AND             [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! OR              [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 112

    (125) indexing -> LOCAL_VAR L_ULTRA_PAREN . expression R_ULTRA_PAREN
    (129) indexing -> L_ULTRA_PAREN . TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    TWO_POINTS      shift and go to state 82
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 124
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 113

    (116) function_call -> LOCAL_VAR L_PAREN . argument_list R_PAREN
    (117) function_call -> LOCAL_VAR L_PAREN . R_PAREN
    (109) expression_group -> L_PAREN . expression R_PAREN
    (34) argument_list -> . expression
    (35) argument_list -> . argument_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    R_PAREN         shift and go to state 196
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    argument_list                  shift and go to state 195
    expression                     shift and go to state 95
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 114

    (118) function_call -> LOCAL_VAR argument_list .
    (35) argument_list -> argument_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    PLUS            reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    MINUS           reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    MULTIPLY        reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    DIVIDE          reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    MODULE          reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    EQUALS          reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    DIFFERENT       reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    GREATER         reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    LESS            reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    GREATER_EQUAL   reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    LESS_EQUAL      reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    AND             reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    OR              reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    OR_OPERATOR     reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    PRINT           reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    PUTS            reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    LOCAL_VAR       reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    GLOBAL_VAR      reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    INSTANCE_VAR    reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    CLASS_VAR       reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    DEF             reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    RETURN          reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    CLASS           reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    CONSTANT        reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    L_ULTRA_PAREN   reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    IF              reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    UNTIL           reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    UNLESS          reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    WHILE           reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    $end            reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    END             reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    ELSE            reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    ELSIF           reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    R_ULTRA_PAREN   reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    R_PAREN         reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    R_MAYUS_PAREN   reduce using rule 118 (function_call -> LOCAL_VAR argument_list .)
    COMMA           shift and go to state 96

  ! COMMA           [ reduce using rule 118 (function_call -> LOCAL_VAR argument_list .) ]


state 115

    (30) puts_statement -> PUTS L_PAREN argument_list . R_PAREN
    (35) argument_list -> argument_list . COMMA expression

    R_PAREN         shift and go to state 197
    COMMA           shift and go to state 96


state 116

    (31) puts_statement -> PUTS L_PAREN R_PAREN .

    PRINT           reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    PUTS            reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    LOCAL_VAR       reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    GLOBAL_VAR      reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    INSTANCE_VAR    reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    CLASS_VAR       reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    DEF             reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    RETURN          reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    CLASS           reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    CONSTANT        reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    L_ULTRA_PAREN   reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    IF              reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    UNTIL           reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    UNLESS          reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    WHILE           reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    $end            reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    END             reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    ELSE            reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)
    ELSIF           reduce using rule 31 (puts_statement -> PUTS L_PAREN R_PAREN .)


state 117

    (36) input_statement -> LOCAL_VAR ASSIGN GETS .
    (37) input_statement -> LOCAL_VAR ASSIGN GETS . DOT CHOMP

    PRINT           reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    PUTS            reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    LOCAL_VAR       reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    INSTANCE_VAR    reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    CLASS_VAR       reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    DEF             reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    RETURN          reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    CLASS           reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    CONSTANT        reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    L_ULTRA_PAREN   reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    IF              reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    UNTIL           reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    UNLESS          reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    WHILE           reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    $end            reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    END             reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    ELSE            reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    ELSIF           reduce using rule 36 (input_statement -> LOCAL_VAR ASSIGN GETS .)
    DOT             shift and go to state 198


state 118

    (22) assignment_statement -> LOCAL_VAR ASSIGN expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PRINT           reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    PUTS            reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    LOCAL_VAR       reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    GLOBAL_VAR      reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    CLASS_VAR       reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    DEF             reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    RETURN          reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    CLASS           reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    CONSTANT        reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    L_ULTRA_PAREN   reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    IF              reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    UNTIL           reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    UNLESS          reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    WHILE           reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    $end            reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    END             reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    ELSE            reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    ELSIF           reduce using rule 22 (assignment_statement -> LOCAL_VAR ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 119

    (48) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN . element_list R_ULTRA_PAREN
    (49) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN . R_ULTRA_PAREN
    (129) indexing -> L_ULTRA_PAREN . TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (60) element_list -> . expression
    (61) element_list -> . element_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    R_ULTRA_PAREN   shift and go to state 200
    TWO_POINTS      shift and go to state 82
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    element_list                   shift and go to state 199
    expression                     shift and go to state 201
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 120

    (40) hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN . hash_element_list R_MAYUS_PAREN
    (41) hash_element_list -> . hash_element
    (42) hash_element_list -> . hash_element_list COMMA hash_element
    (43) hash_element -> . STRING HASHARROW expression
    (44) hash_element -> . LOCAL_VAR TWO_POINTS expression

    STRING          shift and go to state 205
    LOCAL_VAR       shift and go to state 202

    hash_element_list              shift and go to state 203
    hash_element                   shift and go to state 204

state 121

    (116) function_call -> LOCAL_VAR . L_PAREN argument_list R_PAREN
    (117) function_call -> LOCAL_VAR . L_PAREN R_PAREN
    (118) function_call -> LOCAL_VAR . argument_list
    (119) function_call -> LOCAL_VAR .
    (34) argument_list -> . expression
    (35) argument_list -> . argument_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

  ! shift/reduce conflict for LOCAL_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for CLASS_VAR resolved as shift
  ! shift/reduce conflict for L_ULTRA_PAREN resolved as shift
  ! shift/reduce conflict for CONSTANT resolved as shift
    L_PAREN         shift and go to state 113
    PLUS            reduce using rule 119 (function_call -> LOCAL_VAR .)
    MINUS           reduce using rule 119 (function_call -> LOCAL_VAR .)
    MULTIPLY        reduce using rule 119 (function_call -> LOCAL_VAR .)
    DIVIDE          reduce using rule 119 (function_call -> LOCAL_VAR .)
    MODULE          reduce using rule 119 (function_call -> LOCAL_VAR .)
    EQUALS          reduce using rule 119 (function_call -> LOCAL_VAR .)
    DIFFERENT       reduce using rule 119 (function_call -> LOCAL_VAR .)
    GREATER         reduce using rule 119 (function_call -> LOCAL_VAR .)
    LESS            reduce using rule 119 (function_call -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 119 (function_call -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 119 (function_call -> LOCAL_VAR .)
    AND             reduce using rule 119 (function_call -> LOCAL_VAR .)
    OR              reduce using rule 119 (function_call -> LOCAL_VAR .)
    OR_OPERATOR     reduce using rule 119 (function_call -> LOCAL_VAR .)
    COMMA           reduce using rule 119 (function_call -> LOCAL_VAR .)
    PRINT           reduce using rule 119 (function_call -> LOCAL_VAR .)
    PUTS            reduce using rule 119 (function_call -> LOCAL_VAR .)
    DEF             reduce using rule 119 (function_call -> LOCAL_VAR .)
    RETURN          reduce using rule 119 (function_call -> LOCAL_VAR .)
    CLASS           reduce using rule 119 (function_call -> LOCAL_VAR .)
    IF              reduce using rule 119 (function_call -> LOCAL_VAR .)
    UNTIL           reduce using rule 119 (function_call -> LOCAL_VAR .)
    UNLESS          reduce using rule 119 (function_call -> LOCAL_VAR .)
    WHILE           reduce using rule 119 (function_call -> LOCAL_VAR .)
    $end            reduce using rule 119 (function_call -> LOCAL_VAR .)
    END             reduce using rule 119 (function_call -> LOCAL_VAR .)
    ELSE            reduce using rule 119 (function_call -> LOCAL_VAR .)
    ELSIF           reduce using rule 119 (function_call -> LOCAL_VAR .)
    R_ULTRA_PAREN   reduce using rule 119 (function_call -> LOCAL_VAR .)
    R_PAREN         reduce using rule 119 (function_call -> LOCAL_VAR .)
    R_MAYUS_PAREN   reduce using rule 119 (function_call -> LOCAL_VAR .)
    NOT             shift and go to state 50
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

  ! LOCAL_VAR       [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! GLOBAL_VAR      [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! INSTANCE_VAR    [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! CLASS_VAR       [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! CONSTANT        [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]

    argument_list                  shift and go to state 114
    expression                     shift and go to state 43
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 122

    (120) method_call -> LOCAL_VAR DOT function_call .

    PRINT           reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    PUTS            reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    LOCAL_VAR       reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    GLOBAL_VAR      reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    INSTANCE_VAR    reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    CLASS_VAR       reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    DEF             reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    RETURN          reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    CLASS           reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    CONSTANT        reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    L_ULTRA_PAREN   reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    IF              reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    UNTIL           reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    UNLESS          reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    WHILE           reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    $end            reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    PLUS            reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    MINUS           reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    MULTIPLY        reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    DIVIDE          reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    MODULE          reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    EQUALS          reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    DIFFERENT       reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    GREATER         reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    LESS            reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    GREATER_EQUAL   reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    LESS_EQUAL      reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    AND             reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    OR              reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    OR_OPERATOR     reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    COMMA           reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    END             reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    ELSE            reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    ELSIF           reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    R_ULTRA_PAREN   reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    R_PAREN         reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)
    R_MAYUS_PAREN   reduce using rule 120 (method_call -> LOCAL_VAR DOT function_call .)


state 123

    (56) array_append -> LOCAL_VAR APPEND expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PRINT           reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    PUTS            reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    LOCAL_VAR       reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    GLOBAL_VAR      reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    INSTANCE_VAR    reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    CLASS_VAR       reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    DEF             reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    RETURN          reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    CLASS           reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    CONSTANT        reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    L_ULTRA_PAREN   reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    IF              reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    UNTIL           reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    UNLESS          reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    WHILE           reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    $end            reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    END             reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    ELSE            reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    ELSIF           reduce using rule 56 (array_append -> LOCAL_VAR APPEND expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 124

    (125) indexing -> LOCAL_VAR L_ULTRA_PAREN expression . R_ULTRA_PAREN
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    R_ULTRA_PAREN   shift and go to state 206
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 125

    (23) assignment_statement -> GLOBAL_VAR ASSIGN expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PRINT           reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    PUTS            reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    LOCAL_VAR       reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    GLOBAL_VAR      reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    CLASS_VAR       reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    DEF             reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    RETURN          reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    CLASS           reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    CONSTANT        reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    L_ULTRA_PAREN   reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    IF              reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    UNTIL           reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    UNLESS          reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    WHILE           reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    $end            reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    END             reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    ELSE            reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    ELSIF           reduce using rule 23 (assignment_statement -> GLOBAL_VAR ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 126

    (50) array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN . element_list R_ULTRA_PAREN
    (51) array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN . R_ULTRA_PAREN
    (129) indexing -> L_ULTRA_PAREN . TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (60) element_list -> . expression
    (61) element_list -> . element_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    R_ULTRA_PAREN   shift and go to state 208
    TWO_POINTS      shift and go to state 82
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    element_list                   shift and go to state 207
    expression                     shift and go to state 201
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 127

    (121) method_call -> GLOBAL_VAR DOT function_call .

    PRINT           reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    PUTS            reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    LOCAL_VAR       reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    GLOBAL_VAR      reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    INSTANCE_VAR    reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    CLASS_VAR       reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    DEF             reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    RETURN          reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    CLASS           reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    CONSTANT        reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    L_ULTRA_PAREN   reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    IF              reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    UNTIL           reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    UNLESS          reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    WHILE           reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    $end            reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    PLUS            reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    MINUS           reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    MULTIPLY        reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    DIVIDE          reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    MODULE          reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    EQUALS          reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    DIFFERENT       reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    GREATER         reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    LESS            reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    GREATER_EQUAL   reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    LESS_EQUAL      reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    AND             reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    OR              reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    OR_OPERATOR     reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    COMMA           reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    END             reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    ELSE            reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    ELSIF           reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    R_ULTRA_PAREN   reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    R_PAREN         reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)
    R_MAYUS_PAREN   reduce using rule 121 (method_call -> GLOBAL_VAR DOT function_call .)


state 128

    (57) array_append -> GLOBAL_VAR APPEND expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PRINT           reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    PUTS            reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    LOCAL_VAR       reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    GLOBAL_VAR      reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    INSTANCE_VAR    reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    CLASS_VAR       reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    DEF             reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    RETURN          reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    CLASS           reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    CONSTANT        reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    L_ULTRA_PAREN   reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    IF              reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    UNTIL           reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    UNLESS          reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    WHILE           reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    $end            reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    END             reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    ELSE            reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    ELSIF           reduce using rule 57 (array_append -> GLOBAL_VAR APPEND expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 129

    (126) indexing -> GLOBAL_VAR L_ULTRA_PAREN expression . R_ULTRA_PAREN
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    R_ULTRA_PAREN   shift and go to state 209
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 130

    (24) assignment_statement -> INSTANCE_VAR ASSIGN expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PRINT           reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    PUTS            reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    LOCAL_VAR       reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    GLOBAL_VAR      reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    CLASS_VAR       reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    DEF             reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    RETURN          reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    CLASS           reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    CONSTANT        reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    L_ULTRA_PAREN   reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    IF              reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    UNTIL           reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    UNLESS          reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    WHILE           reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    $end            reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    END             reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    ELSE            reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    ELSIF           reduce using rule 24 (assignment_statement -> INSTANCE_VAR ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 131

    (52) array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN . element_list R_ULTRA_PAREN
    (53) array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN . R_ULTRA_PAREN
    (129) indexing -> L_ULTRA_PAREN . TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (60) element_list -> . expression
    (61) element_list -> . element_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    R_ULTRA_PAREN   shift and go to state 211
    TWO_POINTS      shift and go to state 82
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    element_list                   shift and go to state 210
    expression                     shift and go to state 201
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 132

    (122) method_call -> INSTANCE_VAR DOT function_call .

    PRINT           reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    PUTS            reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    LOCAL_VAR       reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    GLOBAL_VAR      reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    INSTANCE_VAR    reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    CLASS_VAR       reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    DEF             reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    RETURN          reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    CLASS           reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    CONSTANT        reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    L_ULTRA_PAREN   reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    IF              reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    UNTIL           reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    UNLESS          reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    WHILE           reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    $end            reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    PLUS            reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    MINUS           reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    MULTIPLY        reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    DIVIDE          reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    MODULE          reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    EQUALS          reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    DIFFERENT       reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    GREATER         reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    LESS            reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    GREATER_EQUAL   reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    LESS_EQUAL      reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    AND             reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    OR              reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    OR_OPERATOR     reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    COMMA           reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    END             reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    ELSE            reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    ELSIF           reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    R_ULTRA_PAREN   reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    R_PAREN         reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)
    R_MAYUS_PAREN   reduce using rule 122 (method_call -> INSTANCE_VAR DOT function_call .)


state 133

    (58) array_append -> INSTANCE_VAR APPEND expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PRINT           reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    PUTS            reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    LOCAL_VAR       reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    GLOBAL_VAR      reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    INSTANCE_VAR    reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    CLASS_VAR       reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    DEF             reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    RETURN          reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    CLASS           reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    CONSTANT        reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    L_ULTRA_PAREN   reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    IF              reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    UNTIL           reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    UNLESS          reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    WHILE           reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    $end            reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    END             reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    ELSE            reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    ELSIF           reduce using rule 58 (array_append -> INSTANCE_VAR APPEND expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 134

    (127) indexing -> INSTANCE_VAR L_ULTRA_PAREN expression . R_ULTRA_PAREN
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    R_ULTRA_PAREN   shift and go to state 212
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 135

    (25) assignment_statement -> CLASS_VAR ASSIGN expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PRINT           reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    PUTS            reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    LOCAL_VAR       reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    GLOBAL_VAR      reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    CLASS_VAR       reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    DEF             reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    RETURN          reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    CLASS           reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    CONSTANT        reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    L_ULTRA_PAREN   reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    IF              reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    UNTIL           reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    UNLESS          reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    WHILE           reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    $end            reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    END             reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    ELSE            reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    ELSIF           reduce using rule 25 (assignment_statement -> CLASS_VAR ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 136

    (54) array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN . element_list R_ULTRA_PAREN
    (55) array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN . R_ULTRA_PAREN
    (129) indexing -> L_ULTRA_PAREN . TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (60) element_list -> . expression
    (61) element_list -> . element_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    R_ULTRA_PAREN   shift and go to state 214
    TWO_POINTS      shift and go to state 82
    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    element_list                   shift and go to state 213
    expression                     shift and go to state 201
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 137

    (123) method_call -> CLASS_VAR DOT function_call .

    PRINT           reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    PUTS            reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    LOCAL_VAR       reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    GLOBAL_VAR      reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    INSTANCE_VAR    reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    CLASS_VAR       reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    DEF             reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    RETURN          reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    CLASS           reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    CONSTANT        reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    L_ULTRA_PAREN   reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    IF              reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    UNTIL           reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    UNLESS          reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    WHILE           reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    $end            reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    PLUS            reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    MINUS           reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    MULTIPLY        reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    DIVIDE          reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    MODULE          reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    EQUALS          reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    DIFFERENT       reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    GREATER         reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    LESS            reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    GREATER_EQUAL   reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    LESS_EQUAL      reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    AND             reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    OR              reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    OR_OPERATOR     reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    COMMA           reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    END             reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    ELSE            reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    ELSIF           reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    R_ULTRA_PAREN   reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    R_PAREN         reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)
    R_MAYUS_PAREN   reduce using rule 123 (method_call -> CLASS_VAR DOT function_call .)


state 138

    (59) array_append -> CLASS_VAR APPEND expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PRINT           reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    PUTS            reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    LOCAL_VAR       reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    GLOBAL_VAR      reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    INSTANCE_VAR    reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    CLASS_VAR       reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    DEF             reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    RETURN          reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    CLASS           reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    CONSTANT        reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    L_ULTRA_PAREN   reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    IF              reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    UNTIL           reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    UNLESS          reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    WHILE           reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    $end            reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    END             reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    ELSE            reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    ELSIF           reduce using rule 59 (array_append -> CLASS_VAR APPEND expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 139

    (128) indexing -> CLASS_VAR L_ULTRA_PAREN expression . R_ULTRA_PAREN
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    R_ULTRA_PAREN   shift and go to state 215
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 140

    (77) function_definition -> DEF LOCAL_VAR parameter_list . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement_list                 shift and go to state 216
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 141

    (78) function_definition -> DEF LOCAL_VAR statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 217
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 142

    (79) parameter_list -> L_PAREN . parameter_list_inner R_PAREN
    (80) parameter_list -> L_PAREN . R_PAREN
    (81) parameter_list_inner -> . LOCAL_VAR
    (82) parameter_list_inner -> . parameter_list_inner COMMA LOCAL_VAR

    R_PAREN         shift and go to state 219
    LOCAL_VAR       shift and go to state 220

    parameter_list_inner           shift and go to state 218

state 143

    (109) expression_group -> L_PAREN expression . R_PAREN
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    R_PAREN         shift and go to state 170
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 144

    (17) class_definition -> CLASS CONSTANT class_body . END

    END             shift and go to state 221


state 145

    (18) class_body -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    END             reduce using rule 18 (class_body -> statement_list .)
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 146

    (124) method_call -> CONSTANT DOT function_call .

    PRINT           reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    PUTS            reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    LOCAL_VAR       reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    GLOBAL_VAR      reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    INSTANCE_VAR    reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    CLASS_VAR       reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    DEF             reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    RETURN          reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    CLASS           reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    CONSTANT        reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    L_ULTRA_PAREN   reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    IF              reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    UNTIL           reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    UNLESS          reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    WHILE           reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    $end            reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    PLUS            reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    MINUS           reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    MULTIPLY        reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    DIVIDE          reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    MODULE          reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    EQUALS          reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    DIFFERENT       reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    GREATER         reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    LESS            reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    GREATER_EQUAL   reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    LESS_EQUAL      reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    AND             reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    OR              reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    OR_OPERATOR     reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    COMMA           reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    END             reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    ELSE            reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    ELSIF           reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    R_ULTRA_PAREN   reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    R_PAREN         reduce using rule 124 (method_call -> CONSTANT DOT function_call .)
    R_MAYUS_PAREN   reduce using rule 124 (method_call -> CONSTANT DOT function_call .)


state 147

    (129) indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR . R_ULTRA_PAREN

    R_ULTRA_PAREN   shift and go to state 222


state 148

    (66) if_statement -> IF condition statement_list . END
    (67) if_statement -> IF condition statement_list . ELSE statement_list END
    (68) if_statement -> IF condition statement_list . ELSIF condition statement_list ELSE statement_list END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 223
    ELSE            shift and go to state 224
    ELSIF           shift and go to state 225
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 149

    (74) condition -> condition logical_operator . condition
    (73) condition -> . expression comparison_operator expression
    (74) condition -> . condition logical_operator condition
    (75) condition -> . NOT condition
    (76) condition -> . L_PAREN condition R_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 85
    L_PAREN         shift and go to state 86
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    condition                      shift and go to state 226
    expression                     shift and go to state 84
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 150

    (45) logical_operator -> AND .

    NOT             reduce using rule 45 (logical_operator -> AND .)
    L_PAREN         reduce using rule 45 (logical_operator -> AND .)
    INTEGER         reduce using rule 45 (logical_operator -> AND .)
    FLOAT           reduce using rule 45 (logical_operator -> AND .)
    STRING          reduce using rule 45 (logical_operator -> AND .)
    LOCAL_VAR       reduce using rule 45 (logical_operator -> AND .)
    GLOBAL_VAR      reduce using rule 45 (logical_operator -> AND .)
    INSTANCE_VAR    reduce using rule 45 (logical_operator -> AND .)
    CLASS_VAR       reduce using rule 45 (logical_operator -> AND .)
    L_ULTRA_PAREN   reduce using rule 45 (logical_operator -> AND .)
    CONSTANT        reduce using rule 45 (logical_operator -> AND .)


state 151

    (46) logical_operator -> OR .

    NOT             reduce using rule 46 (logical_operator -> OR .)
    L_PAREN         reduce using rule 46 (logical_operator -> OR .)
    INTEGER         reduce using rule 46 (logical_operator -> OR .)
    FLOAT           reduce using rule 46 (logical_operator -> OR .)
    STRING          reduce using rule 46 (logical_operator -> OR .)
    LOCAL_VAR       reduce using rule 46 (logical_operator -> OR .)
    GLOBAL_VAR      reduce using rule 46 (logical_operator -> OR .)
    INSTANCE_VAR    reduce using rule 46 (logical_operator -> OR .)
    CLASS_VAR       reduce using rule 46 (logical_operator -> OR .)
    L_ULTRA_PAREN   reduce using rule 46 (logical_operator -> OR .)
    CONSTANT        reduce using rule 46 (logical_operator -> OR .)


state 152

    (47) logical_operator -> OR_OPERATOR .

    NOT             reduce using rule 47 (logical_operator -> OR_OPERATOR .)
    L_PAREN         reduce using rule 47 (logical_operator -> OR_OPERATOR .)
    INTEGER         reduce using rule 47 (logical_operator -> OR_OPERATOR .)
    FLOAT           reduce using rule 47 (logical_operator -> OR_OPERATOR .)
    STRING          reduce using rule 47 (logical_operator -> OR_OPERATOR .)
    LOCAL_VAR       reduce using rule 47 (logical_operator -> OR_OPERATOR .)
    GLOBAL_VAR      reduce using rule 47 (logical_operator -> OR_OPERATOR .)
    INSTANCE_VAR    reduce using rule 47 (logical_operator -> OR_OPERATOR .)
    CLASS_VAR       reduce using rule 47 (logical_operator -> OR_OPERATOR .)
    L_ULTRA_PAREN   reduce using rule 47 (logical_operator -> OR_OPERATOR .)
    CONSTANT        reduce using rule 47 (logical_operator -> OR_OPERATOR .)


state 153

    (73) condition -> expression comparison_operator . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 227
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 154

    (94) expression_binop -> expression EQUALS . expression
    (107) expression_binop -> expression EQUALS . method_call
    (133) comparison_operator -> EQUALS .
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             reduce using rule 133 (comparison_operator -> EQUALS .)
    L_PAREN         reduce using rule 133 (comparison_operator -> EQUALS .)
    INTEGER         reduce using rule 133 (comparison_operator -> EQUALS .)
    FLOAT           reduce using rule 133 (comparison_operator -> EQUALS .)
    STRING          reduce using rule 133 (comparison_operator -> EQUALS .)
    LOCAL_VAR       reduce using rule 133 (comparison_operator -> EQUALS .)
    GLOBAL_VAR      reduce using rule 133 (comparison_operator -> EQUALS .)
    INSTANCE_VAR    reduce using rule 133 (comparison_operator -> EQUALS .)
    CLASS_VAR       reduce using rule 133 (comparison_operator -> EQUALS .)
    L_ULTRA_PAREN   reduce using rule 133 (comparison_operator -> EQUALS .)
    CONSTANT        reduce using rule 133 (comparison_operator -> EQUALS .)

  ! LOCAL_VAR       [ shift and go to state 179 ]
  ! GLOBAL_VAR      [ shift and go to state 180 ]
  ! INSTANCE_VAR    [ shift and go to state 181 ]
  ! CLASS_VAR       [ shift and go to state 182 ]
  ! CONSTANT        [ shift and go to state 32 ]
  ! NOT             [ shift and go to state 50 ]
  ! L_PAREN         [ shift and go to state 79 ]
  ! INTEGER         [ shift and go to state 51 ]
  ! FLOAT           [ shift and go to state 52 ]
  ! STRING          [ shift and go to state 53 ]
  ! L_ULTRA_PAREN   [ shift and go to state 33 ]

    expression                     shift and go to state 177
    method_call                    shift and go to state 178
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    function_call                  shift and go to state 55

state 155

    (95) expression_binop -> expression DIFFERENT . expression
    (134) comparison_operator -> DIFFERENT .
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             reduce using rule 134 (comparison_operator -> DIFFERENT .)
    L_PAREN         reduce using rule 134 (comparison_operator -> DIFFERENT .)
    INTEGER         reduce using rule 134 (comparison_operator -> DIFFERENT .)
    FLOAT           reduce using rule 134 (comparison_operator -> DIFFERENT .)
    STRING          reduce using rule 134 (comparison_operator -> DIFFERENT .)
    LOCAL_VAR       reduce using rule 134 (comparison_operator -> DIFFERENT .)
    GLOBAL_VAR      reduce using rule 134 (comparison_operator -> DIFFERENT .)
    INSTANCE_VAR    reduce using rule 134 (comparison_operator -> DIFFERENT .)
    CLASS_VAR       reduce using rule 134 (comparison_operator -> DIFFERENT .)
    L_ULTRA_PAREN   reduce using rule 134 (comparison_operator -> DIFFERENT .)
    CONSTANT        reduce using rule 134 (comparison_operator -> DIFFERENT .)

  ! NOT             [ shift and go to state 50 ]
  ! L_PAREN         [ shift and go to state 79 ]
  ! INTEGER         [ shift and go to state 51 ]
  ! FLOAT           [ shift and go to state 52 ]
  ! STRING          [ shift and go to state 53 ]
  ! LOCAL_VAR       [ shift and go to state 54 ]
  ! GLOBAL_VAR      [ shift and go to state 56 ]
  ! INSTANCE_VAR    [ shift and go to state 57 ]
  ! CLASS_VAR       [ shift and go to state 58 ]
  ! L_ULTRA_PAREN   [ shift and go to state 33 ]
  ! CONSTANT        [ shift and go to state 32 ]

    expression                     shift and go to state 183
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 156

    (96) expression_binop -> expression GREATER . expression
    (105) expression_binop -> expression GREATER . method_call
    (137) comparison_operator -> GREATER .
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             reduce using rule 137 (comparison_operator -> GREATER .)
    L_PAREN         reduce using rule 137 (comparison_operator -> GREATER .)
    INTEGER         reduce using rule 137 (comparison_operator -> GREATER .)
    FLOAT           reduce using rule 137 (comparison_operator -> GREATER .)
    STRING          reduce using rule 137 (comparison_operator -> GREATER .)
    LOCAL_VAR       reduce using rule 137 (comparison_operator -> GREATER .)
    GLOBAL_VAR      reduce using rule 137 (comparison_operator -> GREATER .)
    INSTANCE_VAR    reduce using rule 137 (comparison_operator -> GREATER .)
    CLASS_VAR       reduce using rule 137 (comparison_operator -> GREATER .)
    L_ULTRA_PAREN   reduce using rule 137 (comparison_operator -> GREATER .)
    CONSTANT        reduce using rule 137 (comparison_operator -> GREATER .)

  ! LOCAL_VAR       [ shift and go to state 179 ]
  ! GLOBAL_VAR      [ shift and go to state 180 ]
  ! INSTANCE_VAR    [ shift and go to state 181 ]
  ! CLASS_VAR       [ shift and go to state 182 ]
  ! CONSTANT        [ shift and go to state 32 ]
  ! NOT             [ shift and go to state 50 ]
  ! L_PAREN         [ shift and go to state 79 ]
  ! INTEGER         [ shift and go to state 51 ]
  ! FLOAT           [ shift and go to state 52 ]
  ! STRING          [ shift and go to state 53 ]
  ! L_ULTRA_PAREN   [ shift and go to state 33 ]

    expression                     shift and go to state 184
    method_call                    shift and go to state 185
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    function_call                  shift and go to state 55

state 157

    (97) expression_binop -> expression LESS . expression
    (106) expression_binop -> expression LESS . method_call
    (135) comparison_operator -> LESS .
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             reduce using rule 135 (comparison_operator -> LESS .)
    L_PAREN         reduce using rule 135 (comparison_operator -> LESS .)
    INTEGER         reduce using rule 135 (comparison_operator -> LESS .)
    FLOAT           reduce using rule 135 (comparison_operator -> LESS .)
    STRING          reduce using rule 135 (comparison_operator -> LESS .)
    LOCAL_VAR       reduce using rule 135 (comparison_operator -> LESS .)
    GLOBAL_VAR      reduce using rule 135 (comparison_operator -> LESS .)
    INSTANCE_VAR    reduce using rule 135 (comparison_operator -> LESS .)
    CLASS_VAR       reduce using rule 135 (comparison_operator -> LESS .)
    L_ULTRA_PAREN   reduce using rule 135 (comparison_operator -> LESS .)
    CONSTANT        reduce using rule 135 (comparison_operator -> LESS .)

  ! LOCAL_VAR       [ shift and go to state 179 ]
  ! GLOBAL_VAR      [ shift and go to state 180 ]
  ! INSTANCE_VAR    [ shift and go to state 181 ]
  ! CLASS_VAR       [ shift and go to state 182 ]
  ! CONSTANT        [ shift and go to state 32 ]
  ! NOT             [ shift and go to state 50 ]
  ! L_PAREN         [ shift and go to state 79 ]
  ! INTEGER         [ shift and go to state 51 ]
  ! FLOAT           [ shift and go to state 52 ]
  ! STRING          [ shift and go to state 53 ]
  ! L_ULTRA_PAREN   [ shift and go to state 33 ]

    expression                     shift and go to state 186
    method_call                    shift and go to state 187
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    function_call                  shift and go to state 55

state 158

    (98) expression_binop -> expression GREATER_EQUAL . expression
    (103) expression_binop -> expression GREATER_EQUAL . method_call
    (138) comparison_operator -> GREATER_EQUAL .
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)
    L_PAREN         reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)
    INTEGER         reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)
    FLOAT           reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)
    STRING          reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)
    LOCAL_VAR       reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)
    GLOBAL_VAR      reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)
    INSTANCE_VAR    reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)
    CLASS_VAR       reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)
    L_ULTRA_PAREN   reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)
    CONSTANT        reduce using rule 138 (comparison_operator -> GREATER_EQUAL .)

  ! LOCAL_VAR       [ shift and go to state 179 ]
  ! GLOBAL_VAR      [ shift and go to state 180 ]
  ! INSTANCE_VAR    [ shift and go to state 181 ]
  ! CLASS_VAR       [ shift and go to state 182 ]
  ! CONSTANT        [ shift and go to state 32 ]
  ! NOT             [ shift and go to state 50 ]
  ! L_PAREN         [ shift and go to state 79 ]
  ! INTEGER         [ shift and go to state 51 ]
  ! FLOAT           [ shift and go to state 52 ]
  ! STRING          [ shift and go to state 53 ]
  ! L_ULTRA_PAREN   [ shift and go to state 33 ]

    expression                     shift and go to state 188
    method_call                    shift and go to state 189
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    function_call                  shift and go to state 55

state 159

    (99) expression_binop -> expression LESS_EQUAL . expression
    (104) expression_binop -> expression LESS_EQUAL . method_call
    (136) comparison_operator -> LESS_EQUAL .
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             reduce using rule 136 (comparison_operator -> LESS_EQUAL .)
    L_PAREN         reduce using rule 136 (comparison_operator -> LESS_EQUAL .)
    INTEGER         reduce using rule 136 (comparison_operator -> LESS_EQUAL .)
    FLOAT           reduce using rule 136 (comparison_operator -> LESS_EQUAL .)
    STRING          reduce using rule 136 (comparison_operator -> LESS_EQUAL .)
    LOCAL_VAR       reduce using rule 136 (comparison_operator -> LESS_EQUAL .)
    GLOBAL_VAR      reduce using rule 136 (comparison_operator -> LESS_EQUAL .)
    INSTANCE_VAR    reduce using rule 136 (comparison_operator -> LESS_EQUAL .)
    CLASS_VAR       reduce using rule 136 (comparison_operator -> LESS_EQUAL .)
    L_ULTRA_PAREN   reduce using rule 136 (comparison_operator -> LESS_EQUAL .)
    CONSTANT        reduce using rule 136 (comparison_operator -> LESS_EQUAL .)

  ! LOCAL_VAR       [ shift and go to state 179 ]
  ! GLOBAL_VAR      [ shift and go to state 180 ]
  ! INSTANCE_VAR    [ shift and go to state 181 ]
  ! CLASS_VAR       [ shift and go to state 182 ]
  ! CONSTANT        [ shift and go to state 32 ]
  ! NOT             [ shift and go to state 50 ]
  ! L_PAREN         [ shift and go to state 79 ]
  ! INTEGER         [ shift and go to state 51 ]
  ! FLOAT           [ shift and go to state 52 ]
  ! STRING          [ shift and go to state 53 ]
  ! L_ULTRA_PAREN   [ shift and go to state 33 ]

    expression                     shift and go to state 190
    method_call                    shift and go to state 191
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    function_call                  shift and go to state 55

state 160

    (75) condition -> NOT condition .
    (74) condition -> condition . logical_operator condition
    (45) logical_operator -> . AND
    (46) logical_operator -> . OR
    (47) logical_operator -> . OR_OPERATOR

    OR_OPERATOR     reduce using rule 75 (condition -> NOT condition .)
    PRINT           reduce using rule 75 (condition -> NOT condition .)
    PUTS            reduce using rule 75 (condition -> NOT condition .)
    LOCAL_VAR       reduce using rule 75 (condition -> NOT condition .)
    GLOBAL_VAR      reduce using rule 75 (condition -> NOT condition .)
    INSTANCE_VAR    reduce using rule 75 (condition -> NOT condition .)
    CLASS_VAR       reduce using rule 75 (condition -> NOT condition .)
    DEF             reduce using rule 75 (condition -> NOT condition .)
    RETURN          reduce using rule 75 (condition -> NOT condition .)
    CLASS           reduce using rule 75 (condition -> NOT condition .)
    CONSTANT        reduce using rule 75 (condition -> NOT condition .)
    L_ULTRA_PAREN   reduce using rule 75 (condition -> NOT condition .)
    IF              reduce using rule 75 (condition -> NOT condition .)
    UNTIL           reduce using rule 75 (condition -> NOT condition .)
    UNLESS          reduce using rule 75 (condition -> NOT condition .)
    WHILE           reduce using rule 75 (condition -> NOT condition .)
    R_PAREN         reduce using rule 75 (condition -> NOT condition .)
    AND             shift and go to state 150
    OR              shift and go to state 151

  ! AND             [ reduce using rule 75 (condition -> NOT condition .) ]
  ! OR              [ reduce using rule 75 (condition -> NOT condition .) ]
  ! OR_OPERATOR     [ shift and go to state 152 ]

    logical_operator               shift and go to state 149

state 161

    (108) expression_not -> NOT expression .
    (73) condition -> expression . comparison_operator expression
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call
    (133) comparison_operator -> . EQUALS
    (134) comparison_operator -> . DIFFERENT
    (135) comparison_operator -> . LESS
    (136) comparison_operator -> . LESS_EQUAL
    (137) comparison_operator -> . GREATER
    (138) comparison_operator -> . GREATER_EQUAL

    OR_OPERATOR     reduce using rule 108 (expression_not -> NOT expression .)
    R_PAREN         reduce using rule 108 (expression_not -> NOT expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 154
    DIFFERENT       shift and go to state 155
    GREATER         shift and go to state 156
    LESS            shift and go to state 157
    GREATER_EQUAL   shift and go to state 158
    LESS_EQUAL      shift and go to state 159
    AND             shift and go to state 108
    OR              shift and go to state 109

  ! PLUS            [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! MINUS           [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! MODULE          [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! DIFFERENT       [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! GREATER         [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! LESS            [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! LESS_EQUAL      [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! AND             [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! OR              [ reduce using rule 108 (expression_not -> NOT expression .) ]
  ! OR_OPERATOR     [ shift and go to state 110 ]

    comparison_operator            shift and go to state 153

state 162

    (76) condition -> L_PAREN condition . R_PAREN
    (74) condition -> condition . logical_operator condition
    (45) logical_operator -> . AND
    (46) logical_operator -> . OR
    (47) logical_operator -> . OR_OPERATOR

    R_PAREN         shift and go to state 228
    AND             shift and go to state 150
    OR              shift and go to state 151
    OR_OPERATOR     shift and go to state 152

    logical_operator               shift and go to state 149

state 163

    (109) expression_group -> L_PAREN expression . R_PAREN
    (73) condition -> expression . comparison_operator expression
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call
    (133) comparison_operator -> . EQUALS
    (134) comparison_operator -> . DIFFERENT
    (135) comparison_operator -> . LESS
    (136) comparison_operator -> . LESS_EQUAL
    (137) comparison_operator -> . GREATER
    (138) comparison_operator -> . GREATER_EQUAL

    R_PAREN         shift and go to state 170
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 154
    DIFFERENT       shift and go to state 155
    GREATER         shift and go to state 156
    LESS            shift and go to state 157
    GREATER_EQUAL   shift and go to state 158
    LESS_EQUAL      shift and go to state 159
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110

    comparison_operator            shift and go to state 153

state 164

    (72) until_statement -> UNTIL condition statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 229
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 165

    (70) unless_statement -> UNLESS condition statement_list . END
    (71) unless_statement -> UNLESS condition statement_list . ELSE statement_list END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 230
    ELSE            shift and go to state 231
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 166

    (69) while_statement -> WHILE condition statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 232
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 167

    (130) indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .

    L_ULTRA_PAREN   reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ASSIGN          reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PRINT           reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PUTS            reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DEF             reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    RETURN          reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CLASS           reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    IF              reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNTIL           reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNLESS          reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    WHILE           reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    $end            reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PLUS            reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MINUS           reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MULTIPLY        reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIVIDE          reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MODULE          reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    EQUALS          reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIFFERENT       reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER         reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS            reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER_EQUAL   reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS_EQUAL      reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    AND             reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR              reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR_OPERATOR     reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    COMMA           reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    END             reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSE            reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSIF           reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_ULTRA_PAREN   reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_PAREN         reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_MAYUS_PAREN   reduce using rule 130 (indexing -> indexing L_ULTRA_PAREN expression R_ULTRA_PAREN .)


state 168

    (131) indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR . R_ULTRA_PAREN

    R_ULTRA_PAREN   shift and go to state 233


state 169

    (26) print_statement -> PRINT L_PAREN argument_list R_PAREN .

    PRINT           reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    PUTS            reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    LOCAL_VAR       reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    GLOBAL_VAR      reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    INSTANCE_VAR    reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    CLASS_VAR       reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    DEF             reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    RETURN          reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    CLASS           reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    CONSTANT        reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    L_ULTRA_PAREN   reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    IF              reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    UNTIL           reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    UNLESS          reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    WHILE           reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    $end            reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    END             reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    ELSE            reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)
    ELSIF           reduce using rule 26 (print_statement -> PRINT L_PAREN argument_list R_PAREN .)


state 170

    (109) expression_group -> L_PAREN expression R_PAREN .

    PLUS            reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    MINUS           reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    MULTIPLY        reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    DIVIDE          reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    MODULE          reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    EQUALS          reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    DIFFERENT       reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    GREATER         reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    LESS            reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    GREATER_EQUAL   reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    LESS_EQUAL      reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    AND             reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    OR              reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    OR_OPERATOR     reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    COMMA           reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    PRINT           reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    PUTS            reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    LOCAL_VAR       reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    GLOBAL_VAR      reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    INSTANCE_VAR    reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    CLASS_VAR       reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    DEF             reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    RETURN          reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    CLASS           reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    CONSTANT        reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    L_ULTRA_PAREN   reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    IF              reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    UNTIL           reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    UNLESS          reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    WHILE           reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    $end            reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    END             reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    ELSE            reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    ELSIF           reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    R_ULTRA_PAREN   reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    R_PAREN         reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)
    R_MAYUS_PAREN   reduce using rule 109 (expression_group -> L_PAREN expression R_PAREN .)


state 171

    (35) argument_list -> argument_list COMMA expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for OR_OPERATOR resolved as shift
    COMMA           reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    PRINT           reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    PUTS            reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    LOCAL_VAR       reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    GLOBAL_VAR      reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    INSTANCE_VAR    reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    CLASS_VAR       reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    DEF             reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    RETURN          reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    CLASS           reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    CONSTANT        reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    L_ULTRA_PAREN   reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    IF              reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    UNTIL           reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    UNLESS          reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    WHILE           reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    $end            reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    END             reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    ELSE            reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    ELSIF           reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    R_PAREN         reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    R_ULTRA_PAREN   reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    R_MAYUS_PAREN   reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110

  ! PLUS            [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! MINUS           [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! MODULE          [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! EQUALS          [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! DIFFERENT       [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! GREATER         [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! LESS            [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! LESS_EQUAL      [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! AND             [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! OR              [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]
  ! OR_OPERATOR     [ reduce using rule 35 (argument_list -> argument_list COMMA expression .) ]


state 172

    (89) expression_binop -> expression PLUS expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PLUS            reduce using rule 89 (expression_binop -> expression PLUS expression .)
    MINUS           reduce using rule 89 (expression_binop -> expression PLUS expression .)
    EQUALS          reduce using rule 89 (expression_binop -> expression PLUS expression .)
    DIFFERENT       reduce using rule 89 (expression_binop -> expression PLUS expression .)
    GREATER         reduce using rule 89 (expression_binop -> expression PLUS expression .)
    LESS            reduce using rule 89 (expression_binop -> expression PLUS expression .)
    GREATER_EQUAL   reduce using rule 89 (expression_binop -> expression PLUS expression .)
    LESS_EQUAL      reduce using rule 89 (expression_binop -> expression PLUS expression .)
    AND             reduce using rule 89 (expression_binop -> expression PLUS expression .)
    OR              reduce using rule 89 (expression_binop -> expression PLUS expression .)
    OR_OPERATOR     reduce using rule 89 (expression_binop -> expression PLUS expression .)
    COMMA           reduce using rule 89 (expression_binop -> expression PLUS expression .)
    PRINT           reduce using rule 89 (expression_binop -> expression PLUS expression .)
    PUTS            reduce using rule 89 (expression_binop -> expression PLUS expression .)
    LOCAL_VAR       reduce using rule 89 (expression_binop -> expression PLUS expression .)
    GLOBAL_VAR      reduce using rule 89 (expression_binop -> expression PLUS expression .)
    INSTANCE_VAR    reduce using rule 89 (expression_binop -> expression PLUS expression .)
    CLASS_VAR       reduce using rule 89 (expression_binop -> expression PLUS expression .)
    DEF             reduce using rule 89 (expression_binop -> expression PLUS expression .)
    RETURN          reduce using rule 89 (expression_binop -> expression PLUS expression .)
    CLASS           reduce using rule 89 (expression_binop -> expression PLUS expression .)
    CONSTANT        reduce using rule 89 (expression_binop -> expression PLUS expression .)
    L_ULTRA_PAREN   reduce using rule 89 (expression_binop -> expression PLUS expression .)
    IF              reduce using rule 89 (expression_binop -> expression PLUS expression .)
    UNTIL           reduce using rule 89 (expression_binop -> expression PLUS expression .)
    UNLESS          reduce using rule 89 (expression_binop -> expression PLUS expression .)
    WHILE           reduce using rule 89 (expression_binop -> expression PLUS expression .)
    $end            reduce using rule 89 (expression_binop -> expression PLUS expression .)
    END             reduce using rule 89 (expression_binop -> expression PLUS expression .)
    ELSE            reduce using rule 89 (expression_binop -> expression PLUS expression .)
    ELSIF           reduce using rule 89 (expression_binop -> expression PLUS expression .)
    R_ULTRA_PAREN   reduce using rule 89 (expression_binop -> expression PLUS expression .)
    R_PAREN         reduce using rule 89 (expression_binop -> expression PLUS expression .)
    R_MAYUS_PAREN   reduce using rule 89 (expression_binop -> expression PLUS expression .)
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101

  ! MULTIPLY        [ reduce using rule 89 (expression_binop -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 89 (expression_binop -> expression PLUS expression .) ]
  ! MODULE          [ reduce using rule 89 (expression_binop -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! EQUALS          [ shift and go to state 102 ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! GREATER_EQUAL   [ shift and go to state 106 ]
  ! LESS_EQUAL      [ shift and go to state 107 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 173

    (90) expression_binop -> expression MINUS expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PLUS            reduce using rule 90 (expression_binop -> expression MINUS expression .)
    MINUS           reduce using rule 90 (expression_binop -> expression MINUS expression .)
    EQUALS          reduce using rule 90 (expression_binop -> expression MINUS expression .)
    DIFFERENT       reduce using rule 90 (expression_binop -> expression MINUS expression .)
    GREATER         reduce using rule 90 (expression_binop -> expression MINUS expression .)
    LESS            reduce using rule 90 (expression_binop -> expression MINUS expression .)
    GREATER_EQUAL   reduce using rule 90 (expression_binop -> expression MINUS expression .)
    LESS_EQUAL      reduce using rule 90 (expression_binop -> expression MINUS expression .)
    AND             reduce using rule 90 (expression_binop -> expression MINUS expression .)
    OR              reduce using rule 90 (expression_binop -> expression MINUS expression .)
    OR_OPERATOR     reduce using rule 90 (expression_binop -> expression MINUS expression .)
    COMMA           reduce using rule 90 (expression_binop -> expression MINUS expression .)
    PRINT           reduce using rule 90 (expression_binop -> expression MINUS expression .)
    PUTS            reduce using rule 90 (expression_binop -> expression MINUS expression .)
    LOCAL_VAR       reduce using rule 90 (expression_binop -> expression MINUS expression .)
    GLOBAL_VAR      reduce using rule 90 (expression_binop -> expression MINUS expression .)
    INSTANCE_VAR    reduce using rule 90 (expression_binop -> expression MINUS expression .)
    CLASS_VAR       reduce using rule 90 (expression_binop -> expression MINUS expression .)
    DEF             reduce using rule 90 (expression_binop -> expression MINUS expression .)
    RETURN          reduce using rule 90 (expression_binop -> expression MINUS expression .)
    CLASS           reduce using rule 90 (expression_binop -> expression MINUS expression .)
    CONSTANT        reduce using rule 90 (expression_binop -> expression MINUS expression .)
    L_ULTRA_PAREN   reduce using rule 90 (expression_binop -> expression MINUS expression .)
    IF              reduce using rule 90 (expression_binop -> expression MINUS expression .)
    UNTIL           reduce using rule 90 (expression_binop -> expression MINUS expression .)
    UNLESS          reduce using rule 90 (expression_binop -> expression MINUS expression .)
    WHILE           reduce using rule 90 (expression_binop -> expression MINUS expression .)
    $end            reduce using rule 90 (expression_binop -> expression MINUS expression .)
    END             reduce using rule 90 (expression_binop -> expression MINUS expression .)
    ELSE            reduce using rule 90 (expression_binop -> expression MINUS expression .)
    ELSIF           reduce using rule 90 (expression_binop -> expression MINUS expression .)
    R_ULTRA_PAREN   reduce using rule 90 (expression_binop -> expression MINUS expression .)
    R_PAREN         reduce using rule 90 (expression_binop -> expression MINUS expression .)
    R_MAYUS_PAREN   reduce using rule 90 (expression_binop -> expression MINUS expression .)
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101

  ! MULTIPLY        [ reduce using rule 90 (expression_binop -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 90 (expression_binop -> expression MINUS expression .) ]
  ! MODULE          [ reduce using rule 90 (expression_binop -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! EQUALS          [ shift and go to state 102 ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! GREATER_EQUAL   [ shift and go to state 106 ]
  ! LESS_EQUAL      [ shift and go to state 107 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 174

    (91) expression_binop -> expression MULTIPLY expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PLUS            reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    MINUS           reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    MODULE          reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    EQUALS          reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    DIFFERENT       reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    GREATER         reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    LESS            reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    GREATER_EQUAL   reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    LESS_EQUAL      reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    AND             reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    OR              reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    OR_OPERATOR     reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    COMMA           reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    PRINT           reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    PUTS            reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    LOCAL_VAR       reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    GLOBAL_VAR      reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    INSTANCE_VAR    reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    CLASS_VAR       reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    DEF             reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    RETURN          reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    CLASS           reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    CONSTANT        reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    L_ULTRA_PAREN   reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    IF              reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    UNTIL           reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    UNLESS          reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    WHILE           reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    $end            reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    END             reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    ELSE            reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    ELSIF           reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    R_ULTRA_PAREN   reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    R_PAREN         reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)
    R_MAYUS_PAREN   reduce using rule 91 (expression_binop -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLY        [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 100 ]
  ! MODULE          [ shift and go to state 101 ]
  ! EQUALS          [ shift and go to state 102 ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! GREATER_EQUAL   [ shift and go to state 106 ]
  ! LESS_EQUAL      [ shift and go to state 107 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 175

    (92) expression_binop -> expression DIVIDE expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PLUS            reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    MINUS           reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    MODULE          reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    EQUALS          reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    DIFFERENT       reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    GREATER         reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    LESS            reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    GREATER_EQUAL   reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    LESS_EQUAL      reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    AND             reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    OR              reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    OR_OPERATOR     reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    COMMA           reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    PRINT           reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    PUTS            reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    LOCAL_VAR       reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    GLOBAL_VAR      reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    INSTANCE_VAR    reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    CLASS_VAR       reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    DEF             reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    RETURN          reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    CLASS           reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    CONSTANT        reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    L_ULTRA_PAREN   reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    IF              reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    UNTIL           reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    UNLESS          reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    WHILE           reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    $end            reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    END             reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    ELSE            reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    ELSIF           reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    R_ULTRA_PAREN   reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    R_PAREN         reduce using rule 92 (expression_binop -> expression DIVIDE expression .)
    R_MAYUS_PAREN   reduce using rule 92 (expression_binop -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLY        [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 100 ]
  ! MODULE          [ shift and go to state 101 ]
  ! EQUALS          [ shift and go to state 102 ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! GREATER_EQUAL   [ shift and go to state 106 ]
  ! LESS_EQUAL      [ shift and go to state 107 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 176

    (93) expression_binop -> expression MODULE expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    PLUS            reduce using rule 93 (expression_binop -> expression MODULE expression .)
    MINUS           reduce using rule 93 (expression_binop -> expression MODULE expression .)
    MULTIPLY        reduce using rule 93 (expression_binop -> expression MODULE expression .)
    DIVIDE          reduce using rule 93 (expression_binop -> expression MODULE expression .)
    MODULE          reduce using rule 93 (expression_binop -> expression MODULE expression .)
    EQUALS          reduce using rule 93 (expression_binop -> expression MODULE expression .)
    DIFFERENT       reduce using rule 93 (expression_binop -> expression MODULE expression .)
    GREATER         reduce using rule 93 (expression_binop -> expression MODULE expression .)
    LESS            reduce using rule 93 (expression_binop -> expression MODULE expression .)
    GREATER_EQUAL   reduce using rule 93 (expression_binop -> expression MODULE expression .)
    LESS_EQUAL      reduce using rule 93 (expression_binop -> expression MODULE expression .)
    AND             reduce using rule 93 (expression_binop -> expression MODULE expression .)
    OR              reduce using rule 93 (expression_binop -> expression MODULE expression .)
    OR_OPERATOR     reduce using rule 93 (expression_binop -> expression MODULE expression .)
    COMMA           reduce using rule 93 (expression_binop -> expression MODULE expression .)
    PRINT           reduce using rule 93 (expression_binop -> expression MODULE expression .)
    PUTS            reduce using rule 93 (expression_binop -> expression MODULE expression .)
    LOCAL_VAR       reduce using rule 93 (expression_binop -> expression MODULE expression .)
    GLOBAL_VAR      reduce using rule 93 (expression_binop -> expression MODULE expression .)
    INSTANCE_VAR    reduce using rule 93 (expression_binop -> expression MODULE expression .)
    CLASS_VAR       reduce using rule 93 (expression_binop -> expression MODULE expression .)
    DEF             reduce using rule 93 (expression_binop -> expression MODULE expression .)
    RETURN          reduce using rule 93 (expression_binop -> expression MODULE expression .)
    CLASS           reduce using rule 93 (expression_binop -> expression MODULE expression .)
    CONSTANT        reduce using rule 93 (expression_binop -> expression MODULE expression .)
    L_ULTRA_PAREN   reduce using rule 93 (expression_binop -> expression MODULE expression .)
    IF              reduce using rule 93 (expression_binop -> expression MODULE expression .)
    UNTIL           reduce using rule 93 (expression_binop -> expression MODULE expression .)
    UNLESS          reduce using rule 93 (expression_binop -> expression MODULE expression .)
    WHILE           reduce using rule 93 (expression_binop -> expression MODULE expression .)
    $end            reduce using rule 93 (expression_binop -> expression MODULE expression .)
    END             reduce using rule 93 (expression_binop -> expression MODULE expression .)
    ELSE            reduce using rule 93 (expression_binop -> expression MODULE expression .)
    ELSIF           reduce using rule 93 (expression_binop -> expression MODULE expression .)
    R_ULTRA_PAREN   reduce using rule 93 (expression_binop -> expression MODULE expression .)
    R_PAREN         reduce using rule 93 (expression_binop -> expression MODULE expression .)
    R_MAYUS_PAREN   reduce using rule 93 (expression_binop -> expression MODULE expression .)

  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLY        [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 100 ]
  ! MODULE          [ shift and go to state 101 ]
  ! EQUALS          [ shift and go to state 102 ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! GREATER_EQUAL   [ shift and go to state 106 ]
  ! LESS_EQUAL      [ shift and go to state 107 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 177

    (94) expression_binop -> expression EQUALS expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    DIFFERENT       reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    AND             reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    OR              reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    OR_OPERATOR     reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    COMMA           reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    PRINT           reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    PUTS            reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    LOCAL_VAR       reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    GLOBAL_VAR      reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    INSTANCE_VAR    reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    CLASS_VAR       reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    DEF             reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    RETURN          reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    CLASS           reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    CONSTANT        reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    L_ULTRA_PAREN   reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    IF              reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    UNTIL           reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    UNLESS          reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    WHILE           reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    $end            reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    END             reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    ELSE            reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    ELSIF           reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    R_ULTRA_PAREN   reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    R_PAREN         reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    R_MAYUS_PAREN   reduce using rule 94 (expression_binop -> expression EQUALS expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    EQUALS          shift and go to state 102

  ! PLUS            [ reduce using rule 94 (expression_binop -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 94 (expression_binop -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 94 (expression_binop -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 94 (expression_binop -> expression EQUALS expression .) ]
  ! MODULE          [ reduce using rule 94 (expression_binop -> expression EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 94 (expression_binop -> expression EQUALS expression .) ]
  ! GREATER         [ reduce using rule 94 (expression_binop -> expression EQUALS expression .) ]
  ! LESS            [ reduce using rule 94 (expression_binop -> expression EQUALS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 94 (expression_binop -> expression EQUALS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 94 (expression_binop -> expression EQUALS expression .) ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 178

    (107) expression_binop -> expression EQUALS method_call .
    (88) expression -> method_call .

  ! reduce/reduce conflict for PLUS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MODULE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GREATER resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LESS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for AND resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for OR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for OR_OPERATOR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for PRINT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for PUTS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LOCAL_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CLASS_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DEF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for RETURN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CLASS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CONSTANT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for L_ULTRA_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for IF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for UNLESS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for WHILE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for $end resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for END resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for ELSIF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_ULTRA_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_MAYUS_PAREN resolved using rule 88 (expression -> method_call .)
    PLUS            reduce using rule 88 (expression -> method_call .)
    MINUS           reduce using rule 88 (expression -> method_call .)
    MULTIPLY        reduce using rule 88 (expression -> method_call .)
    DIVIDE          reduce using rule 88 (expression -> method_call .)
    MODULE          reduce using rule 88 (expression -> method_call .)
    EQUALS          reduce using rule 88 (expression -> method_call .)
    DIFFERENT       reduce using rule 88 (expression -> method_call .)
    GREATER         reduce using rule 88 (expression -> method_call .)
    LESS            reduce using rule 88 (expression -> method_call .)
    GREATER_EQUAL   reduce using rule 88 (expression -> method_call .)
    LESS_EQUAL      reduce using rule 88 (expression -> method_call .)
    AND             reduce using rule 88 (expression -> method_call .)
    OR              reduce using rule 88 (expression -> method_call .)
    OR_OPERATOR     reduce using rule 88 (expression -> method_call .)
    COMMA           reduce using rule 88 (expression -> method_call .)
    PRINT           reduce using rule 88 (expression -> method_call .)
    PUTS            reduce using rule 88 (expression -> method_call .)
    LOCAL_VAR       reduce using rule 88 (expression -> method_call .)
    GLOBAL_VAR      reduce using rule 88 (expression -> method_call .)
    INSTANCE_VAR    reduce using rule 88 (expression -> method_call .)
    CLASS_VAR       reduce using rule 88 (expression -> method_call .)
    DEF             reduce using rule 88 (expression -> method_call .)
    RETURN          reduce using rule 88 (expression -> method_call .)
    CLASS           reduce using rule 88 (expression -> method_call .)
    CONSTANT        reduce using rule 88 (expression -> method_call .)
    L_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    IF              reduce using rule 88 (expression -> method_call .)
    UNTIL           reduce using rule 88 (expression -> method_call .)
    UNLESS          reduce using rule 88 (expression -> method_call .)
    WHILE           reduce using rule 88 (expression -> method_call .)
    $end            reduce using rule 88 (expression -> method_call .)
    END             reduce using rule 88 (expression -> method_call .)
    ELSE            reduce using rule 88 (expression -> method_call .)
    ELSIF           reduce using rule 88 (expression -> method_call .)
    R_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    R_PAREN         reduce using rule 88 (expression -> method_call .)
    R_MAYUS_PAREN   reduce using rule 88 (expression -> method_call .)

  ! PLUS            [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! MINUS           [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! MULTIPLY        [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! DIVIDE          [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! MODULE          [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! EQUALS          [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! DIFFERENT       [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! GREATER         [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! LESS            [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! GREATER_EQUAL   [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! LESS_EQUAL      [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! AND             [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! OR              [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! OR_OPERATOR     [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! COMMA           [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! PRINT           [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! PUTS            [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! LOCAL_VAR       [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! GLOBAL_VAR      [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! INSTANCE_VAR    [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! CLASS_VAR       [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! DEF             [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! RETURN          [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! CLASS           [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! CONSTANT        [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! IF              [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! UNTIL           [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! UNLESS          [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! WHILE           [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! $end            [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! END             [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! ELSE            [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! ELSIF           [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! R_ULTRA_PAREN   [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! R_PAREN         [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]
  ! R_MAYUS_PAREN   [ reduce using rule 107 (expression_binop -> expression EQUALS method_call .) ]


state 179

    (120) method_call -> LOCAL_VAR . DOT function_call
    (113) expression_term -> LOCAL_VAR .
    (125) indexing -> LOCAL_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN
    (116) function_call -> LOCAL_VAR . L_PAREN argument_list R_PAREN
    (117) function_call -> LOCAL_VAR . L_PAREN R_PAREN
    (118) function_call -> LOCAL_VAR . argument_list
    (119) function_call -> LOCAL_VAR .
    (34) argument_list -> . expression
    (35) argument_list -> . argument_list COMMA expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

  ! shift/reduce conflict for L_ULTRA_PAREN resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for MINUS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for MODULE resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for EQUALS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for GREATER resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for LESS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for AND resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for OR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for OR_OPERATOR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for COMMA resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for PRINT resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for PUTS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for LOCAL_VAR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for CLASS_VAR resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for DEF resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for RETURN resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for CLASS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for CONSTANT resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! shift/reduce conflict for L_ULTRA_PAREN resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for UNTIL resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for UNLESS resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for WHILE resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for $end resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for END resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for ELSE resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for ELSIF resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for R_ULTRA_PAREN resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for R_PAREN resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! reduce/reduce conflict for R_MAYUS_PAREN resolved using rule 113 (expression_term -> LOCAL_VAR .)
  ! shift/reduce conflict for LOCAL_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for CLASS_VAR resolved as shift
  ! shift/reduce conflict for CONSTANT resolved as shift
    DOT             shift and go to state 62
    PLUS            reduce using rule 113 (expression_term -> LOCAL_VAR .)
    MINUS           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    MULTIPLY        reduce using rule 113 (expression_term -> LOCAL_VAR .)
    DIVIDE          reduce using rule 113 (expression_term -> LOCAL_VAR .)
    MODULE          reduce using rule 113 (expression_term -> LOCAL_VAR .)
    EQUALS          reduce using rule 113 (expression_term -> LOCAL_VAR .)
    DIFFERENT       reduce using rule 113 (expression_term -> LOCAL_VAR .)
    GREATER         reduce using rule 113 (expression_term -> LOCAL_VAR .)
    LESS            reduce using rule 113 (expression_term -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 113 (expression_term -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 113 (expression_term -> LOCAL_VAR .)
    AND             reduce using rule 113 (expression_term -> LOCAL_VAR .)
    OR              reduce using rule 113 (expression_term -> LOCAL_VAR .)
    OR_OPERATOR     reduce using rule 113 (expression_term -> LOCAL_VAR .)
    COMMA           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    PRINT           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    PUTS            reduce using rule 113 (expression_term -> LOCAL_VAR .)
    DEF             reduce using rule 113 (expression_term -> LOCAL_VAR .)
    RETURN          reduce using rule 113 (expression_term -> LOCAL_VAR .)
    CLASS           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    IF              reduce using rule 113 (expression_term -> LOCAL_VAR .)
    UNTIL           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    UNLESS          reduce using rule 113 (expression_term -> LOCAL_VAR .)
    WHILE           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    $end            reduce using rule 113 (expression_term -> LOCAL_VAR .)
    END             reduce using rule 113 (expression_term -> LOCAL_VAR .)
    ELSE            reduce using rule 113 (expression_term -> LOCAL_VAR .)
    ELSIF           reduce using rule 113 (expression_term -> LOCAL_VAR .)
    R_ULTRA_PAREN   reduce using rule 113 (expression_term -> LOCAL_VAR .)
    R_PAREN         reduce using rule 113 (expression_term -> LOCAL_VAR .)
    R_MAYUS_PAREN   reduce using rule 113 (expression_term -> LOCAL_VAR .)
    L_ULTRA_PAREN   shift and go to state 112
    L_PAREN         shift and go to state 113
    NOT             shift and go to state 50
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    CONSTANT        shift and go to state 32

  ! LOCAL_VAR       [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! GLOBAL_VAR      [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! INSTANCE_VAR    [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! CLASS_VAR       [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! CONSTANT        [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 113 (expression_term -> LOCAL_VAR .) ]
  ! PLUS            [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! MINUS           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! MULTIPLY        [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! DIVIDE          [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! MODULE          [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! EQUALS          [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! DIFFERENT       [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! GREATER         [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! LESS            [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! GREATER_EQUAL   [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! LESS_EQUAL      [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! AND             [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! OR              [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! OR_OPERATOR     [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! COMMA           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! PRINT           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! PUTS            [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! LOCAL_VAR       [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! GLOBAL_VAR      [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! INSTANCE_VAR    [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! CLASS_VAR       [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! DEF             [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! RETURN          [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! CLASS           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! CONSTANT        [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! IF              [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! UNTIL           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! UNLESS          [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! WHILE           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! $end            [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! END             [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! ELSE            [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! ELSIF           [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! R_ULTRA_PAREN   [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! R_PAREN         [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]
  ! R_MAYUS_PAREN   [ reduce using rule 119 (function_call -> LOCAL_VAR .) ]

    function_call                  shift and go to state 55
    expression                     shift and go to state 43
    argument_list                  shift and go to state 114
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49

state 180

    (121) method_call -> GLOBAL_VAR . DOT function_call
    (126) indexing -> GLOBAL_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN

    DOT             shift and go to state 66
    L_ULTRA_PAREN   shift and go to state 68


state 181

    (122) method_call -> INSTANCE_VAR . DOT function_call
    (127) indexing -> INSTANCE_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN

    DOT             shift and go to state 70
    L_ULTRA_PAREN   shift and go to state 72


state 182

    (123) method_call -> CLASS_VAR . DOT function_call
    (128) indexing -> CLASS_VAR . L_ULTRA_PAREN expression R_ULTRA_PAREN

    DOT             shift and go to state 74
    L_ULTRA_PAREN   shift and go to state 76


state 183

    (95) expression_binop -> expression DIFFERENT expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    DIFFERENT       reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    AND             reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    OR              reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    OR_OPERATOR     reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    COMMA           reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    PRINT           reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    PUTS            reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    LOCAL_VAR       reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    GLOBAL_VAR      reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    INSTANCE_VAR    reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    CLASS_VAR       reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    DEF             reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    RETURN          reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    CLASS           reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    CONSTANT        reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    L_ULTRA_PAREN   reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    IF              reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    UNTIL           reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    UNLESS          reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    WHILE           reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    $end            reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    END             reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    ELSE            reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    ELSIF           reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    R_ULTRA_PAREN   reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    R_PAREN         reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    R_MAYUS_PAREN   reduce using rule 95 (expression_binop -> expression DIFFERENT expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    EQUALS          shift and go to state 102

  ! PLUS            [ reduce using rule 95 (expression_binop -> expression DIFFERENT expression .) ]
  ! MINUS           [ reduce using rule 95 (expression_binop -> expression DIFFERENT expression .) ]
  ! MULTIPLY        [ reduce using rule 95 (expression_binop -> expression DIFFERENT expression .) ]
  ! DIVIDE          [ reduce using rule 95 (expression_binop -> expression DIFFERENT expression .) ]
  ! MODULE          [ reduce using rule 95 (expression_binop -> expression DIFFERENT expression .) ]
  ! EQUALS          [ reduce using rule 95 (expression_binop -> expression DIFFERENT expression .) ]
  ! GREATER         [ reduce using rule 95 (expression_binop -> expression DIFFERENT expression .) ]
  ! LESS            [ reduce using rule 95 (expression_binop -> expression DIFFERENT expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 95 (expression_binop -> expression DIFFERENT expression .) ]
  ! LESS_EQUAL      [ reduce using rule 95 (expression_binop -> expression DIFFERENT expression .) ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 184

    (96) expression_binop -> expression GREATER expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    DIFFERENT       reduce using rule 96 (expression_binop -> expression GREATER expression .)
    AND             reduce using rule 96 (expression_binop -> expression GREATER expression .)
    OR              reduce using rule 96 (expression_binop -> expression GREATER expression .)
    OR_OPERATOR     reduce using rule 96 (expression_binop -> expression GREATER expression .)
    COMMA           reduce using rule 96 (expression_binop -> expression GREATER expression .)
    PRINT           reduce using rule 96 (expression_binop -> expression GREATER expression .)
    PUTS            reduce using rule 96 (expression_binop -> expression GREATER expression .)
    LOCAL_VAR       reduce using rule 96 (expression_binop -> expression GREATER expression .)
    GLOBAL_VAR      reduce using rule 96 (expression_binop -> expression GREATER expression .)
    INSTANCE_VAR    reduce using rule 96 (expression_binop -> expression GREATER expression .)
    CLASS_VAR       reduce using rule 96 (expression_binop -> expression GREATER expression .)
    DEF             reduce using rule 96 (expression_binop -> expression GREATER expression .)
    RETURN          reduce using rule 96 (expression_binop -> expression GREATER expression .)
    CLASS           reduce using rule 96 (expression_binop -> expression GREATER expression .)
    CONSTANT        reduce using rule 96 (expression_binop -> expression GREATER expression .)
    L_ULTRA_PAREN   reduce using rule 96 (expression_binop -> expression GREATER expression .)
    IF              reduce using rule 96 (expression_binop -> expression GREATER expression .)
    UNTIL           reduce using rule 96 (expression_binop -> expression GREATER expression .)
    UNLESS          reduce using rule 96 (expression_binop -> expression GREATER expression .)
    WHILE           reduce using rule 96 (expression_binop -> expression GREATER expression .)
    $end            reduce using rule 96 (expression_binop -> expression GREATER expression .)
    END             reduce using rule 96 (expression_binop -> expression GREATER expression .)
    ELSE            reduce using rule 96 (expression_binop -> expression GREATER expression .)
    ELSIF           reduce using rule 96 (expression_binop -> expression GREATER expression .)
    R_ULTRA_PAREN   reduce using rule 96 (expression_binop -> expression GREATER expression .)
    R_PAREN         reduce using rule 96 (expression_binop -> expression GREATER expression .)
    R_MAYUS_PAREN   reduce using rule 96 (expression_binop -> expression GREATER expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    EQUALS          shift and go to state 102

  ! PLUS            [ reduce using rule 96 (expression_binop -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 96 (expression_binop -> expression GREATER expression .) ]
  ! MULTIPLY        [ reduce using rule 96 (expression_binop -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 96 (expression_binop -> expression GREATER expression .) ]
  ! MODULE          [ reduce using rule 96 (expression_binop -> expression GREATER expression .) ]
  ! EQUALS          [ reduce using rule 96 (expression_binop -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 96 (expression_binop -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 96 (expression_binop -> expression GREATER expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 96 (expression_binop -> expression GREATER expression .) ]
  ! LESS_EQUAL      [ reduce using rule 96 (expression_binop -> expression GREATER expression .) ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 185

    (105) expression_binop -> expression GREATER method_call .
    (88) expression -> method_call .

  ! reduce/reduce conflict for PLUS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MODULE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GREATER resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LESS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for AND resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for OR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for OR_OPERATOR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for PRINT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for PUTS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LOCAL_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CLASS_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DEF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for RETURN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CLASS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CONSTANT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for L_ULTRA_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for IF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for UNLESS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for WHILE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for $end resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for END resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for ELSIF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_ULTRA_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_MAYUS_PAREN resolved using rule 88 (expression -> method_call .)
    PLUS            reduce using rule 88 (expression -> method_call .)
    MINUS           reduce using rule 88 (expression -> method_call .)
    MULTIPLY        reduce using rule 88 (expression -> method_call .)
    DIVIDE          reduce using rule 88 (expression -> method_call .)
    MODULE          reduce using rule 88 (expression -> method_call .)
    EQUALS          reduce using rule 88 (expression -> method_call .)
    DIFFERENT       reduce using rule 88 (expression -> method_call .)
    GREATER         reduce using rule 88 (expression -> method_call .)
    LESS            reduce using rule 88 (expression -> method_call .)
    GREATER_EQUAL   reduce using rule 88 (expression -> method_call .)
    LESS_EQUAL      reduce using rule 88 (expression -> method_call .)
    AND             reduce using rule 88 (expression -> method_call .)
    OR              reduce using rule 88 (expression -> method_call .)
    OR_OPERATOR     reduce using rule 88 (expression -> method_call .)
    COMMA           reduce using rule 88 (expression -> method_call .)
    PRINT           reduce using rule 88 (expression -> method_call .)
    PUTS            reduce using rule 88 (expression -> method_call .)
    LOCAL_VAR       reduce using rule 88 (expression -> method_call .)
    GLOBAL_VAR      reduce using rule 88 (expression -> method_call .)
    INSTANCE_VAR    reduce using rule 88 (expression -> method_call .)
    CLASS_VAR       reduce using rule 88 (expression -> method_call .)
    DEF             reduce using rule 88 (expression -> method_call .)
    RETURN          reduce using rule 88 (expression -> method_call .)
    CLASS           reduce using rule 88 (expression -> method_call .)
    CONSTANT        reduce using rule 88 (expression -> method_call .)
    L_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    IF              reduce using rule 88 (expression -> method_call .)
    UNTIL           reduce using rule 88 (expression -> method_call .)
    UNLESS          reduce using rule 88 (expression -> method_call .)
    WHILE           reduce using rule 88 (expression -> method_call .)
    $end            reduce using rule 88 (expression -> method_call .)
    END             reduce using rule 88 (expression -> method_call .)
    ELSE            reduce using rule 88 (expression -> method_call .)
    ELSIF           reduce using rule 88 (expression -> method_call .)
    R_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    R_PAREN         reduce using rule 88 (expression -> method_call .)
    R_MAYUS_PAREN   reduce using rule 88 (expression -> method_call .)

  ! PLUS            [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! MINUS           [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! MULTIPLY        [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! DIVIDE          [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! MODULE          [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! EQUALS          [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! DIFFERENT       [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! GREATER         [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! LESS            [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! GREATER_EQUAL   [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! LESS_EQUAL      [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! AND             [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! OR              [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! OR_OPERATOR     [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! COMMA           [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! PRINT           [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! PUTS            [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! LOCAL_VAR       [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! GLOBAL_VAR      [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! INSTANCE_VAR    [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! CLASS_VAR       [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! DEF             [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! RETURN          [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! CLASS           [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! CONSTANT        [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! IF              [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! UNTIL           [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! UNLESS          [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! WHILE           [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! $end            [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! END             [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! ELSE            [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! ELSIF           [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! R_ULTRA_PAREN   [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! R_PAREN         [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]
  ! R_MAYUS_PAREN   [ reduce using rule 105 (expression_binop -> expression GREATER method_call .) ]


state 186

    (97) expression_binop -> expression LESS expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    DIFFERENT       reduce using rule 97 (expression_binop -> expression LESS expression .)
    AND             reduce using rule 97 (expression_binop -> expression LESS expression .)
    OR              reduce using rule 97 (expression_binop -> expression LESS expression .)
    OR_OPERATOR     reduce using rule 97 (expression_binop -> expression LESS expression .)
    COMMA           reduce using rule 97 (expression_binop -> expression LESS expression .)
    PRINT           reduce using rule 97 (expression_binop -> expression LESS expression .)
    PUTS            reduce using rule 97 (expression_binop -> expression LESS expression .)
    LOCAL_VAR       reduce using rule 97 (expression_binop -> expression LESS expression .)
    GLOBAL_VAR      reduce using rule 97 (expression_binop -> expression LESS expression .)
    INSTANCE_VAR    reduce using rule 97 (expression_binop -> expression LESS expression .)
    CLASS_VAR       reduce using rule 97 (expression_binop -> expression LESS expression .)
    DEF             reduce using rule 97 (expression_binop -> expression LESS expression .)
    RETURN          reduce using rule 97 (expression_binop -> expression LESS expression .)
    CLASS           reduce using rule 97 (expression_binop -> expression LESS expression .)
    CONSTANT        reduce using rule 97 (expression_binop -> expression LESS expression .)
    L_ULTRA_PAREN   reduce using rule 97 (expression_binop -> expression LESS expression .)
    IF              reduce using rule 97 (expression_binop -> expression LESS expression .)
    UNTIL           reduce using rule 97 (expression_binop -> expression LESS expression .)
    UNLESS          reduce using rule 97 (expression_binop -> expression LESS expression .)
    WHILE           reduce using rule 97 (expression_binop -> expression LESS expression .)
    $end            reduce using rule 97 (expression_binop -> expression LESS expression .)
    END             reduce using rule 97 (expression_binop -> expression LESS expression .)
    ELSE            reduce using rule 97 (expression_binop -> expression LESS expression .)
    ELSIF           reduce using rule 97 (expression_binop -> expression LESS expression .)
    R_ULTRA_PAREN   reduce using rule 97 (expression_binop -> expression LESS expression .)
    R_PAREN         reduce using rule 97 (expression_binop -> expression LESS expression .)
    R_MAYUS_PAREN   reduce using rule 97 (expression_binop -> expression LESS expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    EQUALS          shift and go to state 102

  ! PLUS            [ reduce using rule 97 (expression_binop -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 97 (expression_binop -> expression LESS expression .) ]
  ! MULTIPLY        [ reduce using rule 97 (expression_binop -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 97 (expression_binop -> expression LESS expression .) ]
  ! MODULE          [ reduce using rule 97 (expression_binop -> expression LESS expression .) ]
  ! EQUALS          [ reduce using rule 97 (expression_binop -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 97 (expression_binop -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 97 (expression_binop -> expression LESS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 97 (expression_binop -> expression LESS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 97 (expression_binop -> expression LESS expression .) ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 187

    (106) expression_binop -> expression LESS method_call .
    (88) expression -> method_call .

  ! reduce/reduce conflict for PLUS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MODULE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GREATER resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LESS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for AND resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for OR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for OR_OPERATOR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for PRINT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for PUTS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LOCAL_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CLASS_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DEF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for RETURN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CLASS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CONSTANT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for L_ULTRA_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for IF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for UNLESS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for WHILE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for $end resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for END resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for ELSIF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_ULTRA_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_MAYUS_PAREN resolved using rule 88 (expression -> method_call .)
    PLUS            reduce using rule 88 (expression -> method_call .)
    MINUS           reduce using rule 88 (expression -> method_call .)
    MULTIPLY        reduce using rule 88 (expression -> method_call .)
    DIVIDE          reduce using rule 88 (expression -> method_call .)
    MODULE          reduce using rule 88 (expression -> method_call .)
    EQUALS          reduce using rule 88 (expression -> method_call .)
    DIFFERENT       reduce using rule 88 (expression -> method_call .)
    GREATER         reduce using rule 88 (expression -> method_call .)
    LESS            reduce using rule 88 (expression -> method_call .)
    GREATER_EQUAL   reduce using rule 88 (expression -> method_call .)
    LESS_EQUAL      reduce using rule 88 (expression -> method_call .)
    AND             reduce using rule 88 (expression -> method_call .)
    OR              reduce using rule 88 (expression -> method_call .)
    OR_OPERATOR     reduce using rule 88 (expression -> method_call .)
    COMMA           reduce using rule 88 (expression -> method_call .)
    PRINT           reduce using rule 88 (expression -> method_call .)
    PUTS            reduce using rule 88 (expression -> method_call .)
    LOCAL_VAR       reduce using rule 88 (expression -> method_call .)
    GLOBAL_VAR      reduce using rule 88 (expression -> method_call .)
    INSTANCE_VAR    reduce using rule 88 (expression -> method_call .)
    CLASS_VAR       reduce using rule 88 (expression -> method_call .)
    DEF             reduce using rule 88 (expression -> method_call .)
    RETURN          reduce using rule 88 (expression -> method_call .)
    CLASS           reduce using rule 88 (expression -> method_call .)
    CONSTANT        reduce using rule 88 (expression -> method_call .)
    L_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    IF              reduce using rule 88 (expression -> method_call .)
    UNTIL           reduce using rule 88 (expression -> method_call .)
    UNLESS          reduce using rule 88 (expression -> method_call .)
    WHILE           reduce using rule 88 (expression -> method_call .)
    $end            reduce using rule 88 (expression -> method_call .)
    END             reduce using rule 88 (expression -> method_call .)
    ELSE            reduce using rule 88 (expression -> method_call .)
    ELSIF           reduce using rule 88 (expression -> method_call .)
    R_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    R_PAREN         reduce using rule 88 (expression -> method_call .)
    R_MAYUS_PAREN   reduce using rule 88 (expression -> method_call .)

  ! PLUS            [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! MINUS           [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! MULTIPLY        [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! DIVIDE          [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! MODULE          [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! EQUALS          [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! DIFFERENT       [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! GREATER         [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! LESS            [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! GREATER_EQUAL   [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! LESS_EQUAL      [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! AND             [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! OR              [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! OR_OPERATOR     [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! COMMA           [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! PRINT           [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! PUTS            [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! LOCAL_VAR       [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! GLOBAL_VAR      [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! INSTANCE_VAR    [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! CLASS_VAR       [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! DEF             [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! RETURN          [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! CLASS           [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! CONSTANT        [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! IF              [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! UNTIL           [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! UNLESS          [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! WHILE           [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! $end            [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! END             [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! ELSE            [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! ELSIF           [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! R_ULTRA_PAREN   [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! R_PAREN         [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]
  ! R_MAYUS_PAREN   [ reduce using rule 106 (expression_binop -> expression LESS method_call .) ]


state 188

    (98) expression_binop -> expression GREATER_EQUAL expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    DIFFERENT       reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    AND             reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    OR              reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    OR_OPERATOR     reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    PRINT           reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    PUTS            reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    LOCAL_VAR       reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    GLOBAL_VAR      reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    INSTANCE_VAR    reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    CLASS_VAR       reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    DEF             reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    RETURN          reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    CLASS           reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    CONSTANT        reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    L_ULTRA_PAREN   reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    UNTIL           reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    UNLESS          reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    END             reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    ELSIF           reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    R_ULTRA_PAREN   reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    R_PAREN         reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    R_MAYUS_PAREN   reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    EQUALS          shift and go to state 102

  ! PLUS            [ reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! MODULE          [ reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! EQUALS          [ reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! GREATER         [ reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! LESS            [ reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 98 (expression_binop -> expression GREATER_EQUAL expression .) ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 189

    (103) expression_binop -> expression GREATER_EQUAL method_call .
    (88) expression -> method_call .

  ! reduce/reduce conflict for PLUS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MODULE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GREATER resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LESS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for AND resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for OR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for OR_OPERATOR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for PRINT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for PUTS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LOCAL_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CLASS_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DEF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for RETURN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CLASS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CONSTANT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for L_ULTRA_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for IF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for UNLESS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for WHILE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for $end resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for END resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for ELSIF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_ULTRA_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_MAYUS_PAREN resolved using rule 88 (expression -> method_call .)
    PLUS            reduce using rule 88 (expression -> method_call .)
    MINUS           reduce using rule 88 (expression -> method_call .)
    MULTIPLY        reduce using rule 88 (expression -> method_call .)
    DIVIDE          reduce using rule 88 (expression -> method_call .)
    MODULE          reduce using rule 88 (expression -> method_call .)
    EQUALS          reduce using rule 88 (expression -> method_call .)
    DIFFERENT       reduce using rule 88 (expression -> method_call .)
    GREATER         reduce using rule 88 (expression -> method_call .)
    LESS            reduce using rule 88 (expression -> method_call .)
    GREATER_EQUAL   reduce using rule 88 (expression -> method_call .)
    LESS_EQUAL      reduce using rule 88 (expression -> method_call .)
    AND             reduce using rule 88 (expression -> method_call .)
    OR              reduce using rule 88 (expression -> method_call .)
    OR_OPERATOR     reduce using rule 88 (expression -> method_call .)
    COMMA           reduce using rule 88 (expression -> method_call .)
    PRINT           reduce using rule 88 (expression -> method_call .)
    PUTS            reduce using rule 88 (expression -> method_call .)
    LOCAL_VAR       reduce using rule 88 (expression -> method_call .)
    GLOBAL_VAR      reduce using rule 88 (expression -> method_call .)
    INSTANCE_VAR    reduce using rule 88 (expression -> method_call .)
    CLASS_VAR       reduce using rule 88 (expression -> method_call .)
    DEF             reduce using rule 88 (expression -> method_call .)
    RETURN          reduce using rule 88 (expression -> method_call .)
    CLASS           reduce using rule 88 (expression -> method_call .)
    CONSTANT        reduce using rule 88 (expression -> method_call .)
    L_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    IF              reduce using rule 88 (expression -> method_call .)
    UNTIL           reduce using rule 88 (expression -> method_call .)
    UNLESS          reduce using rule 88 (expression -> method_call .)
    WHILE           reduce using rule 88 (expression -> method_call .)
    $end            reduce using rule 88 (expression -> method_call .)
    END             reduce using rule 88 (expression -> method_call .)
    ELSE            reduce using rule 88 (expression -> method_call .)
    ELSIF           reduce using rule 88 (expression -> method_call .)
    R_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    R_PAREN         reduce using rule 88 (expression -> method_call .)
    R_MAYUS_PAREN   reduce using rule 88 (expression -> method_call .)

  ! PLUS            [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! MINUS           [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! MULTIPLY        [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! DIVIDE          [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! MODULE          [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! EQUALS          [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! DIFFERENT       [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! GREATER         [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! LESS            [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! GREATER_EQUAL   [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! LESS_EQUAL      [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! AND             [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! OR              [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! OR_OPERATOR     [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! COMMA           [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! PRINT           [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! PUTS            [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! LOCAL_VAR       [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! GLOBAL_VAR      [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! INSTANCE_VAR    [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! CLASS_VAR       [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! DEF             [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! RETURN          [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! CLASS           [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! CONSTANT        [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! IF              [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! UNTIL           [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! UNLESS          [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! WHILE           [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! $end            [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! END             [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! ELSE            [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! ELSIF           [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! R_ULTRA_PAREN   [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! R_PAREN         [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]
  ! R_MAYUS_PAREN   [ reduce using rule 103 (expression_binop -> expression GREATER_EQUAL method_call .) ]


state 190

    (99) expression_binop -> expression LESS_EQUAL expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    DIFFERENT       reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    AND             reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    OR              reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    OR_OPERATOR     reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    PRINT           reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    PUTS            reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    LOCAL_VAR       reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    GLOBAL_VAR      reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    INSTANCE_VAR    reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    CLASS_VAR       reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    DEF             reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    RETURN          reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    CLASS           reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    CONSTANT        reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    L_ULTRA_PAREN   reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    IF              reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    UNTIL           reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    UNLESS          reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    WHILE           reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    $end            reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    END             reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    ELSE            reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    ELSIF           reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    R_ULTRA_PAREN   reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    R_PAREN         reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    R_MAYUS_PAREN   reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    EQUALS          shift and go to state 102

  ! PLUS            [ reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! MODULE          [ reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! EQUALS          [ reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! GREATER         [ reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! LESS            [ reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 99 (expression_binop -> expression LESS_EQUAL expression .) ]
  ! DIFFERENT       [ shift and go to state 103 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 191

    (104) expression_binop -> expression LESS_EQUAL method_call .
    (88) expression -> method_call .

  ! reduce/reduce conflict for PLUS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for MODULE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GREATER resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LESS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for AND resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for OR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for OR_OPERATOR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for PRINT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for PUTS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for LOCAL_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CLASS_VAR resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for DEF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for RETURN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CLASS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for CONSTANT resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for L_ULTRA_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for IF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for UNLESS resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for WHILE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for $end resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for END resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for ELSIF resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_ULTRA_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_PAREN resolved using rule 88 (expression -> method_call .)
  ! reduce/reduce conflict for R_MAYUS_PAREN resolved using rule 88 (expression -> method_call .)
    PLUS            reduce using rule 88 (expression -> method_call .)
    MINUS           reduce using rule 88 (expression -> method_call .)
    MULTIPLY        reduce using rule 88 (expression -> method_call .)
    DIVIDE          reduce using rule 88 (expression -> method_call .)
    MODULE          reduce using rule 88 (expression -> method_call .)
    EQUALS          reduce using rule 88 (expression -> method_call .)
    DIFFERENT       reduce using rule 88 (expression -> method_call .)
    GREATER         reduce using rule 88 (expression -> method_call .)
    LESS            reduce using rule 88 (expression -> method_call .)
    GREATER_EQUAL   reduce using rule 88 (expression -> method_call .)
    LESS_EQUAL      reduce using rule 88 (expression -> method_call .)
    AND             reduce using rule 88 (expression -> method_call .)
    OR              reduce using rule 88 (expression -> method_call .)
    OR_OPERATOR     reduce using rule 88 (expression -> method_call .)
    COMMA           reduce using rule 88 (expression -> method_call .)
    PRINT           reduce using rule 88 (expression -> method_call .)
    PUTS            reduce using rule 88 (expression -> method_call .)
    LOCAL_VAR       reduce using rule 88 (expression -> method_call .)
    GLOBAL_VAR      reduce using rule 88 (expression -> method_call .)
    INSTANCE_VAR    reduce using rule 88 (expression -> method_call .)
    CLASS_VAR       reduce using rule 88 (expression -> method_call .)
    DEF             reduce using rule 88 (expression -> method_call .)
    RETURN          reduce using rule 88 (expression -> method_call .)
    CLASS           reduce using rule 88 (expression -> method_call .)
    CONSTANT        reduce using rule 88 (expression -> method_call .)
    L_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    IF              reduce using rule 88 (expression -> method_call .)
    UNTIL           reduce using rule 88 (expression -> method_call .)
    UNLESS          reduce using rule 88 (expression -> method_call .)
    WHILE           reduce using rule 88 (expression -> method_call .)
    $end            reduce using rule 88 (expression -> method_call .)
    END             reduce using rule 88 (expression -> method_call .)
    ELSE            reduce using rule 88 (expression -> method_call .)
    ELSIF           reduce using rule 88 (expression -> method_call .)
    R_ULTRA_PAREN   reduce using rule 88 (expression -> method_call .)
    R_PAREN         reduce using rule 88 (expression -> method_call .)
    R_MAYUS_PAREN   reduce using rule 88 (expression -> method_call .)

  ! PLUS            [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! MINUS           [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! MULTIPLY        [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! DIVIDE          [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! MODULE          [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! EQUALS          [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! DIFFERENT       [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! GREATER         [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! LESS            [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! GREATER_EQUAL   [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! LESS_EQUAL      [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! AND             [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! OR              [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! OR_OPERATOR     [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! COMMA           [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! PRINT           [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! PUTS            [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! LOCAL_VAR       [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! GLOBAL_VAR      [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! INSTANCE_VAR    [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! CLASS_VAR       [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! DEF             [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! RETURN          [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! CLASS           [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! CONSTANT        [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! L_ULTRA_PAREN   [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! IF              [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! UNTIL           [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! UNLESS          [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! WHILE           [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! $end            [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! END             [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! ELSE            [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! ELSIF           [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! R_ULTRA_PAREN   [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! R_PAREN         [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]
  ! R_MAYUS_PAREN   [ reduce using rule 104 (expression_binop -> expression LESS_EQUAL method_call .) ]


state 192

    (100) expression_binop -> expression AND expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    AND             reduce using rule 100 (expression_binop -> expression AND expression .)
    OR_OPERATOR     reduce using rule 100 (expression_binop -> expression AND expression .)
    COMMA           reduce using rule 100 (expression_binop -> expression AND expression .)
    PRINT           reduce using rule 100 (expression_binop -> expression AND expression .)
    PUTS            reduce using rule 100 (expression_binop -> expression AND expression .)
    LOCAL_VAR       reduce using rule 100 (expression_binop -> expression AND expression .)
    GLOBAL_VAR      reduce using rule 100 (expression_binop -> expression AND expression .)
    INSTANCE_VAR    reduce using rule 100 (expression_binop -> expression AND expression .)
    CLASS_VAR       reduce using rule 100 (expression_binop -> expression AND expression .)
    DEF             reduce using rule 100 (expression_binop -> expression AND expression .)
    RETURN          reduce using rule 100 (expression_binop -> expression AND expression .)
    CLASS           reduce using rule 100 (expression_binop -> expression AND expression .)
    CONSTANT        reduce using rule 100 (expression_binop -> expression AND expression .)
    L_ULTRA_PAREN   reduce using rule 100 (expression_binop -> expression AND expression .)
    IF              reduce using rule 100 (expression_binop -> expression AND expression .)
    UNTIL           reduce using rule 100 (expression_binop -> expression AND expression .)
    UNLESS          reduce using rule 100 (expression_binop -> expression AND expression .)
    WHILE           reduce using rule 100 (expression_binop -> expression AND expression .)
    $end            reduce using rule 100 (expression_binop -> expression AND expression .)
    END             reduce using rule 100 (expression_binop -> expression AND expression .)
    ELSE            reduce using rule 100 (expression_binop -> expression AND expression .)
    ELSIF           reduce using rule 100 (expression_binop -> expression AND expression .)
    R_ULTRA_PAREN   reduce using rule 100 (expression_binop -> expression AND expression .)
    R_PAREN         reduce using rule 100 (expression_binop -> expression AND expression .)
    R_MAYUS_PAREN   reduce using rule 100 (expression_binop -> expression AND expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    OR              shift and go to state 109

  ! PLUS            [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! MODULE          [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! DIFFERENT       [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! LESS            [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! LESS_EQUAL      [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! OR              [ reduce using rule 100 (expression_binop -> expression AND expression .) ]
  ! AND             [ shift and go to state 108 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 193

    (101) expression_binop -> expression OR expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    AND             reduce using rule 101 (expression_binop -> expression OR expression .)
    OR              reduce using rule 101 (expression_binop -> expression OR expression .)
    OR_OPERATOR     reduce using rule 101 (expression_binop -> expression OR expression .)
    COMMA           reduce using rule 101 (expression_binop -> expression OR expression .)
    PRINT           reduce using rule 101 (expression_binop -> expression OR expression .)
    PUTS            reduce using rule 101 (expression_binop -> expression OR expression .)
    LOCAL_VAR       reduce using rule 101 (expression_binop -> expression OR expression .)
    GLOBAL_VAR      reduce using rule 101 (expression_binop -> expression OR expression .)
    INSTANCE_VAR    reduce using rule 101 (expression_binop -> expression OR expression .)
    CLASS_VAR       reduce using rule 101 (expression_binop -> expression OR expression .)
    DEF             reduce using rule 101 (expression_binop -> expression OR expression .)
    RETURN          reduce using rule 101 (expression_binop -> expression OR expression .)
    CLASS           reduce using rule 101 (expression_binop -> expression OR expression .)
    CONSTANT        reduce using rule 101 (expression_binop -> expression OR expression .)
    L_ULTRA_PAREN   reduce using rule 101 (expression_binop -> expression OR expression .)
    IF              reduce using rule 101 (expression_binop -> expression OR expression .)
    UNTIL           reduce using rule 101 (expression_binop -> expression OR expression .)
    UNLESS          reduce using rule 101 (expression_binop -> expression OR expression .)
    WHILE           reduce using rule 101 (expression_binop -> expression OR expression .)
    $end            reduce using rule 101 (expression_binop -> expression OR expression .)
    END             reduce using rule 101 (expression_binop -> expression OR expression .)
    ELSE            reduce using rule 101 (expression_binop -> expression OR expression .)
    ELSIF           reduce using rule 101 (expression_binop -> expression OR expression .)
    R_ULTRA_PAREN   reduce using rule 101 (expression_binop -> expression OR expression .)
    R_PAREN         reduce using rule 101 (expression_binop -> expression OR expression .)
    R_MAYUS_PAREN   reduce using rule 101 (expression_binop -> expression OR expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107

  ! PLUS            [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! MODULE          [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! DIFFERENT       [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! LESS            [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! LESS_EQUAL      [ reduce using rule 101 (expression_binop -> expression OR expression .) ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OR_OPERATOR     [ shift and go to state 110 ]


state 194

    (102) expression_binop -> expression OR_OPERATOR expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for OR_OPERATOR resolved as shift
    COMMA           reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    PRINT           reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    PUTS            reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    LOCAL_VAR       reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    GLOBAL_VAR      reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    INSTANCE_VAR    reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    CLASS_VAR       reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    DEF             reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    RETURN          reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    CLASS           reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    CONSTANT        reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    L_ULTRA_PAREN   reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    IF              reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    UNTIL           reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    UNLESS          reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    WHILE           reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    $end            reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    END             reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    ELSE            reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    ELSIF           reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    R_ULTRA_PAREN   reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    R_PAREN         reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    R_MAYUS_PAREN   reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110

  ! PLUS            [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! MINUS           [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! MULTIPLY        [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! DIVIDE          [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! MODULE          [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! EQUALS          [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! DIFFERENT       [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! GREATER         [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! LESS            [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! LESS_EQUAL      [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! AND             [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! OR              [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]
  ! OR_OPERATOR     [ reduce using rule 102 (expression_binop -> expression OR_OPERATOR expression .) ]


state 195

    (116) function_call -> LOCAL_VAR L_PAREN argument_list . R_PAREN
    (35) argument_list -> argument_list . COMMA expression

    R_PAREN         shift and go to state 234
    COMMA           shift and go to state 96


state 196

    (117) function_call -> LOCAL_VAR L_PAREN R_PAREN .

    PLUS            reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    MINUS           reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    MULTIPLY        reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    MODULE          reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    EQUALS          reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    DIFFERENT       reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    GREATER         reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    LESS            reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    GREATER_EQUAL   reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    LESS_EQUAL      reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    AND             reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    OR              reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    OR_OPERATOR     reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    COMMA           reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    PRINT           reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    PUTS            reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    LOCAL_VAR       reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    GLOBAL_VAR      reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    INSTANCE_VAR    reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    CLASS_VAR       reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    DEF             reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    RETURN          reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    CLASS           reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    CONSTANT        reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    L_ULTRA_PAREN   reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    IF              reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    UNTIL           reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    UNLESS          reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    WHILE           reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    $end            reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    END             reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    ELSE            reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    ELSIF           reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    R_ULTRA_PAREN   reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)
    R_MAYUS_PAREN   reduce using rule 117 (function_call -> LOCAL_VAR L_PAREN R_PAREN .)


state 197

    (30) puts_statement -> PUTS L_PAREN argument_list R_PAREN .

    PRINT           reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    PUTS            reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    LOCAL_VAR       reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    GLOBAL_VAR      reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    INSTANCE_VAR    reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    CLASS_VAR       reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    DEF             reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    RETURN          reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    CLASS           reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    CONSTANT        reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    L_ULTRA_PAREN   reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    IF              reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    UNTIL           reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    UNLESS          reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    WHILE           reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    $end            reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    END             reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    ELSE            reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)
    ELSIF           reduce using rule 30 (puts_statement -> PUTS L_PAREN argument_list R_PAREN .)


state 198

    (37) input_statement -> LOCAL_VAR ASSIGN GETS DOT . CHOMP

    CHOMP           shift and go to state 235


state 199

    (48) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list . R_ULTRA_PAREN
    (61) element_list -> element_list . COMMA expression

    R_ULTRA_PAREN   shift and go to state 236
    COMMA           shift and go to state 237


state 200

    (49) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .

    PRINT           reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    PUTS            reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    DEF             reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    RETURN          reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CLASS           reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    L_ULTRA_PAREN   reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    IF              reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    UNTIL           reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    UNLESS          reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    WHILE           reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    $end            reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    END             reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    ELSE            reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    ELSIF           reduce using rule 49 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)


state 201

    (60) element_list -> expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    R_ULTRA_PAREN   reduce using rule 60 (element_list -> expression .)
    COMMA           reduce using rule 60 (element_list -> expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 202

    (44) hash_element -> LOCAL_VAR . TWO_POINTS expression

    TWO_POINTS      shift and go to state 238


state 203

    (40) hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list . R_MAYUS_PAREN
    (42) hash_element_list -> hash_element_list . COMMA hash_element

    R_MAYUS_PAREN   shift and go to state 239
    COMMA           shift and go to state 240


state 204

    (41) hash_element_list -> hash_element .

    R_MAYUS_PAREN   reduce using rule 41 (hash_element_list -> hash_element .)
    COMMA           reduce using rule 41 (hash_element_list -> hash_element .)


state 205

    (43) hash_element -> STRING . HASHARROW expression

    HASHARROW       shift and go to state 241


state 206

    (125) indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .

    L_ULTRA_PAREN   reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ASSIGN          reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PRINT           reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PUTS            reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DEF             reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    RETURN          reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CLASS           reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    IF              reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNTIL           reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNLESS          reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    WHILE           reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    $end            reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PLUS            reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MINUS           reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MULTIPLY        reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIVIDE          reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MODULE          reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    EQUALS          reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIFFERENT       reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER         reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS            reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER_EQUAL   reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS_EQUAL      reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    AND             reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR              reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR_OPERATOR     reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    COMMA           reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    END             reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSE            reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSIF           reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_ULTRA_PAREN   reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_PAREN         reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_MAYUS_PAREN   reduce using rule 125 (indexing -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)


state 207

    (50) array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list . R_ULTRA_PAREN
    (61) element_list -> element_list . COMMA expression

    R_ULTRA_PAREN   shift and go to state 242
    COMMA           shift and go to state 237


state 208

    (51) array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .

    PRINT           reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    PUTS            reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    DEF             reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    RETURN          reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CLASS           reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    L_ULTRA_PAREN   reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    IF              reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    UNTIL           reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    UNLESS          reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    WHILE           reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    $end            reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    END             reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    ELSE            reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    ELSIF           reduce using rule 51 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)


state 209

    (126) indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .

    L_ULTRA_PAREN   reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ASSIGN          reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PRINT           reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PUTS            reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DEF             reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    RETURN          reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CLASS           reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    IF              reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNTIL           reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNLESS          reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    WHILE           reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    $end            reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PLUS            reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MINUS           reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MULTIPLY        reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIVIDE          reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MODULE          reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    EQUALS          reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIFFERENT       reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER         reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS            reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER_EQUAL   reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS_EQUAL      reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    AND             reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR              reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR_OPERATOR     reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    COMMA           reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    END             reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSE            reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSIF           reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_ULTRA_PAREN   reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_PAREN         reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_MAYUS_PAREN   reduce using rule 126 (indexing -> GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)


state 210

    (52) array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list . R_ULTRA_PAREN
    (61) element_list -> element_list . COMMA expression

    R_ULTRA_PAREN   shift and go to state 243
    COMMA           shift and go to state 237


state 211

    (53) array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .

    PRINT           reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    PUTS            reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    DEF             reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    RETURN          reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CLASS           reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    L_ULTRA_PAREN   reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    IF              reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    UNTIL           reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    UNLESS          reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    WHILE           reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    $end            reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    END             reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    ELSE            reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    ELSIF           reduce using rule 53 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)


state 212

    (127) indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .

    L_ULTRA_PAREN   reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ASSIGN          reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PRINT           reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PUTS            reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DEF             reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    RETURN          reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CLASS           reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    IF              reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNTIL           reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNLESS          reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    WHILE           reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    $end            reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PLUS            reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MINUS           reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MULTIPLY        reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIVIDE          reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MODULE          reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    EQUALS          reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIFFERENT       reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER         reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS            reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER_EQUAL   reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS_EQUAL      reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    AND             reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR              reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR_OPERATOR     reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    COMMA           reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    END             reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSE            reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSIF           reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_ULTRA_PAREN   reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_PAREN         reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_MAYUS_PAREN   reduce using rule 127 (indexing -> INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)


state 213

    (54) array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list . R_ULTRA_PAREN
    (61) element_list -> element_list . COMMA expression

    R_ULTRA_PAREN   shift and go to state 244
    COMMA           shift and go to state 237


state 214

    (55) array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .

    PRINT           reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    PUTS            reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    DEF             reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    RETURN          reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CLASS           reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    L_ULTRA_PAREN   reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    IF              reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    UNTIL           reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    UNLESS          reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    WHILE           reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    $end            reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    END             reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    ELSE            reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)
    ELSIF           reduce using rule 55 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN .)


state 215

    (128) indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .

    L_ULTRA_PAREN   reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ASSIGN          reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PRINT           reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PUTS            reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DEF             reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    RETURN          reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CLASS           reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    IF              reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNTIL           reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    UNLESS          reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    WHILE           reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    $end            reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    PLUS            reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MINUS           reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MULTIPLY        reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIVIDE          reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    MODULE          reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    EQUALS          reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    DIFFERENT       reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER         reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS            reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    GREATER_EQUAL   reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    LESS_EQUAL      reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    AND             reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR              reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    OR_OPERATOR     reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    COMMA           reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    END             reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSE            reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    ELSIF           reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_ULTRA_PAREN   reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_PAREN         reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)
    R_MAYUS_PAREN   reduce using rule 128 (indexing -> CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN .)


state 216

    (77) function_definition -> DEF LOCAL_VAR parameter_list statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 245
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 217

    (78) function_definition -> DEF LOCAL_VAR statement_list END .

    PRINT           reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    PUTS            reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    LOCAL_VAR       reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    GLOBAL_VAR      reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    INSTANCE_VAR    reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    CLASS_VAR       reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    DEF             reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    RETURN          reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    CLASS           reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    CONSTANT        reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    L_ULTRA_PAREN   reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    IF              reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    UNTIL           reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    UNLESS          reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    WHILE           reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    $end            reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    END             reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    ELSE            reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)
    ELSIF           reduce using rule 78 (function_definition -> DEF LOCAL_VAR statement_list END .)


state 218

    (79) parameter_list -> L_PAREN parameter_list_inner . R_PAREN
    (82) parameter_list_inner -> parameter_list_inner . COMMA LOCAL_VAR

    R_PAREN         shift and go to state 246
    COMMA           shift and go to state 247


state 219

    (80) parameter_list -> L_PAREN R_PAREN .

    PRINT           reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    PUTS            reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    LOCAL_VAR       reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    GLOBAL_VAR      reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    INSTANCE_VAR    reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    CLASS_VAR       reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    DEF             reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    RETURN          reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    CLASS           reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    CONSTANT        reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    L_ULTRA_PAREN   reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    IF              reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    UNTIL           reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    UNLESS          reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)
    WHILE           reduce using rule 80 (parameter_list -> L_PAREN R_PAREN .)


state 220

    (81) parameter_list_inner -> LOCAL_VAR .

    R_PAREN         reduce using rule 81 (parameter_list_inner -> LOCAL_VAR .)
    COMMA           reduce using rule 81 (parameter_list_inner -> LOCAL_VAR .)


state 221

    (17) class_definition -> CLASS CONSTANT class_body END .

    PRINT           reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    PUTS            reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    LOCAL_VAR       reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    GLOBAL_VAR      reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    INSTANCE_VAR    reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    CLASS_VAR       reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    DEF             reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    RETURN          reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    CLASS           reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    CONSTANT        reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    L_ULTRA_PAREN   reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    IF              reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    UNTIL           reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    UNLESS          reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    WHILE           reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    $end            reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    END             reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    ELSE            reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)
    ELSIF           reduce using rule 17 (class_definition -> CLASS CONSTANT class_body END .)


state 222

    (129) indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .

    L_ULTRA_PAREN   reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    ASSIGN          reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    PRINT           reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    PUTS            reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    DEF             reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    RETURN          reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    CLASS           reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    IF              reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    UNTIL           reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    UNLESS          reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    WHILE           reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    $end            reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    PLUS            reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    MINUS           reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    MULTIPLY        reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    DIVIDE          reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    MODULE          reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    EQUALS          reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    DIFFERENT       reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    GREATER         reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    LESS            reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    GREATER_EQUAL   reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    LESS_EQUAL      reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    AND             reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    OR              reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    OR_OPERATOR     reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    COMMA           reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    END             reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    ELSE            reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    ELSIF           reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    R_ULTRA_PAREN   reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    R_PAREN         reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    R_MAYUS_PAREN   reduce using rule 129 (indexing -> L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)


state 223

    (66) if_statement -> IF condition statement_list END .

    PRINT           reduce using rule 66 (if_statement -> IF condition statement_list END .)
    PUTS            reduce using rule 66 (if_statement -> IF condition statement_list END .)
    LOCAL_VAR       reduce using rule 66 (if_statement -> IF condition statement_list END .)
    GLOBAL_VAR      reduce using rule 66 (if_statement -> IF condition statement_list END .)
    INSTANCE_VAR    reduce using rule 66 (if_statement -> IF condition statement_list END .)
    CLASS_VAR       reduce using rule 66 (if_statement -> IF condition statement_list END .)
    DEF             reduce using rule 66 (if_statement -> IF condition statement_list END .)
    RETURN          reduce using rule 66 (if_statement -> IF condition statement_list END .)
    CLASS           reduce using rule 66 (if_statement -> IF condition statement_list END .)
    CONSTANT        reduce using rule 66 (if_statement -> IF condition statement_list END .)
    L_ULTRA_PAREN   reduce using rule 66 (if_statement -> IF condition statement_list END .)
    IF              reduce using rule 66 (if_statement -> IF condition statement_list END .)
    UNTIL           reduce using rule 66 (if_statement -> IF condition statement_list END .)
    UNLESS          reduce using rule 66 (if_statement -> IF condition statement_list END .)
    WHILE           reduce using rule 66 (if_statement -> IF condition statement_list END .)
    $end            reduce using rule 66 (if_statement -> IF condition statement_list END .)
    END             reduce using rule 66 (if_statement -> IF condition statement_list END .)
    ELSE            reduce using rule 66 (if_statement -> IF condition statement_list END .)
    ELSIF           reduce using rule 66 (if_statement -> IF condition statement_list END .)


state 224

    (67) if_statement -> IF condition statement_list ELSE . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement_list                 shift and go to state 248
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 225

    (68) if_statement -> IF condition statement_list ELSIF . condition statement_list ELSE statement_list END
    (73) condition -> . expression comparison_operator expression
    (74) condition -> . condition logical_operator condition
    (75) condition -> . NOT condition
    (76) condition -> . L_PAREN condition R_PAREN
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 85
    L_PAREN         shift and go to state 86
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    condition                      shift and go to state 249
    expression                     shift and go to state 84
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 226

    (74) condition -> condition logical_operator condition .
    (74) condition -> condition . logical_operator condition
    (45) logical_operator -> . AND
    (46) logical_operator -> . OR
    (47) logical_operator -> . OR_OPERATOR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for OR_OPERATOR resolved as shift
    PRINT           reduce using rule 74 (condition -> condition logical_operator condition .)
    PUTS            reduce using rule 74 (condition -> condition logical_operator condition .)
    LOCAL_VAR       reduce using rule 74 (condition -> condition logical_operator condition .)
    GLOBAL_VAR      reduce using rule 74 (condition -> condition logical_operator condition .)
    INSTANCE_VAR    reduce using rule 74 (condition -> condition logical_operator condition .)
    CLASS_VAR       reduce using rule 74 (condition -> condition logical_operator condition .)
    DEF             reduce using rule 74 (condition -> condition logical_operator condition .)
    RETURN          reduce using rule 74 (condition -> condition logical_operator condition .)
    CLASS           reduce using rule 74 (condition -> condition logical_operator condition .)
    CONSTANT        reduce using rule 74 (condition -> condition logical_operator condition .)
    L_ULTRA_PAREN   reduce using rule 74 (condition -> condition logical_operator condition .)
    IF              reduce using rule 74 (condition -> condition logical_operator condition .)
    UNTIL           reduce using rule 74 (condition -> condition logical_operator condition .)
    UNLESS          reduce using rule 74 (condition -> condition logical_operator condition .)
    WHILE           reduce using rule 74 (condition -> condition logical_operator condition .)
    R_PAREN         reduce using rule 74 (condition -> condition logical_operator condition .)
    AND             shift and go to state 150
    OR              shift and go to state 151
    OR_OPERATOR     shift and go to state 152

  ! AND             [ reduce using rule 74 (condition -> condition logical_operator condition .) ]
  ! OR              [ reduce using rule 74 (condition -> condition logical_operator condition .) ]
  ! OR_OPERATOR     [ reduce using rule 74 (condition -> condition logical_operator condition .) ]

    logical_operator               shift and go to state 149

state 227

    (73) condition -> expression comparison_operator expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for OR_OPERATOR resolved as shift
    PRINT           reduce using rule 73 (condition -> expression comparison_operator expression .)
    PUTS            reduce using rule 73 (condition -> expression comparison_operator expression .)
    LOCAL_VAR       reduce using rule 73 (condition -> expression comparison_operator expression .)
    GLOBAL_VAR      reduce using rule 73 (condition -> expression comparison_operator expression .)
    INSTANCE_VAR    reduce using rule 73 (condition -> expression comparison_operator expression .)
    CLASS_VAR       reduce using rule 73 (condition -> expression comparison_operator expression .)
    DEF             reduce using rule 73 (condition -> expression comparison_operator expression .)
    RETURN          reduce using rule 73 (condition -> expression comparison_operator expression .)
    CLASS           reduce using rule 73 (condition -> expression comparison_operator expression .)
    CONSTANT        reduce using rule 73 (condition -> expression comparison_operator expression .)
    L_ULTRA_PAREN   reduce using rule 73 (condition -> expression comparison_operator expression .)
    IF              reduce using rule 73 (condition -> expression comparison_operator expression .)
    UNTIL           reduce using rule 73 (condition -> expression comparison_operator expression .)
    UNLESS          reduce using rule 73 (condition -> expression comparison_operator expression .)
    WHILE           reduce using rule 73 (condition -> expression comparison_operator expression .)
    R_PAREN         reduce using rule 73 (condition -> expression comparison_operator expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110

  ! AND             [ reduce using rule 73 (condition -> expression comparison_operator expression .) ]
  ! OR              [ reduce using rule 73 (condition -> expression comparison_operator expression .) ]
  ! OR_OPERATOR     [ reduce using rule 73 (condition -> expression comparison_operator expression .) ]


state 228

    (76) condition -> L_PAREN condition R_PAREN .

    AND             reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    OR              reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    OR_OPERATOR     reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    PRINT           reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    PUTS            reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    LOCAL_VAR       reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    GLOBAL_VAR      reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    INSTANCE_VAR    reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    CLASS_VAR       reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    DEF             reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    RETURN          reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    CLASS           reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    CONSTANT        reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    L_ULTRA_PAREN   reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    IF              reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    UNTIL           reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    UNLESS          reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    WHILE           reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)
    R_PAREN         reduce using rule 76 (condition -> L_PAREN condition R_PAREN .)


state 229

    (72) until_statement -> UNTIL condition statement_list END .

    PRINT           reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    PUTS            reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    LOCAL_VAR       reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    GLOBAL_VAR      reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    INSTANCE_VAR    reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    CLASS_VAR       reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    DEF             reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    RETURN          reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    CLASS           reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    CONSTANT        reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    L_ULTRA_PAREN   reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    IF              reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    UNTIL           reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    UNLESS          reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    WHILE           reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    $end            reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    END             reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    ELSE            reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)
    ELSIF           reduce using rule 72 (until_statement -> UNTIL condition statement_list END .)


state 230

    (70) unless_statement -> UNLESS condition statement_list END .

    PRINT           reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    PUTS            reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    LOCAL_VAR       reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    GLOBAL_VAR      reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    INSTANCE_VAR    reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    CLASS_VAR       reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    DEF             reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    RETURN          reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    CLASS           reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    CONSTANT        reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    L_ULTRA_PAREN   reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    IF              reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    UNTIL           reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    UNLESS          reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    WHILE           reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    $end            reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    END             reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    ELSE            reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)
    ELSIF           reduce using rule 70 (unless_statement -> UNLESS condition statement_list END .)


state 231

    (71) unless_statement -> UNLESS condition statement_list ELSE . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement_list                 shift and go to state 250
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 232

    (69) while_statement -> WHILE condition statement_list END .

    PRINT           reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    PUTS            reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    LOCAL_VAR       reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    GLOBAL_VAR      reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    INSTANCE_VAR    reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    CLASS_VAR       reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    DEF             reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    RETURN          reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    CLASS           reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    CONSTANT        reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    L_ULTRA_PAREN   reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    IF              reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    UNTIL           reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    UNLESS          reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    WHILE           reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    $end            reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    END             reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    ELSE            reduce using rule 69 (while_statement -> WHILE condition statement_list END .)
    ELSIF           reduce using rule 69 (while_statement -> WHILE condition statement_list END .)


state 233

    (131) indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .

    L_ULTRA_PAREN   reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    ASSIGN          reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    PRINT           reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    PUTS            reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    DEF             reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    RETURN          reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    CLASS           reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    IF              reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    UNTIL           reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    UNLESS          reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    WHILE           reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    $end            reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    PLUS            reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    MINUS           reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    MULTIPLY        reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    DIVIDE          reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    MODULE          reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    EQUALS          reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    DIFFERENT       reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    GREATER         reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    LESS            reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    GREATER_EQUAL   reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    LESS_EQUAL      reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    AND             reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    OR              reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    OR_OPERATOR     reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    COMMA           reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    END             reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    ELSE            reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    ELSIF           reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    R_ULTRA_PAREN   reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    R_PAREN         reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)
    R_MAYUS_PAREN   reduce using rule 131 (indexing -> indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN .)


state 234

    (116) function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .

    PLUS            reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    MINUS           reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    MULTIPLY        reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    DIVIDE          reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    MODULE          reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    EQUALS          reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    DIFFERENT       reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    GREATER         reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    LESS            reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    GREATER_EQUAL   reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    LESS_EQUAL      reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    AND             reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    OR              reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    OR_OPERATOR     reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    COMMA           reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    PRINT           reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    PUTS            reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    LOCAL_VAR       reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    GLOBAL_VAR      reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    INSTANCE_VAR    reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    CLASS_VAR       reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    DEF             reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    RETURN          reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    CLASS           reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    CONSTANT        reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    L_ULTRA_PAREN   reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    IF              reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    UNTIL           reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    UNLESS          reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    WHILE           reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    $end            reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    END             reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    ELSE            reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    ELSIF           reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    R_ULTRA_PAREN   reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    R_PAREN         reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)
    R_MAYUS_PAREN   reduce using rule 116 (function_call -> LOCAL_VAR L_PAREN argument_list R_PAREN .)


state 235

    (37) input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .

    PRINT           reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    PUTS            reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    LOCAL_VAR       reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    GLOBAL_VAR      reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    INSTANCE_VAR    reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    CLASS_VAR       reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    DEF             reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    RETURN          reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    CLASS           reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    CONSTANT        reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    L_ULTRA_PAREN   reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    IF              reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    UNTIL           reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    UNLESS          reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    WHILE           reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    $end            reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    END             reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    ELSE            reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)
    ELSIF           reduce using rule 37 (input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP .)


state 236

    (48) array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .

    PRINT           reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    PUTS            reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    DEF             reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    RETURN          reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CLASS           reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    L_ULTRA_PAREN   reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    IF              reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNTIL           reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNLESS          reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    WHILE           reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    $end            reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    END             reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    ELSE            reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    ELSIF           reduce using rule 48 (array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)


state 237

    (61) element_list -> element_list COMMA . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 251
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 238

    (44) hash_element -> LOCAL_VAR TWO_POINTS . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 252
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 239

    (40) hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .

    PRINT           reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    PUTS            reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    LOCAL_VAR       reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    GLOBAL_VAR      reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    INSTANCE_VAR    reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    CLASS_VAR       reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    DEF             reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    RETURN          reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    CLASS           reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    CONSTANT        reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    L_ULTRA_PAREN   reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    IF              reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    UNTIL           reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    UNLESS          reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    WHILE           reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    $end            reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    END             reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    ELSE            reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)
    ELSIF           reduce using rule 40 (hash_definition -> LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN .)


state 240

    (42) hash_element_list -> hash_element_list COMMA . hash_element
    (43) hash_element -> . STRING HASHARROW expression
    (44) hash_element -> . LOCAL_VAR TWO_POINTS expression

    STRING          shift and go to state 205
    LOCAL_VAR       shift and go to state 202

    hash_element                   shift and go to state 253

state 241

    (43) hash_element -> STRING HASHARROW . expression
    (83) expression -> . expression_binop
    (84) expression -> . expression_not
    (85) expression -> . expression_group
    (86) expression -> . expression_term
    (87) expression -> . indexing
    (88) expression -> . method_call
    (89) expression_binop -> . expression PLUS expression
    (90) expression_binop -> . expression MINUS expression
    (91) expression_binop -> . expression MULTIPLY expression
    (92) expression_binop -> . expression DIVIDE expression
    (93) expression_binop -> . expression MODULE expression
    (94) expression_binop -> . expression EQUALS expression
    (95) expression_binop -> . expression DIFFERENT expression
    (96) expression_binop -> . expression GREATER expression
    (97) expression_binop -> . expression LESS expression
    (98) expression_binop -> . expression GREATER_EQUAL expression
    (99) expression_binop -> . expression LESS_EQUAL expression
    (100) expression_binop -> . expression AND expression
    (101) expression_binop -> . expression OR expression
    (102) expression_binop -> . expression OR_OPERATOR expression
    (103) expression_binop -> . expression GREATER_EQUAL method_call
    (104) expression_binop -> . expression LESS_EQUAL method_call
    (105) expression_binop -> . expression GREATER method_call
    (106) expression_binop -> . expression LESS method_call
    (107) expression_binop -> . expression EQUALS method_call
    (108) expression_not -> . NOT expression
    (109) expression_group -> . L_PAREN expression R_PAREN
    (110) expression_term -> . INTEGER
    (111) expression_term -> . FLOAT
    (112) expression_term -> . STRING
    (113) expression_term -> . LOCAL_VAR
    (114) expression_term -> . indexing
    (115) expression_term -> . function_call
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (116) function_call -> . LOCAL_VAR L_PAREN argument_list R_PAREN
    (117) function_call -> . LOCAL_VAR L_PAREN R_PAREN
    (118) function_call -> . LOCAL_VAR argument_list
    (119) function_call -> . LOCAL_VAR

    NOT             shift and go to state 50
    L_PAREN         shift and go to state 79
    INTEGER         shift and go to state 51
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    LOCAL_VAR       shift and go to state 54
    GLOBAL_VAR      shift and go to state 56
    INSTANCE_VAR    shift and go to state 57
    CLASS_VAR       shift and go to state 58
    L_ULTRA_PAREN   shift and go to state 33
    CONSTANT        shift and go to state 32

    expression                     shift and go to state 254
    expression_binop               shift and go to state 44
    expression_not                 shift and go to state 45
    expression_group               shift and go to state 46
    expression_term                shift and go to state 47
    indexing                       shift and go to state 48
    method_call                    shift and go to state 49
    function_call                  shift and go to state 55

state 242

    (50) array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .

    PRINT           reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    PUTS            reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    DEF             reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    RETURN          reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CLASS           reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    L_ULTRA_PAREN   reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    IF              reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNTIL           reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNLESS          reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    WHILE           reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    $end            reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    END             reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    ELSE            reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    ELSIF           reduce using rule 50 (array_definition -> GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)


state 243

    (52) array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .

    PRINT           reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    PUTS            reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    DEF             reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    RETURN          reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CLASS           reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    L_ULTRA_PAREN   reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    IF              reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNTIL           reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNLESS          reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    WHILE           reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    $end            reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    END             reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    ELSE            reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    ELSIF           reduce using rule 52 (array_definition -> INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)


state 244

    (54) array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .

    PRINT           reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    PUTS            reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    LOCAL_VAR       reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    GLOBAL_VAR      reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    INSTANCE_VAR    reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CLASS_VAR       reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    DEF             reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    RETURN          reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CLASS           reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    CONSTANT        reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    L_ULTRA_PAREN   reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    IF              reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNTIL           reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    UNLESS          reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    WHILE           reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    $end            reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    END             reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    ELSE            reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)
    ELSIF           reduce using rule 54 (array_definition -> CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN .)


state 245

    (77) function_definition -> DEF LOCAL_VAR parameter_list statement_list END .

    PRINT           reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    PUTS            reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    LOCAL_VAR       reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    GLOBAL_VAR      reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    INSTANCE_VAR    reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    CLASS_VAR       reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    DEF             reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    RETURN          reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    CLASS           reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    CONSTANT        reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    L_ULTRA_PAREN   reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    IF              reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    UNTIL           reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    UNLESS          reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    WHILE           reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    $end            reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    END             reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    ELSE            reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)
    ELSIF           reduce using rule 77 (function_definition -> DEF LOCAL_VAR parameter_list statement_list END .)


state 246

    (79) parameter_list -> L_PAREN parameter_list_inner R_PAREN .

    PRINT           reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    PUTS            reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    LOCAL_VAR       reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    GLOBAL_VAR      reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    INSTANCE_VAR    reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    CLASS_VAR       reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    DEF             reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    RETURN          reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    CLASS           reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    CONSTANT        reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    L_ULTRA_PAREN   reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    IF              reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    UNTIL           reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    UNLESS          reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)
    WHILE           reduce using rule 79 (parameter_list -> L_PAREN parameter_list_inner R_PAREN .)


state 247

    (82) parameter_list_inner -> parameter_list_inner COMMA . LOCAL_VAR

    LOCAL_VAR       shift and go to state 255


state 248

    (67) if_statement -> IF condition statement_list ELSE statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 256
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 249

    (68) if_statement -> IF condition statement_list ELSIF condition . statement_list ELSE statement_list END
    (74) condition -> condition . logical_operator condition
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (45) logical_operator -> . AND
    (46) logical_operator -> . OR
    (47) logical_operator -> . OR_OPERATOR
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    AND             shift and go to state 150
    OR              shift and go to state 151
    OR_OPERATOR     shift and go to state 152
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement_list                 shift and go to state 257
    logical_operator               shift and go to state 149
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 250

    (71) unless_statement -> UNLESS condition statement_list ELSE statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 258
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 251

    (61) element_list -> element_list COMMA expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    R_ULTRA_PAREN   reduce using rule 61 (element_list -> element_list COMMA expression .)
    COMMA           reduce using rule 61 (element_list -> element_list COMMA expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 252

    (44) hash_element -> LOCAL_VAR TWO_POINTS expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    R_MAYUS_PAREN   reduce using rule 44 (hash_element -> LOCAL_VAR TWO_POINTS expression .)
    COMMA           reduce using rule 44 (hash_element -> LOCAL_VAR TWO_POINTS expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 253

    (42) hash_element_list -> hash_element_list COMMA hash_element .

    R_MAYUS_PAREN   reduce using rule 42 (hash_element_list -> hash_element_list COMMA hash_element .)
    COMMA           reduce using rule 42 (hash_element_list -> hash_element_list COMMA hash_element .)


state 254

    (43) hash_element -> STRING HASHARROW expression .
    (89) expression_binop -> expression . PLUS expression
    (90) expression_binop -> expression . MINUS expression
    (91) expression_binop -> expression . MULTIPLY expression
    (92) expression_binop -> expression . DIVIDE expression
    (93) expression_binop -> expression . MODULE expression
    (94) expression_binop -> expression . EQUALS expression
    (95) expression_binop -> expression . DIFFERENT expression
    (96) expression_binop -> expression . GREATER expression
    (97) expression_binop -> expression . LESS expression
    (98) expression_binop -> expression . GREATER_EQUAL expression
    (99) expression_binop -> expression . LESS_EQUAL expression
    (100) expression_binop -> expression . AND expression
    (101) expression_binop -> expression . OR expression
    (102) expression_binop -> expression . OR_OPERATOR expression
    (103) expression_binop -> expression . GREATER_EQUAL method_call
    (104) expression_binop -> expression . LESS_EQUAL method_call
    (105) expression_binop -> expression . GREATER method_call
    (106) expression_binop -> expression . LESS method_call
    (107) expression_binop -> expression . EQUALS method_call

    R_MAYUS_PAREN   reduce using rule 43 (hash_element -> STRING HASHARROW expression .)
    COMMA           reduce using rule 43 (hash_element -> STRING HASHARROW expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    MODULE          shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    GREATER_EQUAL   shift and go to state 106
    LESS_EQUAL      shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109
    OR_OPERATOR     shift and go to state 110


state 255

    (82) parameter_list_inner -> parameter_list_inner COMMA LOCAL_VAR .

    R_PAREN         reduce using rule 82 (parameter_list_inner -> parameter_list_inner COMMA LOCAL_VAR .)
    COMMA           reduce using rule 82 (parameter_list_inner -> parameter_list_inner COMMA LOCAL_VAR .)


state 256

    (67) if_statement -> IF condition statement_list ELSE statement_list END .

    PRINT           reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    PUTS            reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    LOCAL_VAR       reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    GLOBAL_VAR      reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    INSTANCE_VAR    reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    CLASS_VAR       reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    DEF             reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    RETURN          reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    CLASS           reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    CONSTANT        reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    L_ULTRA_PAREN   reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    IF              reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    UNTIL           reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    UNLESS          reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    WHILE           reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    $end            reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    END             reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    ELSE            reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)
    ELSIF           reduce using rule 67 (if_statement -> IF condition statement_list ELSE statement_list END .)


state 257

    (68) if_statement -> IF condition statement_list ELSIF condition statement_list . ELSE statement_list END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    ELSE            shift and go to state 259
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 258

    (71) unless_statement -> UNLESS condition statement_list ELSE statement_list END .

    PRINT           reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    PUTS            reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    LOCAL_VAR       reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    GLOBAL_VAR      reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    INSTANCE_VAR    reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    CLASS_VAR       reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    DEF             reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    RETURN          reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    CLASS           reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    CONSTANT        reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    L_ULTRA_PAREN   reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    IF              reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    UNTIL           reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    UNLESS          reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    WHILE           reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    $end            reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    END             reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    ELSE            reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)
    ELSIF           reduce using rule 71 (unless_statement -> UNLESS condition statement_list ELSE statement_list END .)


state 259

    (68) if_statement -> IF condition statement_list ELSIF condition statement_list ELSE . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement_list                 shift and go to state 260
    statement                      shift and go to state 3
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 260

    (68) if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_statement
    (5) statement -> . puts_statement
    (6) statement -> . input_statement
    (7) statement -> . assignment_statement
    (8) statement -> . data_structure
    (9) statement -> . control_structure
    (10) statement -> . function_definition
    (11) statement -> . return_statement
    (12) statement -> . class_definition
    (13) statement -> . method_call
    (14) statement -> . array_append
    (15) statement -> . indexing
    (16) statement -> . array_assignament
    (26) print_statement -> . PRINT L_PAREN argument_list R_PAREN
    (27) print_statement -> . PRINT L_PAREN R_PAREN
    (28) print_statement -> . PRINT argument_list
    (29) print_statement -> . PRINT
    (30) puts_statement -> . PUTS L_PAREN argument_list R_PAREN
    (31) puts_statement -> . PUTS L_PAREN R_PAREN
    (32) puts_statement -> . PUTS argument_list
    (33) puts_statement -> . PUTS
    (36) input_statement -> . LOCAL_VAR ASSIGN GETS
    (37) input_statement -> . LOCAL_VAR ASSIGN GETS DOT CHOMP
    (22) assignment_statement -> . LOCAL_VAR ASSIGN expression
    (23) assignment_statement -> . GLOBAL_VAR ASSIGN expression
    (24) assignment_statement -> . INSTANCE_VAR ASSIGN expression
    (25) assignment_statement -> . CLASS_VAR ASSIGN expression
    (38) data_structure -> . array_definition
    (39) data_structure -> . hash_definition
    (62) control_structure -> . if_statement
    (63) control_structure -> . until_statement
    (64) control_structure -> . unless_statement
    (65) control_structure -> . while_statement
    (77) function_definition -> . DEF LOCAL_VAR parameter_list statement_list END
    (78) function_definition -> . DEF LOCAL_VAR statement_list END
    (21) return_statement -> . RETURN expression
    (17) class_definition -> . CLASS CONSTANT class_body END
    (120) method_call -> . LOCAL_VAR DOT function_call
    (121) method_call -> . GLOBAL_VAR DOT function_call
    (122) method_call -> . INSTANCE_VAR DOT function_call
    (123) method_call -> . CLASS_VAR DOT function_call
    (124) method_call -> . CONSTANT DOT function_call
    (56) array_append -> . LOCAL_VAR APPEND expression
    (57) array_append -> . GLOBAL_VAR APPEND expression
    (58) array_append -> . INSTANCE_VAR APPEND expression
    (59) array_append -> . CLASS_VAR APPEND expression
    (125) indexing -> . LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (126) indexing -> . GLOBAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (127) indexing -> . INSTANCE_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (128) indexing -> . CLASS_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN
    (129) indexing -> . L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (130) indexing -> . indexing L_ULTRA_PAREN expression R_ULTRA_PAREN
    (131) indexing -> . indexing L_ULTRA_PAREN TWO_POINTS LOCAL_VAR R_ULTRA_PAREN
    (132) array_assignament -> . indexing ASSIGN expression
    (48) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (49) array_definition -> . LOCAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (50) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (51) array_definition -> . GLOBAL_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (52) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (53) array_definition -> . INSTANCE_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (54) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN
    (55) array_definition -> . CLASS_VAR ASSIGN L_ULTRA_PAREN R_ULTRA_PAREN
    (40) hash_definition -> . LOCAL_VAR ASSIGN L_MAYUS_PAREN hash_element_list R_MAYUS_PAREN
    (66) if_statement -> . IF condition statement_list END
    (67) if_statement -> . IF condition statement_list ELSE statement_list END
    (68) if_statement -> . IF condition statement_list ELSIF condition statement_list ELSE statement_list END
    (72) until_statement -> . UNTIL condition statement_list END
    (70) unless_statement -> . UNLESS condition statement_list END
    (71) unless_statement -> . UNLESS condition statement_list ELSE statement_list END
    (69) while_statement -> . WHILE condition statement_list END

    END             shift and go to state 261
    PRINT           shift and go to state 17
    PUTS            shift and go to state 18
    LOCAL_VAR       shift and go to state 19
    GLOBAL_VAR      shift and go to state 20
    INSTANCE_VAR    shift and go to state 21
    CLASS_VAR       shift and go to state 22
    DEF             shift and go to state 29
    RETURN          shift and go to state 30
    CLASS           shift and go to state 31
    CONSTANT        shift and go to state 32
    L_ULTRA_PAREN   shift and go to state 33
    IF              shift and go to state 34
    UNTIL           shift and go to state 35
    UNLESS          shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 38
    print_statement                shift and go to state 4
    puts_statement                 shift and go to state 5
    input_statement                shift and go to state 6
    assignment_statement           shift and go to state 7
    data_structure                 shift and go to state 8
    control_structure              shift and go to state 9
    function_definition            shift and go to state 10
    return_statement               shift and go to state 11
    class_definition               shift and go to state 12
    method_call                    shift and go to state 13
    array_append                   shift and go to state 14
    indexing                       shift and go to state 15
    array_assignament              shift and go to state 16
    array_definition               shift and go to state 23
    hash_definition                shift and go to state 24
    if_statement                   shift and go to state 25
    until_statement                shift and go to state 26
    unless_statement               shift and go to state 27
    while_statement                shift and go to state 28

state 261

    (68) if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .

    PRINT           reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    PUTS            reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    LOCAL_VAR       reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    GLOBAL_VAR      reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    INSTANCE_VAR    reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    CLASS_VAR       reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    DEF             reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    RETURN          reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    CLASS           reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    CONSTANT        reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    L_ULTRA_PAREN   reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    IF              reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    UNTIL           reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    UNLESS          reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    WHILE           reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    $end            reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    END             reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    ELSE            reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)
    ELSIF           reduce using rule 68 (if_statement -> IF condition statement_list ELSIF condition statement_list ELSE statement_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for L_ULTRA_PAREN in state 15 resolved as shift
WARNING: shift/reduce conflict for LOCAL_VAR in state 17 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 17 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 17 resolved as shift
WARNING: shift/reduce conflict for CLASS_VAR in state 17 resolved as shift
WARNING: shift/reduce conflict for L_ULTRA_PAREN in state 17 resolved as shift
WARNING: shift/reduce conflict for CONSTANT in state 17 resolved as shift
WARNING: shift/reduce conflict for LOCAL_VAR in state 18 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 18 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 18 resolved as shift
WARNING: shift/reduce conflict for CLASS_VAR in state 18 resolved as shift
WARNING: shift/reduce conflict for L_ULTRA_PAREN in state 18 resolved as shift
WARNING: shift/reduce conflict for CONSTANT in state 18 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 43 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 43 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 43 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 43 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 43 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 43 resolved as shift
WARNING: shift/reduce conflict for LESS in state 43 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 43 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 43 resolved as shift
WARNING: shift/reduce conflict for AND in state 43 resolved as shift
WARNING: shift/reduce conflict for OR in state 43 resolved as shift
WARNING: shift/reduce conflict for OR_OPERATOR in state 43 resolved as shift
WARNING: shift/reduce conflict for L_ULTRA_PAREN in state 48 resolved as shift
WARNING: shift/reduce conflict for L_ULTRA_PAREN in state 54 resolved as shift
WARNING: shift/reduce conflict for L_ULTRA_PAREN in state 54 resolved as shift
WARNING: shift/reduce conflict for LOCAL_VAR in state 54 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 54 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 54 resolved as shift
WARNING: shift/reduce conflict for CLASS_VAR in state 54 resolved as shift
WARNING: shift/reduce conflict for CONSTANT in state 54 resolved as shift
WARNING: shift/reduce conflict for R_PAREN in state 95 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 114 resolved as shift
WARNING: shift/reduce conflict for LOCAL_VAR in state 121 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 121 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 121 resolved as shift
WARNING: shift/reduce conflict for CLASS_VAR in state 121 resolved as shift
WARNING: shift/reduce conflict for L_ULTRA_PAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for CONSTANT in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 171 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 171 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 171 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 171 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 171 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 171 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 171 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 171 resolved as shift
WARNING: shift/reduce conflict for LESS in state 171 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for AND in state 171 resolved as shift
WARNING: shift/reduce conflict for OR in state 171 resolved as shift
WARNING: shift/reduce conflict for OR_OPERATOR in state 171 resolved as shift
WARNING: shift/reduce conflict for L_ULTRA_PAREN in state 179 resolved as shift
WARNING: shift/reduce conflict for L_ULTRA_PAREN in state 179 resolved as shift
WARNING: shift/reduce conflict for LOCAL_VAR in state 179 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 179 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 179 resolved as shift
WARNING: shift/reduce conflict for CLASS_VAR in state 179 resolved as shift
WARNING: shift/reduce conflict for CONSTANT in state 179 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 194 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 194 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 194 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 194 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 194 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 194 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 194 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 194 resolved as shift
WARNING: shift/reduce conflict for LESS in state 194 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 194 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 194 resolved as shift
WARNING: shift/reduce conflict for AND in state 194 resolved as shift
WARNING: shift/reduce conflict for OR in state 194 resolved as shift
WARNING: shift/reduce conflict for OR_OPERATOR in state 194 resolved as shift
WARNING: shift/reduce conflict for AND in state 226 resolved as shift
WARNING: shift/reduce conflict for OR in state 226 resolved as shift
WARNING: shift/reduce conflict for OR_OPERATOR in state 226 resolved as shift
WARNING: shift/reduce conflict for AND in state 227 resolved as shift
WARNING: shift/reduce conflict for OR in state 227 resolved as shift
WARNING: shift/reduce conflict for OR_OPERATOR in state 227 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (expression -> indexing)
WARNING: rejected rule (expression_term -> indexing) in state 48
WARNING: reduce/reduce conflict in state 54 resolved using rule (expression_term -> LOCAL_VAR)
WARNING: rejected rule (function_call -> LOCAL_VAR) in state 54
WARNING: reduce/reduce conflict in state 178 resolved using rule (expression -> method_call)
WARNING: rejected rule (expression_binop -> expression EQUALS method_call) in state 178
WARNING: reduce/reduce conflict in state 179 resolved using rule (expression_term -> LOCAL_VAR)
WARNING: rejected rule (function_call -> LOCAL_VAR) in state 179
WARNING: reduce/reduce conflict in state 185 resolved using rule (expression -> method_call)
WARNING: rejected rule (expression_binop -> expression GREATER method_call) in state 185
WARNING: reduce/reduce conflict in state 187 resolved using rule (expression -> method_call)
WARNING: rejected rule (expression_binop -> expression LESS method_call) in state 187
WARNING: reduce/reduce conflict in state 189 resolved using rule (expression -> method_call)
WARNING: rejected rule (expression_binop -> expression GREATER_EQUAL method_call) in state 189
WARNING: reduce/reduce conflict in state 191 resolved using rule (expression -> method_call)
WARNING: rejected rule (expression_binop -> expression LESS_EQUAL method_call) in state 191
WARNING: Rule (expression_term -> indexing) is never reduced
WARNING: Rule (expression_binop -> expression EQUALS method_call) is never reduced
WARNING: Rule (expression_binop -> expression GREATER method_call) is never reduced
WARNING: Rule (expression_binop -> expression LESS method_call) is never reduced
WARNING: Rule (expression_binop -> expression GREATER_EQUAL method_call) is never reduced
WARNING: Rule (expression_binop -> expression LESS_EQUAL method_call) is never reduced
