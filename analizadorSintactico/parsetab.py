
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN CHOMP CLASS CLASS_VAR COMMA CONSTANT DEF DIFFERENT DOT ELSE ELSIF END EQUALS FLOAT GETS GLOBAL_VAR GREATER GREATER_EQUAL HASHARROW IF INSTANCE_VAR INTEGER LESS LESS_EQUAL LOCAL_VAR L_MAYUS_PAREN L_PAREN L_ULTRA_PAREN MINUS NIL PLUS PRINT PUTS R_MAYUS_PAREN R_PAREN R_ULTRA_PAREN STRING THEN TWO_POINTS UNLESS UNTIL WHEN WHILEprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : print_statement\n                 | input_statement\n                 | data_structure\n                 | control_structure\n                 | function_definitionprint_statement : PRINT L_PAREN argument_list R_PAREN\n                       | PRINT L_PAREN R_PAREN \n                       | PRINT argument_list\n                       | PRINTargument_list : expression\n                     | argument_list COMMA expressioninput_statement : LOCAL_VAR ASSIGN GETS\n                        | LOCAL_VAR ASSIGN GETS DOT CHOMPdata_structure : array_definitionarray_definition : LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PARENelement_list : expression\n                    | element_list COMMA expressioncontrol_structure : if_statementif_statement : IF condition statement_list END\n                    | IF condition statement_list ELSE statement_list ENDcondition : expression comparison_operator expressionfunction_definition : DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list ENDparameter_list : LOCAL_VAR\n                      | parameter_list COMMA LOCAL_VAR\n                      | emptyexpression : INTEGER\n                  | FLOAT\n                  | STRING\n                  | LOCAL_VAR\n                  | array_accessarray_access : LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PARENcomparison_operator : EQUALS\n                           | DIFFERENT\n                           | LESS\n                           | LESS_EQUAL\n                           | GREATER\n                           | GREATER_EQUALempty :'
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,26,29,32,35,43,44,52,53,54,55,56,57,59,61,63,65,66,],[9,9,-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,9,-10,-15,9,-9,-14,-22,9,-24,-34,-16,-18,9,9,9,-23,-25,]),'LOCAL_VAR':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,52,53,54,55,56,57,58,59,60,61,63,65,66,],[10,10,-2,-4,-5,-6,-7,-8,22,-17,-21,25,22,-3,22,-11,-13,-29,-30,-31,-32,-33,10,-10,22,22,-15,22,49,10,22,-35,-36,-37,-38,-39,-40,-9,-14,-22,10,-24,-34,-16,-18,22,10,64,10,10,-23,-25,]),'DEF':([0,2,3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,26,29,32,35,43,44,52,53,54,55,56,57,59,61,63,65,66,],[13,13,-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,13,-10,-15,13,-9,-14,-22,13,-24,-34,-16,-18,13,13,13,-23,-25,]),'IF':([0,2,3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,26,29,32,35,43,44,52,53,54,55,56,57,59,61,63,65,66,],[14,14,-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,14,-10,-15,14,-9,-14,-22,14,-24,-34,-16,-18,14,14,14,-23,-25,]),'$end':([1,2,3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,29,32,43,44,52,55,56,57,65,66,],[0,-1,-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,-10,-15,-9,-14,-22,-34,-16,-18,-23,-25,]),'END':([3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,29,32,35,43,44,52,55,56,57,61,63,65,66,],[-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,-10,-15,52,-9,-14,-22,-34,-16,-18,65,66,-23,-25,]),'ELSE':([3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,29,32,35,43,44,52,55,56,57,65,66,],[-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,-10,-15,53,-9,-14,-22,-34,-16,-18,-23,-25,]),'L_PAREN':([9,25,],[16,34,]),'INTEGER':([9,14,16,30,31,33,36,37,38,39,40,41,42,58,],[19,19,19,19,19,19,19,-35,-36,-37,-38,-39,-40,19,]),'FLOAT':([9,14,16,30,31,33,36,37,38,39,40,41,42,58,],[20,20,20,20,20,20,20,-35,-36,-37,-38,-39,-40,20,]),'STRING':([9,14,16,30,31,33,36,37,38,39,40,41,42,58,],[21,21,21,21,21,21,21,-35,-36,-37,-38,-39,-40,21,]),'ASSIGN':([10,],[24,]),'R_PAREN':([16,18,19,20,21,22,23,28,34,44,49,50,51,55,64,],[29,-13,-29,-30,-31,-32,-33,43,-41,-14,-26,59,-28,-34,-27,]),'COMMA':([17,18,19,20,21,22,23,28,34,44,47,48,49,50,51,55,62,64,],[30,-13,-29,-30,-31,-32,-33,30,-41,-14,58,-19,-26,60,-28,-34,-20,-27,]),'EQUALS':([19,20,21,22,23,27,55,],[-29,-30,-31,-32,-33,37,-34,]),'DIFFERENT':([19,20,21,22,23,27,55,],[-29,-30,-31,-32,-33,38,-34,]),'LESS':([19,20,21,22,23,27,55,],[-29,-30,-31,-32,-33,39,-34,]),'LESS_EQUAL':([19,20,21,22,23,27,55,],[-29,-30,-31,-32,-33,40,-34,]),'GREATER':([19,20,21,22,23,27,55,],[-29,-30,-31,-32,-33,41,-34,]),'GREATER_EQUAL':([19,20,21,22,23,27,55,],[-29,-30,-31,-32,-33,42,-34,]),'R_ULTRA_PAREN':([19,20,21,22,23,45,47,48,55,62,],[-29,-30,-31,-32,-33,55,57,-19,-34,-20,]),'L_ULTRA_PAREN':([22,24,],[31,33,]),'GETS':([24,],[32,]),'DOT':([32,],[46,]),'CHOMP':([46,],[56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,26,53,59,],[2,35,61,63,]),'statement':([0,2,26,35,53,59,61,63,],[3,15,3,15,3,3,15,15,]),'print_statement':([0,2,26,35,53,59,61,63,],[4,4,4,4,4,4,4,4,]),'input_statement':([0,2,26,35,53,59,61,63,],[5,5,5,5,5,5,5,5,]),'data_structure':([0,2,26,35,53,59,61,63,],[6,6,6,6,6,6,6,6,]),'control_structure':([0,2,26,35,53,59,61,63,],[7,7,7,7,7,7,7,7,]),'function_definition':([0,2,26,35,53,59,61,63,],[8,8,8,8,8,8,8,8,]),'array_definition':([0,2,26,35,53,59,61,63,],[11,11,11,11,11,11,11,11,]),'if_statement':([0,2,26,35,53,59,61,63,],[12,12,12,12,12,12,12,12,]),'argument_list':([9,16,],[17,28,]),'expression':([9,14,16,30,31,33,36,58,],[18,27,18,44,45,48,54,62,]),'array_access':([9,14,16,30,31,33,36,58,],[23,23,23,23,23,23,23,23,]),'condition':([14,],[26,]),'comparison_operator':([27,],[36,]),'element_list':([33,],[47,]),'parameter_list':([34,],[50,]),'empty':([34,],[51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','analizadorSintactico.py',6),
  ('statement_list -> statement','statement_list',1,'p_statement_list','analizadorSintactico.py',11),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','analizadorSintactico.py',12),
  ('statement -> print_statement','statement',1,'p_statement','analizadorSintactico.py',17),
  ('statement -> input_statement','statement',1,'p_statement','analizadorSintactico.py',18),
  ('statement -> data_structure','statement',1,'p_statement','analizadorSintactico.py',19),
  ('statement -> control_structure','statement',1,'p_statement','analizadorSintactico.py',20),
  ('statement -> function_definition','statement',1,'p_statement','analizadorSintactico.py',21),
  ('print_statement -> PRINT L_PAREN argument_list R_PAREN','print_statement',4,'p_print_statement','analizadorSintactico.py',26),
  ('print_statement -> PRINT L_PAREN R_PAREN','print_statement',3,'p_print_statement','analizadorSintactico.py',27),
  ('print_statement -> PRINT argument_list','print_statement',2,'p_print_statement','analizadorSintactico.py',28),
  ('print_statement -> PRINT','print_statement',1,'p_print_statement','analizadorSintactico.py',29),
  ('argument_list -> expression','argument_list',1,'p_argument_list','analizadorSintactico.py',34),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','analizadorSintactico.py',35),
  ('input_statement -> LOCAL_VAR ASSIGN GETS','input_statement',3,'p_input_statement','analizadorSintactico.py',40),
  ('input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP','input_statement',5,'p_input_statement','analizadorSintactico.py',41),
  ('data_structure -> array_definition','data_structure',1,'p_data_structure','analizadorSintactico.py',46),
  ('array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN','array_definition',5,'p_array_definition','analizadorSintactico.py',51),
  ('element_list -> expression','element_list',1,'p_element_list','analizadorSintactico.py',56),
  ('element_list -> element_list COMMA expression','element_list',3,'p_element_list','analizadorSintactico.py',57),
  ('control_structure -> if_statement','control_structure',1,'p_control_structure','analizadorSintactico.py',62),
  ('if_statement -> IF condition statement_list END','if_statement',4,'p_if_statement','analizadorSintactico.py',67),
  ('if_statement -> IF condition statement_list ELSE statement_list END','if_statement',6,'p_if_statement','analizadorSintactico.py',68),
  ('condition -> expression comparison_operator expression','condition',3,'p_condition','analizadorSintactico.py',73),
  ('function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END','function_definition',7,'p_function_definition','analizadorSintactico.py',78),
  ('parameter_list -> LOCAL_VAR','parameter_list',1,'p_parameter_list','analizadorSintactico.py',83),
  ('parameter_list -> parameter_list COMMA LOCAL_VAR','parameter_list',3,'p_parameter_list','analizadorSintactico.py',84),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','analizadorSintactico.py',85),
  ('expression -> INTEGER','expression',1,'p_expression','analizadorSintactico.py',90),
  ('expression -> FLOAT','expression',1,'p_expression','analizadorSintactico.py',91),
  ('expression -> STRING','expression',1,'p_expression','analizadorSintactico.py',92),
  ('expression -> LOCAL_VAR','expression',1,'p_expression','analizadorSintactico.py',93),
  ('expression -> array_access','expression',1,'p_expression','analizadorSintactico.py',94),
  ('array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN','array_access',4,'p_array_access','analizadorSintactico.py',99),
  ('comparison_operator -> EQUALS','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',104),
  ('comparison_operator -> DIFFERENT','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',105),
  ('comparison_operator -> LESS','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',106),
  ('comparison_operator -> LESS_EQUAL','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',107),
  ('comparison_operator -> GREATER','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',108),
  ('comparison_operator -> GREATER_EQUAL','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',109),
  ('empty -> <empty>','empty',0,'p_empty','analizadorSintactico.py',114),
]
