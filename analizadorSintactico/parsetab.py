
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN CHOMP CLASS CLASS_VAR COMMA CONSTANT DEF DIFFERENT DIVIDE DOT ELSE ELSIF END EQUALS FLOAT GETS GLOBAL_VAR GREATER GREATER_EQUAL HASHARROW IF INSTANCE_VAR INTEGER LESS LESS_EQUAL LOCAL_VAR L_MAYUS_PAREN L_PAREN L_ULTRA_PAREN MINUS MODULE MULTIPLY NIL PLUS PRINT PUTS R_MAYUS_PAREN R_PAREN R_ULTRA_PAREN STRING THEN TWO_POINTS UNLESS UNTIL WHEN WHILEprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : print_statement\n                 | input_statement\n                 | data_structure\n                 | control_structure\n                 | function_definitionprint_statement : PRINT L_PAREN argument_list R_PAREN\n                       | PRINT L_PAREN R_PAREN \n                       | PRINT argument_list\n                       | PRINTargument_list : expression\n                     | argument_list COMMA expressioninput_statement : LOCAL_VAR ASSIGN GETS\n                        | LOCAL_VAR ASSIGN GETS DOT CHOMPdata_structure : array_definitionarray_definition : LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PARENelement_list : expression\n                    | element_list COMMA expressioncontrol_structure : if_statementif_statement : IF condition statement_list END\n                    | IF condition statement_list ELSE statement_list ENDcondition : expression comparison_operator expressionfunction_definition : DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list ENDparameter_list : LOCAL_VAR\n                      | parameter_list COMMA LOCAL_VAR\n                      | emptyexpression : INTEGER\n                  | FLOAT\n                  | STRING\n                  | LOCAL_VAR\n                  | array_access\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression MODULE expression\n                  | expression comparison_operator expressionarray_access : LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PARENcomparison_operator : EQUALS\n                           | DIFFERENT\n                           | LESS\n                           | LESS_EQUAL\n                           | GREATER\n                           | GREATER_EQUALempty :'
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,26,29,44,47,49,50,51,52,53,54,55,56,64,65,66,67,68,69,71,73,75,77,78,],[9,9,-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,9,-10,-15,9,-9,-14,-34,-35,-36,-37,-38,-39,-22,9,-24,-40,-16,-18,9,9,9,-23,-25,]),'LOCAL_VAR':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,75,77,78,],[10,10,-2,-4,-5,-6,-7,-8,22,-17,-21,25,22,-3,22,-11,-13,-29,-30,-31,-32,-33,10,-10,22,22,22,22,22,22,22,-41,-42,-43,-44,-45,-46,22,-15,22,61,10,22,-9,-14,-34,-35,-36,-37,-38,-39,-22,10,-24,-40,-16,-18,22,10,76,10,10,-23,-25,]),'DEF':([0,2,3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,26,29,44,47,49,50,51,52,53,54,55,56,64,65,66,67,68,69,71,73,75,77,78,],[13,13,-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,13,-10,-15,13,-9,-14,-34,-35,-36,-37,-38,-39,-22,13,-24,-40,-16,-18,13,13,13,-23,-25,]),'IF':([0,2,3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,26,29,44,47,49,50,51,52,53,54,55,56,64,65,66,67,68,69,71,73,75,77,78,],[14,14,-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,14,-10,-15,14,-9,-14,-34,-35,-36,-37,-38,-39,-22,14,-24,-40,-16,-18,14,14,14,-23,-25,]),'$end':([1,2,3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,29,44,49,50,51,52,53,54,55,56,64,67,68,69,77,78,],[0,-1,-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,-10,-15,-9,-14,-34,-35,-36,-37,-38,-39,-22,-40,-16,-18,-23,-25,]),'END':([3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,29,44,47,49,50,51,52,53,54,55,56,64,67,68,69,73,75,77,78,],[-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,-10,-15,64,-9,-14,-34,-35,-36,-37,-38,-39,-22,-40,-16,-18,77,78,-23,-25,]),'ELSE':([3,4,5,6,7,8,9,11,12,15,17,18,19,20,21,22,23,29,44,47,49,50,51,52,53,54,55,56,64,67,68,69,77,78,],[-2,-4,-5,-6,-7,-8,-12,-17,-21,-3,-11,-13,-29,-30,-31,-32,-33,-10,-15,65,-9,-14,-34,-35,-36,-37,-38,-39,-22,-40,-16,-18,-23,-25,]),'L_PAREN':([9,25,],[16,46,]),'INTEGER':([9,14,16,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,48,70,],[19,19,19,19,19,19,19,19,19,19,-41,-42,-43,-44,-45,-46,19,19,19,19,]),'FLOAT':([9,14,16,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,48,70,],[20,20,20,20,20,20,20,20,20,20,-41,-42,-43,-44,-45,-46,20,20,20,20,]),'STRING':([9,14,16,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,48,70,],[21,21,21,21,21,21,21,21,21,21,-41,-42,-43,-44,-45,-46,21,21,21,21,]),'ASSIGN':([10,],[24,]),'R_PAREN':([16,18,19,20,21,22,23,28,46,50,51,52,53,54,55,56,61,62,63,67,76,],[29,-13,-29,-30,-31,-32,-33,49,-47,-14,-34,-35,-36,-37,-38,-39,-26,71,-28,-40,-27,]),'COMMA':([17,18,19,20,21,22,23,28,46,50,51,52,53,54,55,56,59,60,61,62,63,67,74,76,],[30,-13,-29,-30,-31,-32,-33,30,-47,-14,-34,-35,-36,-37,-38,-39,70,-19,-26,72,-28,-40,-20,-27,]),'PLUS':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[31,-29,-30,-31,-32,-33,31,31,31,31,31,31,31,31,31,31,31,-40,31,]),'MINUS':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[32,-29,-30,-31,-32,-33,32,32,32,32,32,32,32,32,32,32,32,-40,32,]),'MULTIPLY':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[33,-29,-30,-31,-32,-33,33,33,33,33,33,33,33,33,33,33,33,-40,33,]),'DIVIDE':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[34,-29,-30,-31,-32,-33,34,34,34,34,34,34,34,34,34,34,34,-40,34,]),'MODULE':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[35,-29,-30,-31,-32,-33,35,35,35,35,35,35,35,35,35,35,35,-40,35,]),'EQUALS':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[37,-29,-30,-31,-32,-33,37,37,37,37,37,37,37,37,37,37,37,-40,37,]),'DIFFERENT':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[38,-29,-30,-31,-32,-33,38,38,38,38,38,38,38,38,38,38,38,-40,38,]),'LESS':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[39,-29,-30,-31,-32,-33,39,39,39,39,39,39,39,39,39,39,39,-40,39,]),'LESS_EQUAL':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[40,-29,-30,-31,-32,-33,40,40,40,40,40,40,40,40,40,40,40,-40,40,]),'GREATER':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[41,-29,-30,-31,-32,-33,41,41,41,41,41,41,41,41,41,41,41,-40,41,]),'GREATER_EQUAL':([18,19,20,21,22,23,27,50,51,52,53,54,55,56,57,60,66,67,74,],[42,-29,-30,-31,-32,-33,42,42,42,42,42,42,42,42,42,42,42,-40,42,]),'R_ULTRA_PAREN':([19,20,21,22,23,51,52,53,54,55,56,57,59,60,67,74,],[-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,67,69,-19,-40,-20,]),'L_ULTRA_PAREN':([22,24,],[43,45,]),'GETS':([24,],[44,]),'DOT':([44,],[58,]),'CHOMP':([58,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,26,65,71,],[2,47,73,75,]),'statement':([0,2,26,47,65,71,73,75,],[3,15,3,15,3,3,15,15,]),'print_statement':([0,2,26,47,65,71,73,75,],[4,4,4,4,4,4,4,4,]),'input_statement':([0,2,26,47,65,71,73,75,],[5,5,5,5,5,5,5,5,]),'data_structure':([0,2,26,47,65,71,73,75,],[6,6,6,6,6,6,6,6,]),'control_structure':([0,2,26,47,65,71,73,75,],[7,7,7,7,7,7,7,7,]),'function_definition':([0,2,26,47,65,71,73,75,],[8,8,8,8,8,8,8,8,]),'array_definition':([0,2,26,47,65,71,73,75,],[11,11,11,11,11,11,11,11,]),'if_statement':([0,2,26,47,65,71,73,75,],[12,12,12,12,12,12,12,12,]),'argument_list':([9,16,],[17,28,]),'expression':([9,14,16,30,31,32,33,34,35,36,43,45,48,70,],[18,27,18,50,51,52,53,54,55,56,57,60,66,74,]),'array_access':([9,14,16,30,31,32,33,34,35,36,43,45,48,70,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'condition':([14,],[26,]),'comparison_operator':([18,27,50,51,52,53,54,55,56,57,60,66,74,],[36,48,36,36,36,36,36,36,36,36,36,36,36,]),'element_list':([45,],[59,]),'parameter_list':([46,],[62,]),'empty':([46,],[63,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','analizadorSintactico.py',7),
  ('statement_list -> statement','statement_list',1,'p_statement_list','analizadorSintactico.py',12),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','analizadorSintactico.py',13),
  ('statement -> print_statement','statement',1,'p_statement','analizadorSintactico.py',18),
  ('statement -> input_statement','statement',1,'p_statement','analizadorSintactico.py',19),
  ('statement -> data_structure','statement',1,'p_statement','analizadorSintactico.py',20),
  ('statement -> control_structure','statement',1,'p_statement','analizadorSintactico.py',21),
  ('statement -> function_definition','statement',1,'p_statement','analizadorSintactico.py',22),
  ('print_statement -> PRINT L_PAREN argument_list R_PAREN','print_statement',4,'p_print_statement','analizadorSintactico.py',27),
  ('print_statement -> PRINT L_PAREN R_PAREN','print_statement',3,'p_print_statement','analizadorSintactico.py',28),
  ('print_statement -> PRINT argument_list','print_statement',2,'p_print_statement','analizadorSintactico.py',29),
  ('print_statement -> PRINT','print_statement',1,'p_print_statement','analizadorSintactico.py',30),
  ('argument_list -> expression','argument_list',1,'p_argument_list','analizadorSintactico.py',35),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','analizadorSintactico.py',36),
  ('input_statement -> LOCAL_VAR ASSIGN GETS','input_statement',3,'p_input_statement','analizadorSintactico.py',41),
  ('input_statement -> LOCAL_VAR ASSIGN GETS DOT CHOMP','input_statement',5,'p_input_statement','analizadorSintactico.py',42),
  ('data_structure -> array_definition','data_structure',1,'p_data_structure','analizadorSintactico.py',47),
  ('array_definition -> LOCAL_VAR ASSIGN L_ULTRA_PAREN element_list R_ULTRA_PAREN','array_definition',5,'p_array_definition','analizadorSintactico.py',52),
  ('element_list -> expression','element_list',1,'p_element_list','analizadorSintactico.py',57),
  ('element_list -> element_list COMMA expression','element_list',3,'p_element_list','analizadorSintactico.py',58),
  ('control_structure -> if_statement','control_structure',1,'p_control_structure','analizadorSintactico.py',63),
  ('if_statement -> IF condition statement_list END','if_statement',4,'p_if_statement','analizadorSintactico.py',68),
  ('if_statement -> IF condition statement_list ELSE statement_list END','if_statement',6,'p_if_statement','analizadorSintactico.py',69),
  ('condition -> expression comparison_operator expression','condition',3,'p_condition','analizadorSintactico.py',74),
  ('function_definition -> DEF LOCAL_VAR L_PAREN parameter_list R_PAREN statement_list END','function_definition',7,'p_function_definition','analizadorSintactico.py',79),
  ('parameter_list -> LOCAL_VAR','parameter_list',1,'p_parameter_list','analizadorSintactico.py',84),
  ('parameter_list -> parameter_list COMMA LOCAL_VAR','parameter_list',3,'p_parameter_list','analizadorSintactico.py',85),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','analizadorSintactico.py',86),
  ('expression -> INTEGER','expression',1,'p_expression','analizadorSintactico.py',91),
  ('expression -> FLOAT','expression',1,'p_expression','analizadorSintactico.py',92),
  ('expression -> STRING','expression',1,'p_expression','analizadorSintactico.py',93),
  ('expression -> LOCAL_VAR','expression',1,'p_expression','analizadorSintactico.py',94),
  ('expression -> array_access','expression',1,'p_expression','analizadorSintactico.py',95),
  ('expression -> expression PLUS expression','expression',3,'p_expression','analizadorSintactico.py',96),
  ('expression -> expression MINUS expression','expression',3,'p_expression','analizadorSintactico.py',97),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','analizadorSintactico.py',98),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','analizadorSintactico.py',99),
  ('expression -> expression MODULE expression','expression',3,'p_expression','analizadorSintactico.py',100),
  ('expression -> expression comparison_operator expression','expression',3,'p_expression','analizadorSintactico.py',101),
  ('array_access -> LOCAL_VAR L_ULTRA_PAREN expression R_ULTRA_PAREN','array_access',4,'p_array_access','analizadorSintactico.py',106),
  ('comparison_operator -> EQUALS','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',111),
  ('comparison_operator -> DIFFERENT','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',112),
  ('comparison_operator -> LESS','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',113),
  ('comparison_operator -> LESS_EQUAL','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',114),
  ('comparison_operator -> GREATER','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',115),
  ('comparison_operator -> GREATER_EQUAL','comparison_operator',1,'p_comparison_operator','analizadorSintactico.py',116),
  ('empty -> <empty>','empty',0,'p_empty','analizadorSintactico.py',121),
]
